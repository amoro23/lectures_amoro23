(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[    462913,       9448]
NotebookOptionsPosition[    428062,       8994]
NotebookOutlinePosition[    428485,       9011]
CellTagsIndexPosition[    428442,       9008]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Symbolic maths: Mathematica", "Title",
 CellChangeTimes->{{3.9089566943269043`*^9, 3.9089566994844275`*^9}, {
  3.941637771824458*^9, 
  3.941637792932426*^9}},ExpressionUUID->"4df0f69a-bb07-418d-b7a2-\
7b448b460603"],

Cell["Author: Nicholas Loutrel (researcher here in my group)", "Text",
 CellChangeTimes->{{3.908956707689006*^9, 3.908956718891553*^9}, 
   3.9089569952304835`*^9, {3.9089588957130322`*^9, 3.9089589175497227`*^9}, {
   3.910070234260473*^9, 3.910070235325793*^9}, {3.910167803961444*^9, 
   3.9101678044234*^9}, {3.9102417376010237`*^9, 3.9102417379776006`*^9}, {
   3.941637739247176*^9, 3.9416377444677553`*^9}, {3.941637779537692*^9, 
   3.9416377914703627`*^9}},ExpressionUUID->"1c384217-8de4-4d52-ae54-\
d026f4d5f7d6"],

Cell[CellGroupData[{

Cell["Introduction & Basic Operations", "Section",
 CellChangeTimes->{{3.9089570033461847`*^9, 3.908957011076539*^9}, {
  3.941637795343215*^9, 
  3.941637796120656*^9}},ExpressionUUID->"9b641a4d-b2b8-475c-898e-\
9427d1bc9b05"],

Cell[CellGroupData[{

Cell["Notebook Basics", "Subsection",
 CellChangeTimes->{{3.908960082690404*^9, 
  3.90896008743981*^9}},ExpressionUUID->"79169727-fdbc-42bb-bc33-\
d7f14f45c379"],

Cell["\<\
Mathematica notebooks work in a near identical way to Jupyter/IPython \
notebooks. The notebooks contains cells, with each cell containing specific \
codes and commands, which are run by pressing \[OpenCurlyQuote]SHIFT + ENTER\
\[CloseCurlyQuote].\
\>", "Text",
 CellChangeTimes->{{3.9089593287185755`*^9, 3.908959393511691*^9}, {
  3.908962743344753*^9, 3.9089627444810314`*^9}, {3.909022629671872*^9, 
  3.9090226420900445`*^9}, {3.910334938235973*^9, 
  3.9103349392665424`*^9}},ExpressionUUID->"1f5c2906-dead-4d76-89bb-\
985238dace06"],

Cell[BoxData[
 RowBox[{"2", "+", "2"}]], "Input",
 CellChangeTimes->{{3.9089593944111705`*^9, 3.9089593950334835`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"812fd77f-4c93-496f-8da2-90df881ce095"],

Cell["\<\
\[OpenCurlyQuote]In[#]\[CloseCurlyQuote] are input cells, while \
\[OpenCurlyQuote]Out[#]\[CloseCurlyQuote] are the output from the \
corresponding input cell.\
\>", "Text",
 CellChangeTimes->{{3.908959412909085*^9, 3.9089594468440905`*^9}, {
  3.941637809780554*^9, 
  3.9416378102356443`*^9}},ExpressionUUID->"b6120320-0e7f-4830-a6ad-\
ab3a9b6a8b1c"],

Cell["\<\
Pressing \[OpenCurlyQuote]ENTER\[CloseCurlyQuote] adds a new line within the \
input cell. Multiple expression can be evaluated per input cell using this \
method:\
\>", "Text",
 CellChangeTimes->{{3.9090226496204653`*^9, 
  3.9090226853846045`*^9}},ExpressionUUID->"a684da5e-6aec-4815-bda6-\
b1127e6f0539"],

Cell[BoxData[{
 RowBox[{"2", "+", "2"}], "\[IndentingNewLine]", 
 RowBox[{"5", "-", "4"}], "\[IndentingNewLine]", 
 RowBox[{"3", "+", "1"}]}], "Input",
 CellChangeTimes->{{3.909022686603983*^9, 3.9090226889857845`*^9}, {
  3.9107580402164097`*^9, 3.91075804673389*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"a5997d6c-e74f-42f3-aaba-8e5e188427fa"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Basic Arithmetic Operations", "Subsection",
 CellChangeTimes->{{3.9089600943131676`*^9, 
  3.908960098432127*^9}},ExpressionUUID->"a93df578-dd6a-48eb-a2ba-\
ef80cf78957c"],

Cell["\<\
All basic math operations are specified with their corresponding symbols: + \
(addition), - (subtraction), * (multiplication), / (division), \
^(exponentiation). Note the difference between Python and Mathematica for \
exponentiation!\
\>", "Text",
 CellChangeTimes->{{3.9089594678677144`*^9, 3.9089595284756937`*^9}, {
  3.908959917758686*^9, 3.9089599347130637`*^9}, {3.9103349743289948`*^9, 
  3.9103349750455933`*^9}},ExpressionUUID->"3085f63c-b2c0-4bc0-b7f3-\
3ecc53a9ea75"],

Cell[BoxData[
 RowBox[{"8", "+", "13"}]], "Input",
 CellChangeTimes->{{3.908959535658654*^9, 3.9089595363992023`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"0bd07bb0-2cd3-4cce-85e0-708c83df5a83"],

Cell[BoxData[
 RowBox[{"21", "-", "8"}]], "Input",
 CellChangeTimes->{{3.908959540392926*^9, 3.9089595410679855`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"584c44a7-34ad-4d6f-8c14-6ea111f661bf"],

Cell[BoxData[
 RowBox[{"2", "*", "2"}]], "Input",
 CellChangeTimes->{{3.908959546016548*^9, 3.908959546575714*^9}, {
  3.94163782093603*^9, 3.941637823672402*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"1a848af6-1e9d-4ec3-8839-ba2afec09129"],

Cell[BoxData[
 RowBox[{"4", "/", "2"}]], "Input",
 CellChangeTimes->{{3.908959550703019*^9, 3.908959550993922*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"231551db-8fed-4131-9e7f-6fbb909e3282"],

Cell[BoxData[
 RowBox[{"2", "^", "2"}]], "Input",
 CellChangeTimes->{{3.9089595537558775`*^9, 3.9089595554538574`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"71717cb5-8105-4766-99a1-c865482ed272"],

Cell["\<\
Multiplication can also be achieved by adding in parentheses and/or spaces.\
\>", "Text",
 CellChangeTimes->{{3.9089595745716295`*^9, 
  3.9089595978117037`*^9}},ExpressionUUID->"bce95e9e-c14b-4a9e-a213-\
47e6065e708f"],

Cell[BoxData["\[Beta]"], "Input",
 CellChangeTimes->{{3.9089596061569915`*^9, 3.908959606963476*^9}, {
  3.9104095791460404`*^9, 3.910409580425558*^9}, {3.910758111231845*^9, 
  3.910758113388342*^9}, {3.94169004173151*^9, 3.941690056716996*^9}, {
  3.942204537265566*^9, 3.942204542673345*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"caf5e7f4-bf73-47e5-a5eb-04c1850b854a"],

Cell[BoxData[
 RowBox[{"2", 
  RowBox[{"(", "2", ")"}]}]], "Input",
 CellChangeTimes->{{3.908959611141178*^9, 3.9089596120940247`*^9}, {
  3.941690065143034*^9, 3.941690067873907*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"d978372c-d02d-4996-bf73-f759954ac6d1"],

Cell["But, remember order of operations!", "Text",
 CellChangeTimes->{{3.9089596188541603`*^9, 
  3.908959625010701*^9}},ExpressionUUID->"29178a4b-9237-4829-b768-\
ac03abda70c7"],

Cell[BoxData[
 RowBox[{"2", 
  RowBox[{"(", 
   RowBox[{"1", "+", "1"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.9089596265469294`*^9, 3.908959635408101*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"3952e0a2-7ecc-4bb6-b429-52cff6101597"],

Cell[BoxData[
 RowBox[{
  RowBox[{"2", " ", "1"}], "+", "1"}]], "Input",
 CellChangeTimes->{{3.9089596373326707`*^9, 3.908959640144783*^9}, {
  3.910758131250925*^9, 3.910758132139248*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"eb4ac1c6-3065-47fa-8211-b50c3077c27a"],

Cell["\<\
Mathematica contains a number of special symbols, which can be created by \
entering \[OpenCurlyQuote]Esc + Symbol/Key + Esc\[CloseCurlyQuote]. For \
example, the infinity symbol is obtained by entering \[OpenCurlyQuote]Esc  \
Inf  Esc\[CloseCurlyQuote]:\
\>", "Text",
 CellChangeTimes->{{3.908959668180148*^9, 3.908959674154066*^9}, {
   3.90895972886277*^9, 3.908959807936801*^9}, {3.9089601600890193`*^9, 
   3.9089601619405217`*^9}, {3.9089604739926767`*^9, 3.908960478118715*^9}, 
   3.910335008950938*^9},ExpressionUUID->"e5bc84b1-0fab-41a5-834f-\
8496e7d4521b"],

Cell[BoxData["\[Infinity]"], "Input",
 CellChangeTimes->{{3.908960479902742*^9, 3.908960480885542*^9}, {
  3.9104096061849084`*^9, 3.9104096190237265`*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"a3ea4fd3-a796-4952-8277-a5c6045b8164"],

Cell[BoxData["\[Beta]"], "Input",
 CellChangeTimes->{{3.910758186142405*^9, 3.9107581898912582`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"206c9145-07fe-4e0d-aa35-d90683877a7f"],

Cell["\<\
The multiplication symbol can take a special form using this method (input \
\[OpenCurlyQuote]Esc *  Esc\[CloseCurlyQuote]):\
\>", "Text",
 CellChangeTimes->{{3.9089598175241137`*^9, 3.9089598373939075`*^9}, {
  3.908959889779664*^9, 3.90895990561421*^9}, {3.908960128517475*^9, 
  3.9089601444301186`*^9}},ExpressionUUID->"eb199e99-5eb9-4cf6-aecf-\
2b85ce2afa0d"],

Cell[BoxData[
 RowBox[{"2", "\[Times]", "2"}]], "Input",
 CellChangeTimes->{{3.908959852807691*^9, 3.9089598553697824`*^9}, {
  3.910409625855644*^9, 3.910409630251542*^9}, {3.941690092531117*^9, 
  3.9416901055229263`*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"3e429f77-5d43-4e28-bd7b-9dc1805abfc8"],

Cell["\<\
Other special formatting can be obtained through the \[OpenCurlyQuote]Ctrl + \
Key\[CloseCurlyQuote] command. For example, division (\[OpenCurlyQuote]Ctrl + \
/\[CloseCurlyQuote]) and exponentiation (\[OpenCurlyQuote]Ctrl + ^\
\[CloseCurlyQuote]):\
\>", "Text",
 CellChangeTimes->{{3.9089599443003073`*^9, 3.9089600449248066`*^9}, {
  3.910335153524828*^9, 
  3.910335154722105*^9}},ExpressionUUID->"1ce0cf4c-049a-48b8-9621-\
7740d31cc65d"],

Cell[BoxData[
 RowBox[{"2", "/", "3"}]], "Input",
 CellChangeTimes->{{3.908960016237403*^9, 3.9089600222329893`*^9}, {
  3.9104096488145647`*^9, 3.910409673892686*^9}, {3.9107582147847567`*^9, 
  3.910758216414645*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"9155b059-cda9-46c9-a677-923e9452dc93"],

Cell[BoxData[
 FractionBox["32", "12"]], "Input",
 CellChangeTimes->{{3.910758220809662*^9, 3.910758231304571*^9}, {
  3.9416901204305897`*^9, 3.941690132660348*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"b09c959b-5d09-432e-98e0-f42633802e71"],

Cell[BoxData[
 SuperscriptBox["2", "3"]], "Input",
 CellChangeTimes->{{3.9089600555474634`*^9, 3.908960058329074*^9}, {
  3.9104096781005898`*^9, 3.910409688479968*^9}, {3.9416378733744287`*^9, 
  3.941637878515745*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"3ab23438-39de-40c3-b909-704220413dd6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Variables", "Subsection",
 CellChangeTimes->{{3.9089601111156473`*^9, 
  3.9089601121916733`*^9}},ExpressionUUID->"eb213427-0291-4436-90c3-\
1b26448e4d07"],

Cell["\<\
Any letter entered as input is automatically treated as a variable. No need \
to tell Mathematica explicitly!\
\>", "Text",
 CellChangeTimes->{{3.908960178318646*^9, 
  3.908960244652371*^9}},ExpressionUUID->"db86e516-65b1-4c80-88ad-\
1b253e7f5c1b"],

Cell[BoxData["x"], "Input",
 CellChangeTimes->{3.9089602462050347`*^9},
 CellLabel->"In[34]:=",ExpressionUUID->"c9737420-779e-44fc-b6f4-e0046fe74e7b"],

Cell["\<\
Notice the color of \[OpenCurlyQuote]x\[CloseCurlyQuote] in the input cell \
(it\[CloseCurlyQuote]s blue, important in a moment).\
\>", "Text",
 CellChangeTimes->{{3.9089605041688538`*^9, 
  3.9089605550013723`*^9}},ExpressionUUID->"0036b76a-0be9-4123-b5fb-\
8e8b67703410"],

Cell["\<\
Not all letters can be used as variables, as some are used for built-in \
functions or special mathematical symbols. For example, capital D is the \
function for differentiation (more on this later).\
\>", "Text",
 CellChangeTimes->{{3.908960259855702*^9, 3.908960300939221*^9}, {
  3.9089604973514695`*^9, 3.908960499372568*^9}, {3.9103352493005466`*^9, 
  3.910335251869797*^9}},ExpressionUUID->"ac06df02-a3d4-4fa8-bbbd-\
15404470a954"],

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Cos", "[", "x", "]"}], "*", 
    RowBox[{"x", "^", "2"}]}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.9089603020712743`*^9, 3.9089603087586503`*^9}, {
  3.941690191338262*^9, 3.9416902028141947`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"e61862ca-88bf-4b45-b2fc-f73ddb51b57d"],

Cell["\<\
Values can be assigned to variables using the \[OpenCurlyQuote]=\
\[CloseCurlyQuote] symbol. Output for an input cell can be suppressed using \
the \[OpenCurlyQuote];\[CloseCurlyQuote] at the end of the cell.\
\>", "Text",
 CellChangeTimes->{{3.9089603653751245`*^9, 
  3.9089604297826366`*^9}},ExpressionUUID->"cea15938-442a-4a05-a923-\
4ae838bd7745"],

Cell[BoxData[
 RowBox[{
  RowBox[{"x", "=", "2"}], ";"}]], "Input",
 CellChangeTimes->{{3.9089603930223064`*^9, 3.9089603937989635`*^9}, {
  3.908960432312641*^9, 3.9089604338681192`*^9}, {3.910758325358419*^9, 
  3.910758331051407*^9}, {3.941690245389481*^9, 3.941690247166607*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"0a266df8-b26b-422f-b560-dd5b830c3e13"],

Cell["\<\
Now, notice again the color of \[OpenCurlyQuote]x\[CloseCurlyQuote] from the \
input (both here and previously). It\[CloseCurlyQuote]s now black, which \
indicates visibly that it is already assigned a value. This also works if the \
letter is used internally for a function.\
\>", "Text",
 CellChangeTimes->{{3.9089605659062667`*^9, 3.9089606225842686`*^9}, {
  3.908960662801984*^9, 
  3.9089606694185286`*^9}},ExpressionUUID->"0b1a71a3-51bc-41e6-bab3-\
6b036c95167d"],

Cell[BoxData["D"], "Input",
 CellChangeTimes->{3.9089606703120956`*^9},
 CellLabel->"In[26]:=",ExpressionUUID->"b5c19b92-efc1-4002-91bd-612e4962879c"],

Cell["\<\
Variable names do not need to be single letters. They can be words ...\
\>", "Text",
 CellChangeTimes->{{3.908960681969196*^9, 
  3.908960697712558*^9}},ExpressionUUID->"9fdf3878-7232-4ab6-94c8-\
b4d6e2288cec"],

Cell[BoxData["myVariable"], "Input",
 CellChangeTimes->{{3.908960699677518*^9, 3.9089607157172513`*^9}, {
  3.910409812181782*^9, 3.910409813340885*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"5b047ebf-24e7-445b-b95d-286f941f769a"],

Cell["\<\
... or even Greek letters (input using \[OpenCurlyQuote]Esc + name_of_letter \
+ Esc\[CloseCurlyQuote]).\
\>", "Text",
 CellChangeTimes->{{3.9089607255383105`*^9, 
  3.908960744106616*^9}},ExpressionUUID->"4c52ef49-5282-45a0-a086-\
b318ac2a34c7"],

Cell[BoxData["\[Alpha]"], "Input",
 CellChangeTimes->{{3.908960745911518*^9, 3.9089607482862716`*^9}, {
  3.9104098265759425`*^9, 3.910409828599526*^9}, {3.910758381350171*^9, 
  3.910758382300972*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"23982c31-2b1d-490d-b18d-4651d7e56995"],

Cell["\<\
But they cannot have any special character such as underscore (_), \
exclamation (!), etc. They also can\[CloseCurlyQuote]t start with numbers.\
\>", "Text",
 CellChangeTimes->{{3.9089607617033415`*^9, 
  3.9089608392428026`*^9}},ExpressionUUID->"a52cee15-694a-47b4-a8e4-\
f4c50e6d56b4"],

Cell[BoxData[
 RowBox[{"2", "myVariable"}]], "Input",
 CellChangeTimes->{{3.9089608245812654`*^9, 3.908960827666885*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"62eddf7b-240b-448f-804d-a7a5eab15eb6"],

Cell[BoxData[
 RowBox[{"3", "!"}]], "Input",
 CellChangeTimes->{{3.9107584059876842`*^9, 3.910758406373941*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"c72a2b4f-f147-423b-a45e-325230207df2"],

Cell["Mathematica just treats this as standard multiplication.", "Text",
 CellChangeTimes->{{3.9089608464544*^9, 
  3.9089608558592634`*^9}},ExpressionUUID->"d76d2199-788f-4132-8796-\
0e4cf8e94419"],

Cell["\<\
As a final note, be careful when assigning values to variables not use the \
double equals sign \[OpenCurlyQuote]==\[CloseCurlyQuote]. This is used for \
boolean statements:\
\>", "Text",
 CellChangeTimes->{{3.908960912840743*^9, 
  3.9089609755126534`*^9}},ExpressionUUID->"84e33e2c-54d4-44a7-a347-\
c0cccf3c9823"],

Cell[BoxData[
 RowBox[{"x", "==", "2"}]], "Input",
 CellChangeTimes->{{3.9089609765918827`*^9, 3.908960977266861*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"29293275-190e-48db-9033-0da4b2255d18"],

Cell["\<\
If you inadvertently assign a variable a value, you can overwrite it by \
reassigning it\[CloseCurlyQuote]s value (if you intend for it to have one) ...\
\>", "Text",
 CellChangeTimes->{{3.9089609859626584`*^9, 
  3.9089610499570856`*^9}},ExpressionUUID->"0fe39a1a-e4ec-40aa-ad1c-\
20fc1125bfdf"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"x", "=", "3"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"x", "==", "3"}]}], "Input",
 CellChangeTimes->{{3.9089610336656017`*^9, 3.908961036704129*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"863321a8-f02a-4765-a68b-da49f4fcb211"],

Cell["... or you can use the \[OpenCurlyQuote]Clear\[CloseCurlyQuote] \
function.", "Text",
 CellChangeTimes->{{3.908961052725752*^9, 
  3.9089610609421444`*^9}},ExpressionUUID->"91a24694-4232-46d5-877c-\
955a82bdc1ee"],

Cell[BoxData[
 RowBox[{"Clear", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.9089610624942336`*^9, 3.908961063425556*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"20444649-7c08-496e-8579-a12f2fa85d4d"],

Cell["\<\
Notice again that \[OpenCurlyQuote]x\[CloseCurlyQuote] changed color to \
indicate it is unassigned any value.\
\>", "Text",
 CellChangeTimes->{{3.908961071931407*^9, 3.908961082599167*^9}, {
  3.910335473652031*^9, 
  3.9103354939438796`*^9}},ExpressionUUID->"2a578dbc-6b06-4894-b184-\
96a7acc6a8f2"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Substitution", "Subsection",
 CellChangeTimes->{{3.9089611261961193`*^9, 
  3.9089611286940126`*^9}},ExpressionUUID->"86c7b47f-071c-4555-be75-\
bbe6b732c106"],

Cell["Suppose you have the following expression ...", "Text",
 CellChangeTimes->{{3.9089611551982594`*^9, 
  3.9089611779806085`*^9}},ExpressionUUID->"08e8d264-e21f-4e19-aef3-\
e531df8fa243"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["x", "2"], "+", 
  RowBox[{"2", "x"}], "+", "1"}]], "Input",
 CellChangeTimes->{{3.9089611638160563`*^9, 3.9089611690239162`*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"58787938-e45a-4ed1-a37a-eb64937f144b"],

Cell["\<\
... and you want to know what it\[CloseCurlyQuote]s value is without globally \
assigning a variable to \[OpenCurlyQuote]x.\[CloseCurlyQuote] You can do this \
with substitutions, which are performed with the \
\[OpenCurlyQuote]/.{rule_to_sub}\[CloseCurlyQuote] :\
\>", "Text",
 CellChangeTimes->{{3.9089611869030952`*^9, 3.9089612461815443`*^9}, {
  3.9089613330834513`*^9, 
  3.908961341288844*^9}},ExpressionUUID->"86e36c74-52a0-403b-84f3-\
5f5871813c6a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["x", "2"], "+", 
   RowBox[{"2", "x"}], "+", "1"}], "/.", 
  RowBox[{"{", 
   RowBox[{"x", "->", "2"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.908961247317112*^9, 3.908961253244048*^9}, {
  3.910335383804232*^9, 3.910335391763812*^9}, {3.910409924440447*^9, 
  3.910409936880947*^9}, {3.91075851277143*^9, 3.910758516565612*^9}, {
  3.9416903544659767`*^9, 3.941690367734563*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"e6bdea66-9062-4c20-a17a-902224f0df3c"],

Cell[BoxData["x"], "Input",
 CellChangeTimes->{3.941690378019662*^9},
 CellLabel->"In[38]:=",ExpressionUUID->"dadd5910-11a0-4fca-b1e1-f3362d9c2b82"],

Cell["\<\
Notice again that \[OpenCurlyQuote]x\[CloseCurlyQuote] is still unassigned. \
Substitutions generally apply their rules to the entirety of the cell, but do \
respect order of operations rules:\
\>", "Text",
 CellChangeTimes->{{3.908961275989846*^9, 3.908961284769948*^9}, {
  3.9089613217377787`*^9, 3.9089613755888557`*^9}, {3.9103354305185537`*^9, 
  3.91033543077248*^9}},ExpressionUUID->"53e86c31-0f5c-47de-8b19-\
bafa1373edbb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SuperscriptBox["x", "2"], "+", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"2", "x"}], "+", "1"}], ")"}]}], "/.", 
  RowBox[{"{", 
   RowBox[{"x", "->", "2"}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  SuperscriptBox["x", "2"], "+", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"2", "x"}], "+", "1"}], "/.", 
    RowBox[{"{", 
     RowBox[{"x", "->", "2"}], "}"}]}], ")"}]}]}], "Input",
 CellChangeTimes->{{3.908961377262066*^9, 3.908961399340186*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"c1461939-8ef5-4cb3-bed7-d960a074a27a"],

Cell["\<\
Be careful when applying operations after the substitution on the input cell. \
Mathematica will complain:\
\>", "Text",
 CellChangeTimes->{{3.908961422502815*^9, 
  3.908961447241277*^9}},ExpressionUUID->"083a026c-716d-433c-a529-\
e1490e44a8cf"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["x", "2"], "+", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"2", "x"}], "+", "1"}], ")"}]}], "/.", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "->", "2"}], "}"}], "*", "2"}]}]], "Input",
 CellChangeTimes->{{3.908961450242858*^9, 3.908961456961219*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"a2f917f3-7ab5-44ca-9046-ce02412aac5e"],

Cell["Use parentheses if you need to do this:", "Text",
 CellChangeTimes->{{3.9089614825107193`*^9, 
  3.908961515929325*^9}},ExpressionUUID->"b4e2b7c7-c0c4-46d7-b1e9-\
1be0ddb444f7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "2"], "+", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"2", "x"}], "+", "1"}], ")"}]}], "/.", 
    RowBox[{"{", 
     RowBox[{"x", "->", "2"}], "}"}]}], ")"}], "*", "2"}]], "Input",
 CellChangeTimes->{{3.908961519733947*^9, 3.908961522594502*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"d760d45f-8ec5-41c5-a840-5f30d721d280"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Functions", "Subsection",
 CellChangeTimes->{{3.9089615506733737`*^9, 
  3.9089615515002546`*^9}},ExpressionUUID->"e6c51e56-2456-4e5e-a944-\
73ba6bf58d91"],

Cell["\<\
All functions in Mathematica take inputs through [], not parentheses, which \
are only used for specifying parts of expressions. Functions you create \
follow the same naming rules as variables. To specify inputs, use the \
underscore, while to specify the functions itself, use \[OpenCurlyQuote]:=\
\[CloseCurlyQuote]:\
\>", "Text",
 CellChangeTimes->{{3.9089615633418016`*^9, 
  3.908961703241584*^9}},ExpressionUUID->"b6bd3b60-d850-4eb6-925d-\
9ee3d394a653"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{
   SuperscriptBox["x", "2"], "+", 
   RowBox[{"2", "x"}], "+", "1"}]}]], "Input",
 CellChangeTimes->{{3.908961664972601*^9, 3.9089616677581263`*^9}, {
  3.9089617061054325`*^9, 3.908961709503214*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"573a8d84-124e-4220-a5fe-1637101ea907"],

Cell[BoxData[
 RowBox[{"f", "[", "2", "]"}]], "Input",
 CellChangeTimes->{{3.941690464741461*^9, 3.941690465976844*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"8daaae77-0184-417b-87d7-f003e91ad05c"],

Cell["\<\
Notice again the color of the variable \[OpenCurlyQuote]x\[CloseCurlyQuote], \
which is green in this case. This tells you that it is an internal/input \
variable to the function \[OpenCurlyQuote]f\[CloseCurlyQuote]. Also, \
\[OpenCurlyQuote]f\[CloseCurlyQuote] is now assigned to be a function which \
takes \[OpenCurlyQuote]x\[CloseCurlyQuote] as an input. It is possible to \
override the functions current assignment with \[OpenCurlyQuote]=\
\[CloseCurlyQuote], so be careful!\
\>", "Text",
 CellChangeTimes->{{3.908961713584174*^9, 3.9089617810950093`*^9}, {
  3.908961816386402*^9, 3.908961844644272*^9}, {3.910335554812129*^9, 
  3.9103355647406425`*^9}},ExpressionUUID->"fb8480b4-c953-4f24-8bfe-\
2fde8093a275"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"f", "=", "2"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"f", "==", "2"}]}], "Input",
 CellChangeTimes->{{3.908961846023402*^9, 3.9089618487594724`*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"c44770d7-33f9-404e-9153-29ba079fa776"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "f", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{
   SuperscriptBox["x", "2"], "+", 
   RowBox[{"2", "x"}], "+", "1"}]}]}], "Input",
 CellChangeTimes->{{3.9089618512988443`*^9, 3.9089618754814587`*^9}, {
  3.941692917794598*^9, 3.941692937353113*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"c81b9f19-6f08-4642-b3e1-c6a5c5a3a043"],

Cell["To evaluate a function, simply add an input:", "Text",
 CellChangeTimes->{{3.908961886580217*^9, 
  3.9089618958409023`*^9}},ExpressionUUID->"822a310c-d288-404f-af28-\
b5c577b3ac65"],

Cell[BoxData[{
 RowBox[{"f", "[", "2", "]"}], "\[IndentingNewLine]", 
 RowBox[{"f", "[", "y", "]"}]}], "Input",
 CellChangeTimes->{{3.9089618967127857`*^9, 3.9089619018667574`*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"13b49dd2-89f3-4ace-9bca-b8628eb8817f"],

Cell["Note that functions respect the values of global variables:", "Text",
 CellChangeTimes->{{3.9089619294618177`*^9, 
  3.9089619466596413`*^9}},ExpressionUUID->"596b2ec9-dc3b-458c-a73b-\
cf304befc1fb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"a", "=", "2"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{
   SuperscriptBox["x", "2"], "+", 
   RowBox[{"a", " ", "x"}], "+", "1"}]}]}], "Input",
 CellChangeTimes->{{3.908961948400358*^9, 3.9089619576842885`*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"ef596b67-b361-4d66-a585-88791fc4b745"],

Cell[BoxData[{
 RowBox[{"f", "[", "2", "]"}], "\[IndentingNewLine]", 
 RowBox[{"f", "[", "y", "]"}]}], "Input",
 CellChangeTimes->{{3.908961960401031*^9, 3.90896196583486*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"955df9cc-4243-4c86-aed3-5fbb2a98c0cb"],

Cell["\<\
To specify more than one variable, use a comma for multiple inputs:\
\>", "Text",
 CellChangeTimes->{{3.9089619857645254`*^9, 
  3.908962007979717*^9}},ExpressionUUID->"7ec4ac17-b3fa-4d05-b310-\
4534d58077ea"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "[", 
   RowBox[{"x_", ",", "y_", ",", "z_"}], "]"}], ":=", 
  RowBox[{
   SuperscriptBox["x", "2"], "+", 
   SuperscriptBox["y", "2"], "+", 
   SuperscriptBox["z", "2"]}]}]], "Input",
 CellChangeTimes->{{3.908962008940861*^9, 3.908962030357855*^9}, {
  3.910335623049287*^9, 3.910335623192763*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"b668389a-4b84-4f0a-96a3-32c41385dd44"],

Cell[BoxData[
 RowBox[{"g", "[", 
  RowBox[{"1", ",", "2", ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.910758730485509*^9, 3.910758732772318*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"fc2ba99a-5c43-4f2e-b354-89fac8809eaa"],

Cell["\<\
Functions can also be evaluated using the @ symbol and //. In these cases, \
the function should be understood as acting upon something. Note that // also \
applies to the entire input line like substitutions:\
\>", "Text",
 CellChangeTimes->{{3.9089620784416475`*^9, 
  3.9089621680008*^9}},ExpressionUUID->"9476bb18-0975-4808-81ce-8133a4f69d13"],

Cell[BoxData[
 RowBox[{"f", "[", "2", "]"}]], "Input",
 CellChangeTimes->{{3.941690507479507*^9, 3.941690514273896*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"9d6727d1-9d2d-446d-8da8-f044d5461bf0"],

Cell[BoxData[
 RowBox[{"f", "@", "2"}]], "Input",
 CellChangeTimes->{{3.9089621355983815`*^9, 3.9089621373134108`*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"99e2d7dc-b375-418d-84d2-3ec798b43b75"],

Cell[BoxData[
 RowBox[{"2", "//", "f"}]], "Input",
 CellChangeTimes->{{3.908962139196216*^9, 3.908962140514987*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"093cbf7e-3588-4469-97ed-83bb3c381b48"],

Cell[BoxData[
 RowBox[{
  RowBox[{"1", "+", "1"}], "//", "f"}]], "Input",
 CellChangeTimes->{{3.9089621454920797`*^9, 3.90896214744915*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"8bc03bca-103f-4205-95e3-b8cc244a8295"],

Cell["Some built-in functions:", "Text",
 CellChangeTimes->{{3.909020568692522*^9, 
  3.90902057767431*^9}},ExpressionUUID->"4557025f-348b-4c52-a628-\
1a620df863af"],

Cell[BoxData[{
 RowBox[{"Cos", "[", "0", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Sin", "[", "0", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Sqrt", "[", "2", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Exp", "[", 
  RowBox[{"-", "10"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Log", "[", "\[ExponentialE]", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Log10", "[", "10", "]"}]}], "Input",
 CellChangeTimes->{{3.90902057998522*^9, 3.9090205943455257`*^9}, {
  3.909021543173712*^9, 3.909021557398712*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"4468af63-6e0c-4077-8bb4-ea11d3c570d4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Numerical Evaluation & Precision", "Subsection",
 CellChangeTimes->{{3.908962199357029*^9, 
  3.908962205529683*^9}},ExpressionUUID->"6f2a06b0-92b9-4bd9-88a5-\
f141529804dd"],

Cell["Consider the fraction:", "Text",
 CellChangeTimes->{{3.9089622158700895`*^9, 3.908962218731375*^9}, {
  3.9416380720293016`*^9, 
  3.9416380731802483`*^9}},ExpressionUUID->"bc165eda-6c0e-4515-bae7-\
70c137ca770c"],

Cell[BoxData[
 RowBox[{"2", "/", "3"}]], "Input",
 CellChangeTimes->{{3.908962219927796*^9, 3.908962220237789*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"8a4d9a0d-8cdc-4587-a692-81958b3e2875"],

Cell["\<\
Mathematica doesn\[CloseCurlyQuote]t give a decimal answer for it. This is \
because Mathematica can treat numbers with arbitrary floating point \
precision. To evaluate the fraction (or any number for that matter) to a \
decimal, use the \[OpenCurlyQuote]N\[CloseCurlyQuote] function.\
\>", "Text",
 CellChangeTimes->{{3.9089622322566338`*^9, 3.908962288618215*^9}, {
  3.942205062337988*^9, 
  3.942205066168623*^9}},ExpressionUUID->"048b1c99-6062-45c0-895e-\
7069950eafe9"],

Cell[BoxData[{
 RowBox[{"N", "[", 
  RowBox[{"2", "/", "3"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"N", "@", 
  RowBox[{"(", 
   RowBox[{"2", "/", "3"}], ")"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"2", "/", "3"}], "//", "N"}]}], "Input",
 CellChangeTimes->{{3.90896229010032*^9, 3.90896231111027*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"87c2d059-16af-48a3-8d5e-de0a414e49f6"],

Cell["\<\
Note that the output only has a finite number of decimal points. You can \
change this by specify an additional option of \[OpenCurlyQuote]N\
\[CloseCurlyQuote]:\
\>", "Text",
 CellChangeTimes->{{3.908962367334116*^9, 
  3.9089624002814913`*^9}},ExpressionUUID->"f74afdd8-f342-48b9-b6c7-\
268916ad2019"],

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"2", "/", "3"}], ",", "15"}], "]"}]], "Input",
 CellChangeTimes->{{3.9089624013652816`*^9, 3.9089624032461586`*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"a2ca0475-7db2-4a1d-aa8e-37cc212fce30"],

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"2", "/", "3"}], ",", "100"}], "]"}]], "Input",
 CellChangeTimes->{{3.9089624149329433`*^9, 3.9089624164058104`*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"397acd58-3be0-4cae-98c0-b969db7691d4"],

Cell["\<\
Be careful though: if you give Mathematica decimals on number as an input, it \
will automatically evaluate the expression but only have finite precision. \
Without \[OpenCurlyQuote].\[CloseCurlyQuote], precision is arbitrary, with \
\[OpenCurlyQuote].\[CloseCurlyQuote] it is not.\
\>", "Text",
 CellChangeTimes->{{3.90896245487339*^9, 3.9089625160169554`*^9}, {
  3.9089625534024796`*^9, 3.9089625598495083`*^9}, {3.942205146477765*^9, 
  3.9422051697229223`*^9}},ExpressionUUID->"2dbed78d-40e7-4931-99bf-\
844d6118c6b2"],

Cell[BoxData[
 RowBox[{"2.", "/", "3"}]], "Input",
 CellChangeTimes->{{3.908962517568965*^9, 3.908962518693673*^9}, {
  3.94169064962986*^9, 3.941690651550253*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"da751be3-f8b3-46c9-bfd1-c297165645b9"],

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"2.", "/", "3."}], ",", "15"}], "]"}]], "Input",
 CellChangeTimes->{{3.9089625206748843`*^9, 3.9089625350742702`*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"e137845e-07f2-4a76-891e-1d0e73191ee8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Help", "Subsection",
 CellChangeTimes->{{3.9089626223316298`*^9, 
  3.9089626226590204`*^9}},ExpressionUUID->"7507d254-893a-4300-8836-\
a63915148ea1"],

Cell["\<\
To get help/documentation about built in Mathematica functions, use \
\[OpenCurlyQuote]?\[CloseCurlyQuote]:\
\>", "Text",
 CellChangeTimes->{{3.9089626307696*^9, 
  3.9089626514189157`*^9}},ExpressionUUID->"265263fa-4082-4809-b92c-\
ff4be179fdce"],

Cell[BoxData[
 RowBox[{"?", "N"}]], "Input",
 CellChangeTimes->{{3.9089626528442545`*^9, 3.908962655582312*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"80a349bc-322b-4a02-ab94-62590403715f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Simplification", "Section",
 CellChangeTimes->{{3.9089571479401436`*^9, 
  3.908957150351699*^9}},ExpressionUUID->"3abd5666-09be-4917-8dee-\
610ebfa56e36"],

Cell[CellGroupData[{

Cell["Simplify & FullSimplify", "Subsection",
 CellChangeTimes->{{3.9090201751957273`*^9, 
  3.909020179924365*^9}},ExpressionUUID->"8969233f-46e3-47d7-af4b-\
d3b3bdd9bf1c"],

Cell["\<\
The simplest built-in function for simplification is \
\[OpenCurlyQuote]Simplify\[CloseCurlyQuote]:\
\>", "Text",
 CellChangeTimes->{{3.90902018983179*^9, 
  3.9090202047918024`*^9}},ExpressionUUID->"94234519-b697-430f-8057-\
7b513ee5439a"],

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{
   SuperscriptBox["x", "2"], "-", 
   RowBox[{"2", "x"}], "+", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.909020205969873*^9, 3.9090202126922617`*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"77f07113-586d-4228-a853-e38e419dc533"],

Cell["\<\
Another example, using trig functions and the \[OpenCurlyQuote]%\
\[CloseCurlyQuote] symbol. \[OpenCurlyQuote]%\[CloseCurlyQuote] tells \
Mathematica to take the output of the previous input and do something to it \
(if you put \[OpenCurlyQuote]%%\[CloseCurlyQuote], it takes the input of the \
second-to-last output):\
\>", "Text",
 CellChangeTimes->{{3.9090203249200363`*^9, 3.9090203704771304`*^9}, {
  3.942205248869629*^9, 3.94220526238806*^9}, {3.942205301072811*^9, 
  3.942205308232967*^9}},ExpressionUUID->"c0404461-5a6b-403b-bdc9-\
3c5cffd20df3"],

Cell[BoxData[{
 RowBox[{
  SuperscriptBox[
   RowBox[{"Sin", "[", "x", "]"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"Cos", "[", "x", "]"}], "2"]}], "\[IndentingNewLine]", 
 RowBox[{"Simplify", "[", "%", "]"}]}], "Input",
 CellChangeTimes->{{3.9090202574442687`*^9, 3.9090203186459627`*^9}, {
  3.9416907436196527`*^9, 3.94169074601306*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"cf0943c9-7a29-4c78-acd6-53618672829f"],

Cell["\<\
\[OpenCurlyQuote]Simplify\[CloseCurlyQuote] uses a variety of algebraic \
transformations to try to simplify an expression. But there are examples \
where it doesn\[CloseCurlyQuote]t simplify expressions in the desired way:\
\>", "Text",
 CellChangeTimes->{{3.90902044653317*^9, 
  3.9090205397792125`*^9}},ExpressionUUID->"9ebe5992-15fc-4683-b883-\
a41b7c57b2b5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Sqrt", "[", 
   RowBox[{
    SuperscriptBox["x", "2"], "+", 
    SuperscriptBox["y", "2"]}], "]"}], "/.", 
  RowBox[{"{", 
   RowBox[{"y", "->", "0"}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"Simplify", "[", "%", "]"}]}], "Input",
 CellChangeTimes->{{3.909020542579859*^9, 3.909020549135962*^9}, {
  3.909020617487131*^9, 3.9090206249163027`*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"489effb0-f54e-4c1d-8cee-cefb5b124ade"],

Cell["\<\
The above example highlights a critical behavior of Mathematica, it assumes \
all variables are complex! It interprets the inputs in the most generic way \
possible. To fix this, apply assumptions:\
\>", "Text",
 CellChangeTimes->{{3.909020656153121*^9, 3.9090207051598606`*^9}, {
  3.942205350055238*^9, 
  3.942205368359344*^9}},ExpressionUUID->"27062b9b-b356-449e-86aa-\
816e8df9f031"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Sqrt", "[", 
   RowBox[{
    SuperscriptBox["x", "2"], "+", 
    SuperscriptBox["y", "2"]}], "]"}], "/.", 
  RowBox[{"{", 
   RowBox[{"y", "->", "0"}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"Simplify", "[", 
  RowBox[{"%", ",", 
   RowBox[{"Assumptions", "->", 
    RowBox[{"{", 
     RowBox[{"x", ">", "0"}], "}"}]}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"%", "/.", 
  RowBox[{"{", 
   RowBox[{"x", "->", "2"}], "}"}]}]}], "Input",
 CellChangeTimes->{{3.9090207094838905`*^9, 3.9090207293858595`*^9}, {
  3.909020804897078*^9, 3.909020808322805*^9}, {3.910759278830398*^9, 
  3.910759280053849*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"84c0d321-61cf-47eb-bccc-3bbf03680c25"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Sqrt", "[", 
   RowBox[{
    SuperscriptBox["x", "2"], "+", 
    SuperscriptBox["y", "2"]}], "]"}], "/.", 
  RowBox[{"{", 
   RowBox[{"y", "->", "0"}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"Simplify", "[", 
  RowBox[{"%", ",", 
   RowBox[{"Assumptions", "->", 
    RowBox[{"{", 
     RowBox[{"x", "<", "0"}], "}"}]}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"%", "/.", 
  RowBox[{"{", 
   RowBox[{"x", "->", 
    RowBox[{"-", "2"}]}], "}"}]}]}], "Input",
 CellChangeTimes->{{3.909020739385741*^9, 3.909020740122218*^9}, {
  3.909020811934638*^9, 3.9090208163871107`*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"197bb01c-143d-4aee-896d-1447372cfe4c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Sqrt", "[", 
   RowBox[{
    SuperscriptBox["x", "2"], "+", 
    SuperscriptBox["y", "2"]}], "]"}], "/.", 
  RowBox[{"{", 
   RowBox[{"y", "->", "0"}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"Simplify", "[", 
  RowBox[{"%", ",", 
   RowBox[{"Assumptions", "->", 
    RowBox[{"{", 
     RowBox[{"x", " ", "\[Element]", " ", "Reals"}], "}"}]}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"%", "/.", 
  RowBox[{"{", 
   RowBox[{"x", "->", "2"}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"%%", "/.", 
  RowBox[{"{", 
   RowBox[{"x", "->", 
    RowBox[{"-", "2"}]}], "}"}]}]}], "Input",
 CellChangeTimes->{{3.9090207529684753`*^9, 3.9090207573315897`*^9}, {
  3.9090208198760667`*^9, 3.9090208273475294`*^9}, {3.9107593110988817`*^9, 
  3.910759367000835*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"32c029e9-00ce-4022-8dd8-a25471a3b1fb"],

Cell["\<\
Note that the final expression varies depending on the assumptions, but they \
all give us the correct answer (Mathematica always assumes the square root is \
positive definite), with the final example being the most general. Note that \
substitution rules do not respect assumptions applied in previous \
simplifications steps:\
\>", "Text",
 CellChangeTimes->{{3.909020780652096*^9, 3.9090208014595766`*^9}, {
   3.909020982625556*^9, 3.9090210158597836`*^9}, {3.9090210470154085`*^9, 
   3.909021075728362*^9}, 
   3.910335850484022*^9},ExpressionUUID->"94f7fe6f-2704-4239-9790-\
12317a754d27"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Sqrt", "[", 
   RowBox[{
    SuperscriptBox["x", "2"], "+", 
    SuperscriptBox["y", "2"]}], "]"}], "/.", 
  RowBox[{"{", 
   RowBox[{"y", "->", "0"}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"Simplify", "[", 
  RowBox[{"%", ",", 
   RowBox[{"Assumptions", "->", 
    RowBox[{"{", 
     RowBox[{"x", "<", "0"}], "}"}]}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"%", "/.", 
  RowBox[{"{", 
   RowBox[{"x", "->", "2"}], "}"}]}]}], "Input",
 CellChangeTimes->{3.909021088663824*^9},
 CellLabel->"In[89]:=",ExpressionUUID->"790a6cb8-19a9-4dc3-97a1-a230c98bd1ac"],

Cell["Another example using logarithms:", "Text",
 CellChangeTimes->{{3.909021229496227*^9, 3.9090212320920334`*^9}, {
  3.9090215151222143`*^9, 3.9090215284848614`*^9}, {3.941638257453495*^9, 
  3.941638262205806*^9}},ExpressionUUID->"455ecec4-aec7-4d20-9788-\
5e3ecaa9c1dc"],

Cell[BoxData[{
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{"Log", "[", "x", "]"}], "+", 
   RowBox[{"Log", "[", "y", "]"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Log", "[", "x", "]"}], "+", 
    RowBox[{"Log", "[", "y", "]"}]}], ",", 
   RowBox[{"Assumptions", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x", ">", "0"}], "&&", 
      RowBox[{"y", ">", "0"}]}], "}"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.9090211433143826`*^9, 3.909021207408386*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"37ecc329-2622-48d8-a87a-c2a426bed2fe"],

Cell["\<\
When simplifying expressions with special functions, \
\[OpenCurlyQuote]Simplify\[CloseCurlyQuote] may not be enough. Take for \
example, the Gamma function \[CapitalGamma](x), which for integer values \
reduces to the factorial \[CapitalGamma](n)=(n-1)!,  but generalizes to \
non-integer values. From the rules of factorials n \[CapitalGamma](n) = n!, \
and the generalization to arbitrary real numbers is x \[CapitalGamma](x) = \
\[CapitalGamma](x+1). But, \[OpenCurlyQuote]Simplify\[CloseCurlyQuote] can\
\[CloseCurlyQuote]t do this:\
\>", "Text",
 CellChangeTimes->{{3.9090215772103586`*^9, 3.909021753228051*^9}, {
  3.94163827669388*^9, 3.941638277309382*^9}, {3.941690916201683*^9, 
  3.941690916946252*^9}},ExpressionUUID->"d30b26be-e350-4054-a11e-\
59b748a7ba2f"],

Cell[BoxData[{
 RowBox[{"Gamma", "[", "3", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(", 
   RowBox[{"3", "-", "1"}], ")"}], "!"}]}], "Input",
 CellChangeTimes->{{3.909021771074046*^9, 3.9090217816103945`*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"e759f9c4-e5f5-4511-8f4c-a918356c58e5"],

Cell[BoxData[{
 RowBox[{"3", "*", 
  RowBox[{"Gamma", "[", "3", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"3", "!"}]}], "Input",
 CellChangeTimes->{{3.9090217874817743`*^9, 3.9090217945974984`*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"67edd1fd-1df0-49cd-b673-bcf273460754"],

Cell[BoxData[{
 RowBox[{"2.1", "*", 
  RowBox[{"Gamma", "[", "2.1", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Gamma", "[", 
  RowBox[{"2.1", "+", "1"}], "]"}]}], "Input",
 CellChangeTimes->{{3.909021807268609*^9, 3.909021815683569*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"0ed9ccc8-037d-459a-9cd9-d236052ae7ba"],

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"x", " ", 
   RowBox[{"Gamma", "[", "x", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9090214140800056`*^9, 3.9090214224141493`*^9}, {
  3.9090216010733027`*^9, 3.9090216012432013`*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"a72f5e08-e3bd-495e-abb4-f1ae16109395"],

Cell["In such cases, \[OpenCurlyQuote]FullSimplify\[CloseCurlyQuote] may be \
used:", "Text",
 CellChangeTimes->{{3.9090218306395025`*^9, 3.9090218378271704`*^9}, {
  3.941638302099757*^9, 
  3.941638302861024*^9}},ExpressionUUID->"4f76b2c2-67a8-4013-a197-\
80d7034430d7"],

Cell[BoxData[
 RowBox[{"FullSimplify", "[", 
  RowBox[{"x", " ", 
   RowBox[{"Gamma", "[", "x", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9090218407857995`*^9, 3.909021843657669*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"57a93117-d00a-4aa0-8485-97bca6b2fbee"],

Cell["\<\
\[OpenCurlyQuote]FullSimplify\[CloseCurlyQuote] applies a larger set of \
transformation rules than \[OpenCurlyQuote]Simplify\[CloseCurlyQuote], but it \
is slower as a result, especially when dealing with very complicated \
expression. Anyway, it is way better and more powerful than \
\[OpenCurlyQuote]sympy\[CloseCurlyQuote]. Two more examples highlighting the \
difference between \[OpenCurlyQuote]Simplify\[CloseCurlyQuote] and \
\[OpenCurlyQuote]FullSimplify\[CloseCurlyQuote]:\
\>", "Text",
 CellChangeTimes->{{3.9090218528079166`*^9, 3.9090219515083675`*^9}, {
  3.9090220870375614`*^9, 3.9090220886663265`*^9}, {3.94220563881024*^9, 
  3.942205688403558*^9}},ExpressionUUID->"d2dedd88-bb52-4b57-989c-\
b45cbce2922c"],

Cell["1) Hyperbolic functions:", "Text",
 CellChangeTimes->{{3.909021976106927*^9, 3.9090219788845615`*^9}, {
  3.9090220909578314`*^9, 
  3.9090220914366117`*^9}},ExpressionUUID->"ffe05af6-b5b5-420d-a526-\
242fa45f16fd"],

Cell[BoxData[{
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{"Cosh", "[", "x", "]"}], "-", 
   RowBox[{"Sinh", "[", "x", "]"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"FullSimplify", "[", 
  RowBox[{
   RowBox[{"Cosh", "[", "x", "]"}], "-", 
   RowBox[{"Sinh", "[", "x", "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.9090213572323027`*^9, 3.9090213619162917`*^9}, {
  3.909021406715168*^9, 3.909021411490305*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"80e37a62-abe0-4fd4-8fc4-ee09b89f586d"],

Cell[TextData[{
 "2) ",
 Cell[BoxData[
  RowBox[{
   RowBox[{
    SqrtBox["2",
     MultilineFunction->None,
     SurdForm->True], "+", 
    SqrtBox["3",
     MultilineFunction->None,
     SurdForm->True], "-", 
    SqrtBox[
     RowBox[{"5", "+", 
      RowBox[{"2", 
       SqrtBox["6",
        MultilineFunction->None,
        SurdForm->True]}]}],
     MultilineFunction->None,
     SurdForm->True]}], "=", "0"}]],ExpressionUUID->
  "c2be15e8-8e30-463e-bf93-3f2450319a63"],
 "\t"
}], "Text",
 CellChangeTimes->{{3.909021989800104*^9, 3.9090220943132243`*^9}, 
   3.942205703469892*^9},ExpressionUUID->"0f51fe76-5155-4845-99ac-\
e5cd05646d6e"],

Cell[BoxData[{
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{"Sqrt", "[", "2", "]"}], "+", 
   RowBox[{"Sqrt", "[", "3", "]"}], "-", 
   RowBox[{"Sqrt", "[", 
    RowBox[{"5", "+", 
     RowBox[{"2", 
      RowBox[{"Sqrt", "[", "6", "]"}]}]}], "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"FullSimplify", "[", 
  RowBox[{
   RowBox[{"Sqrt", "[", "2", "]"}], "+", 
   RowBox[{"Sqrt", "[", "3", "]"}], "-", 
   RowBox[{"Sqrt", "[", 
    RowBox[{"5", "+", 
     RowBox[{"2", 
      RowBox[{"Sqrt", "[", "6", "]"}]}]}], "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.9090213807195525`*^9, 3.9090214014355087`*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"dd6de4d8-3b90-472b-9fcc-8cb00bd1e587"],

Cell["\[OpenCurlyQuote]FullSimplify\[CloseCurlyQuote] may still need \
assumptions though:", "Text",
 CellChangeTimes->{{3.909022137425332*^9, 3.9090221741167555`*^9}, {
  3.941691043947988*^9, 
  3.941691044762548*^9}},ExpressionUUID->"cf84b529-ca6f-4208-8a1f-\
566921d1354a"],

Cell[BoxData[{
 RowBox[{"FullSimplify", "[", 
  RowBox[{"Sqrt", "[", 
   SuperscriptBox["x", "2"], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"FullSimplify", "[", 
  RowBox[{
   RowBox[{"Sqrt", "[", 
    SuperscriptBox["x", "2"], "]"}], ",", 
   RowBox[{"Assumptions", "->", 
    RowBox[{"{", 
     RowBox[{"x", ">", "0"}], "}"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.909022117378948*^9, 3.9090221201608944`*^9}, {
  3.909022152102372*^9, 3.9090221615010047`*^9}, {3.94163835940236*^9, 
  3.941638360966688*^9}},
 CellLabel->
  "In[106]:=",ExpressionUUID->"7045b7d4-6760-4ae0-a2b7-b88a72518323"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Expand & ExpandAll", "Subsection",
 CellChangeTimes->{{3.9090221868829393`*^9, 3.9090221969949827`*^9}, {
  3.909022477291108*^9, 3.9090224788305054`*^9}, {3.9090229301753445`*^9, 
  3.9090229355081196`*^9}},ExpressionUUID->"edca5354-df93-4c02-9887-\
6a6d64f61c21"],

Cell["\<\
Expressions involving polynomials can be expanded out using the \
\[OpenCurlyQuote]Expand\[CloseCurlyQuote] function:\
\>", "Text",
 CellChangeTimes->{{3.909022553782253*^9, 
  3.9090225677479267`*^9}},ExpressionUUID->"ba43ce36-874c-43c7-9999-\
830dd8dbb7b2"],

Cell[BoxData[{
 RowBox[{"Expand", "[", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"x", "+", "1"}], ")"}], "2"], 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"x", "-", "1"}], ")"}], "2"]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Expand", "[", 
  RowBox[{"x", 
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["x", "2"], "+", "1"}], ")"}], 
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["x", "3"], "+", "3"}], ")"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.909022568796788*^9, 3.9090226018540163`*^9}},
 CellLabel->
  "In[108]:=",ExpressionUUID->"f0abb20a-19dd-4f12-b818-4213604d28ed"],

Cell["\<\
\[OpenCurlyQuote]Expand\[CloseCurlyQuote] doesn\[CloseCurlyQuote]t operate \
within \[OpenCurlyDoubleQuote]subexpressions.\[CloseCurlyDoubleQuote] For \
example:\
\>", "Text",
 CellChangeTimes->{{3.9090227201406345`*^9, 
  3.9090227454921455`*^9}},ExpressionUUID->"feabfb5c-9d8a-4657-9b3c-\
bb9a554eff8b"],

Cell[BoxData[
 RowBox[{"Expand", "[", 
  RowBox[{"Sqrt", "[", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "+", "x"}], ")"}], "2"], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.909022746809589*^9, 3.909022756863887*^9}},
 CellLabel->
  "In[110]:=",ExpressionUUID->"3f036a93-c02e-4644-acab-6b4c80e29fdb"],

Cell["\<\
To expand the polynomial inside of the square root, use \
\[OpenCurlyQuote]ExpandAll\[CloseCurlyQuote]:\
\>", "Text",
 CellChangeTimes->{{3.909022767156041*^9, 
  3.909022780907466*^9}},ExpressionUUID->"6e43ffc4-5c1f-4bc1-a669-\
61491d872de0"],

Cell[BoxData[
 RowBox[{"ExpandAll", "[", 
  RowBox[{"Sqrt", "[", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "+", "x"}], ")"}], "2"], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.9090227824523964`*^9, 3.9090227871094313`*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"9d9676ea-f9e8-45c1-8fc4-68992a287999"],

Cell["\<\
Similarly, \[OpenCurlyQuote]Expand\[CloseCurlyQuote] only expands the \
numerator of expressions:\
\>", "Text",
 CellChangeTimes->{{3.9090227968139753`*^9, 
  3.9090228095969796`*^9}},ExpressionUUID->"d6f027af-1b4e-46fc-9073-\
731301e8de2f"],

Cell[BoxData[
 RowBox[{"Expand", "[", 
  FractionBox[
   RowBox[{
    RowBox[{"x", " ", "y"}], "+", 
    SuperscriptBox["x", "2"], "+", 
    RowBox[{"2", 
     SuperscriptBox["z", "4"]}]}], 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"y", "+", "z"}], ")"}], "4"]], "]"}]], "Input",
 CellChangeTimes->{{3.9090228129471765`*^9, 3.909022835001423*^9}},
 CellLabel->
  "In[112]:=",ExpressionUUID->"e2557c0d-5f38-4eba-b7d4-4d6979bcb5af"],

Cell["Use \[OpenCurlyQuote]ExpandAll\[CloseCurlyQuote] to expand both \
numerator and denominator:", "Text",
 CellChangeTimes->{{3.9090228437840633`*^9, 
  3.9090228647880535`*^9}},ExpressionUUID->"a5c24658-b6c5-4a94-b4e5-\
77f119b955c6"],

Cell[BoxData[
 RowBox[{"ExpandAll", "[", 
  FractionBox[
   RowBox[{
    RowBox[{"x", " ", "y"}], "+", 
    SuperscriptBox["x", "2"], "+", 
    RowBox[{"2", 
     SuperscriptBox["z", "4"]}]}], 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"y", "+", "z"}], ")"}], "4"]], "]"}]], "Input",
 CellChangeTimes->{{3.909022866006922*^9, 3.9090228910093217`*^9}},
 CellLabel->
  "In[113]:=",ExpressionUUID->"1f0ce453-07a3-4d12-86e0-2f02cb99950c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["PowerExpand & ComplexExpand", "Subsection",
 CellChangeTimes->{{3.909022946553402*^9, 3.9090229478166184`*^9}, {
  3.909023017655789*^9, 
  3.909023022095823*^9}},ExpressionUUID->"aab2af35-082f-4679-9c73-\
2e6c084948bf"],

Cell["To expand powers in expressions, use \[OpenCurlyQuote]PowerExpand\
\[CloseCurlyQuote]:", "Text",
 CellChangeTimes->{{3.9090229606821823`*^9, 
  3.909022970326852*^9}},ExpressionUUID->"75451511-e677-442d-bb0e-\
6422206f19a8"],

Cell[BoxData[{
 RowBox[{"PowerExpand", "[", 
  RowBox[{"Sqrt", "[", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "+", "x"}], ")"}], "2"], "]"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"PowerExpand", "[", 
  RowBox[{"Sqrt", "[", 
   SuperscriptBox["x", "2"], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"PowerExpand", "[", 
  RowBox[{"Sqrt", "[", 
   RowBox[{"x", " ", "y"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"PowerExpand", "[", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"-", "x"}], ")"}], 
   RowBox[{"1", "/", "3"}]], "]"}]}], "Input",
 CellChangeTimes->{{3.9090229715424337`*^9, 3.909022989311142*^9}, {
  3.909023128075142*^9, 3.9090231490927424`*^9}},
 CellLabel->
  "In[114]:=",ExpressionUUID->"5f71f1e7-770a-4e4f-b241-5f7ef9da679f"],

Cell["\<\
Notice that with \[OpenCurlyQuote]PowerExpand\[CloseCurlyQuote], we don\
\[CloseCurlyQuote]t need assumptions like we did with \
\[OpenCurlyQuote]Simplify\[CloseCurlyQuote]:\
\>", "Text",
 CellChangeTimes->{{3.9090231861471643`*^9, 3.9090232053961363`*^9}, {
  3.941638408521081*^9, 
  3.941638409194365*^9}},ExpressionUUID->"bb457d7c-aa68-4369-b6e2-\
4af0de194554"],

Cell[BoxData[{
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{"Sqrt", "[", 
    SuperscriptBox["x", "2"], "]"}], ",", 
   RowBox[{"Assumptions", "->", 
    RowBox[{"{", 
     RowBox[{"x", ">", "0"}], "}"}]}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"PowerExpand", "@", 
  RowBox[{"Sqrt", "[", 
   SuperscriptBox["x", "2"], "]"}]}]}], "Input",
 CellChangeTimes->{{3.909023207738537*^9, 3.9090232227984185`*^9}},
 CellLabel->
  "In[118]:=",ExpressionUUID->"e8b82fb7-9039-4538-8eb4-17f9f3e37eb5"],

Cell["\<\
We can also expand assuming that all variables/expressions are complex using \
\[OpenCurlyQuote]ComplexExpand\[CloseCurlyQuote]:\
\>", "Text",
 CellChangeTimes->{{3.9090233353353357`*^9, 3.9090233525996256`*^9}, {
  3.9090234062613792`*^9, 
  3.909023407870267*^9}},ExpressionUUID->"021e5498-7608-4760-8154-\
fdc9285b8218"],

Cell[BoxData[
 RowBox[{"ComplexExpand", "[", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"-", "1"}], ")"}], 
   RowBox[{"1", "/", "3"}]], "]"}]], "Input",
 CellChangeTimes->{{3.9090233538922496`*^9, 3.9090233976109467`*^9}},
 CellLabel->
  "In[120]:=",ExpressionUUID->"e7295f4f-0475-4f29-84ec-06177cfc5310"],

Cell["\<\
Note that to input the imaginary unit, you can either type capital \
\[OpenCurlyQuote]I\[CloseCurlyQuote] or \[OpenCurlyQuote]Esc + ii + Esc\
\[CloseCurlyQuote]:\
\>", "Text",
 CellChangeTimes->{{3.909023443433584*^9, 
  3.909023467732938*^9}},ExpressionUUID->"5897f7f8-72c9-4bc4-aa5d-\
ecd06b3a3005"],

Cell[BoxData["I"], "Input",
 CellChangeTimes->{{3.910411066528582*^9, 3.9104110678276463`*^9}, {
  3.9416911571723747`*^9, 3.941691158725876*^9}},
 CellLabel->
  "In[121]:=",ExpressionUUID->"fd3834b1-9435-4684-b427-e1e0be1fe658"],

Cell[BoxData["\[ImaginaryI]"], "Input",
 CellChangeTimes->{{3.910411069465716*^9, 3.910411070738468*^9}, {
  3.910759748515398*^9, 3.910759750455892*^9}, {3.9416911529189177`*^9, 
  3.9416911547585783`*^9}},
 CellLabel->
  "In[122]:=",ExpressionUUID->"c65b2a5b-5266-4650-a62e-a61ef25679f0"],

Cell[BoxData[{
 RowBox[{"ComplexExpand", "[", 
  RowBox[{"Sin", "[", 
   RowBox[{"x", "+", 
    RowBox[{"I", " ", "y"}]}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"ComplexExpand", "[", 
  RowBox[{"Sin", "[", 
   RowBox[{"x", "+", 
    RowBox[{"\[ImaginaryI]", " ", "y"}]}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.909023410550934*^9, 3.909023434798482*^9}, {
  3.90902347109091*^9, 3.9090234767307587`*^9}, {3.9104110484475484`*^9, 
  3.910411075708556*^9}},
 CellLabel->
  "In[123]:=",ExpressionUUID->"dd1e42a7-98a2-4679-9ff6-ce5d8435fcaf"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Factoring Polynomials", "Subsection",
 CellChangeTimes->{{3.909034590599846*^9, 
  3.9090345939647713`*^9}},ExpressionUUID->"04123cf1-1517-42cc-aa82-\
8be6b42c62bd"],

Cell["Polynomials can be factored using the \[OpenCurlyQuote]Factor\
\[CloseCurlyQuote] function:", "Text",
 CellChangeTimes->{{3.9090346028753557`*^9, 
  3.9090346121907945`*^9}},ExpressionUUID->"51b0acce-eb47-45ec-8128-\
cdb62e673b55"],

Cell[BoxData[{
 RowBox[{"Factor", "[", 
  RowBox[{
   SuperscriptBox["x", "2"], "-", 
   SuperscriptBox["y", "2"]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Factor", "[", 
  RowBox[{
   SuperscriptBox["x", "2"], "-", 
   RowBox[{"2", "x"}], "+", "1"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Factor", "[", 
  RowBox[{
   SuperscriptBox["x", "10"], "-", "1"}], "]"}]}], "Input",
 CellChangeTimes->{{3.9090346132051897`*^9, 3.909034653063635*^9}},
 CellLabel->
  "In[125]:=",ExpressionUUID->"5a70e785-aa18-47a6-8d5f-73341513e889"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Manipulating Trig Expressions", "Subsection",
 CellChangeTimes->{{3.9090293280386353`*^9, 
  3.909029333682689*^9}},ExpressionUUID->"126de646-a208-4912-9e34-\
435dcce9297b"],

Cell["\<\
Not all trig expressions can be simplified/manipulated with \
\[OpenCurlyQuote]Simplify\[CloseCurlyQuote] and \[OpenCurlyQuote]Expand\
\[CloseCurlyQuote].\
\>", "Text",
 CellChangeTimes->{{3.909034211377294*^9, 
  3.909034233504562*^9}},ExpressionUUID->"d06d458f-63d8-43e0-a95c-\
bd416ea64ead"],

Cell[BoxData[{
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], 
   RowBox[{"Cos", "[", "x", "]"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Simplify", "[", 
  SuperscriptBox[
   RowBox[{"Sin", "[", "x", "]"}], "2"], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Expand", "[", 
  RowBox[{"Cos", "[", 
   RowBox[{"3", "x"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.909034236103652*^9, 3.9090342884286633`*^9}, {
  3.909034349280944*^9, 3.9090343577526827`*^9}},
 CellLabel->
  "In[128]:=",ExpressionUUID->"29b7ee02-9cb8-4b2b-89e6-4be75cfb1670"],

Cell["For these, use \[OpenCurlyQuote]TrigReduce\[CloseCurlyQuote] and \
\[OpenCurlyQuote]TrigExpand\[CloseCurlyQuote]:", "Text",
 CellChangeTimes->{{3.9090343091742997`*^9, 
  3.9090343262596626`*^9}},ExpressionUUID->"e9b7d17d-1dfe-4eae-b75f-\
ecc8e11e075e"],

Cell[BoxData[{
 RowBox[{"TrigReduce", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], 
   RowBox[{"Cos", "[", "x", "]"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"TrigReduce", "[", 
  SuperscriptBox[
   RowBox[{"Sin", "[", "x", "]"}], "2"], "]"}], "\[IndentingNewLine]", 
 RowBox[{"TrigExpand", "[", 
  RowBox[{"Cos", "[", 
   RowBox[{"3", "x"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.9090343276209183`*^9, 3.9090343659437785`*^9}},
 CellLabel->
  "In[131]:=",ExpressionUUID->"e2facdbf-0a8f-4838-8822-4849d235ad50"],

Cell["\<\
Generically, \[OpenCurlyQuote]TrigExpand\[CloseCurlyQuote] takes functions of \
the form cos(n*x) or sin(n*x), and transforms them to forms contain \
[cos(x)]^n and [sin(x)]^n. \[OpenCurlyQuote]TrigReduce\[CloseCurlyQuote] does \
the reverse of this.\
\>", "Text",
 CellChangeTimes->{{3.909034387202052*^9, 
  3.9090344425537205`*^9}},ExpressionUUID->"7fb7eb30-7ffc-4dc5-94d4-\
eff5c606e2fa"],

Cell[BoxData[{
 RowBox[{"TrigExpand", "[", 
  RowBox[{"Sin", "[", 
   RowBox[{"4", "x"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"TrigReduce", "[", "%", "]"}]}], "Input",
 CellChangeTimes->{{3.9090344436467304`*^9, 3.909034456718537*^9}},
 CellLabel->
  "In[134]:=",ExpressionUUID->"d5fa33c8-5ee3-4d02-86a1-b3c16ec146be"],

Cell["\<\
Trig functions can also be converted to complex exponentials and vice versa, \
using \[OpenCurlyQuote]TrigToExp\[CloseCurlyQuote] and \
\[OpenCurlyQuote]ExpToTrig\[CloseCurlyQuote].\
\>", "Text",
 CellChangeTimes->{{3.9090344805465574`*^9, 
  3.90903451779733*^9}},ExpressionUUID->"1a4d9d0a-b35c-4f76-861a-\
86786de752d8"],

Cell[BoxData[{
 RowBox[{"TrigToExp", "[", 
  RowBox[{"Cos", "[", 
   RowBox[{"3", "x"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"ExpToTrig", "[", 
  RowBox[{"Exp", "[", 
   RowBox[{"\[ImaginaryI]", " ", "x"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.9090345194246197`*^9, 3.909034536747385*^9}},
 CellLabel->
  "In[136]:=",ExpressionUUID->"89d597e7-63b5-4bfb-905f-a375f41e31cb"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Collect", "Subsection",
 CellChangeTimes->{{3.910759910026227*^9, 
  3.9107599110899353`*^9}},ExpressionUUID->"26708798-b5f2-40df-b6c9-\
d0f3dabd8499"],

Cell[BoxData[
 RowBox[{"Collect", "[", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"y", "+", 
      RowBox[{
       SuperscriptBox["y", "3"], "x"}]}], ")"}], "10"], ",", "y", ",", 
   "Simplify"}], "]"}]], "Input",
 CellChangeTimes->{{3.910759939518034*^9, 3.9107600254366217`*^9}},
 CellLabel->
  "In[138]:=",ExpressionUUID->"7bc23852-43d5-4602-a5c3-143bfe720be5"],

Cell[BoxData[
 RowBox[{"cl", " ", "=", 
  RowBox[{"CoefficientList", "[", 
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"y", "+", 
       RowBox[{
        SuperscriptBox["y", "3"], "x"}]}], ")"}], "10"], ",", "y"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.941638480698626*^9, 3.941638495362504*^9}, {
  3.941691338784512*^9, 3.9416913408851643`*^9}},
 CellLabel->
  "In[139]:=",ExpressionUUID->"d51161a5-4b7e-4f23-b059-4ac06c28cff5"],

Cell["Attention! Mathematica starts counting at 1!", "Text",
 CellChangeTimes->{{3.9422060661518917`*^9, 
  3.942206117219989*^9}},ExpressionUUID->"a0ea21b8-eb3d-4132-ae46-\
771724ac50c9"],

Cell[BoxData[
 RowBox[{"cl", "[", 
  RowBox[{"[", "31", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.941691342504196*^9, 3.9416913639531097`*^9}},
 CellLabel->
  "In[140]:=",ExpressionUUID->"1681b414-8268-430a-91ef-a23cb748f171"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solving Systems of Algebraic Equations", "Section",
 CellChangeTimes->{{3.908957354593687*^9, 3.9089573594852114`*^9}, {
  3.9089574762894163`*^9, 
  3.908957484388813*^9}},ExpressionUUID->"21c794cb-959a-4760-acf6-\
995218c67552"],

Cell[CellGroupData[{

Cell["Solving Algebraic Equations", "Subsection",
 CellChangeTimes->{{3.9100678841655264`*^9, 3.9100678883530664`*^9}, {
  3.910067923242911*^9, 
  3.910067926308509*^9}},ExpressionUUID->"aeb41a66-f299-4fba-8492-\
3e726696ee46"],

Cell["\<\
The general function to solve algebraic equations is \
\[OpenCurlyDoubleQuote]Solve\[CloseCurlyDoubleQuote]. The output is always a \
list of substitution rules, ensuring that variables you use do not get \
overwritten. If more than one solution is found, you can take only one using \
[[n]] brackets.\
\>", "Text",
 CellChangeTimes->{{3.9100679101005917`*^9, 3.9100679341153655`*^9}, {
  3.9100679642653675`*^9, 3.910068030808121*^9}, {3.9416385172560253`*^9, 
  3.941638518072279*^9}},ExpressionUUID->"42e9be22-e115-4efc-8eb1-\
39d4bb018035"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "a", "]"}], "\[IndentingNewLine]", 
 RowBox[{"sol", " ", "=", " ", 
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"a", " ", 
       SuperscriptBox["x", "2"]}], "+", 
      RowBox[{"b", " ", "x"}], "+", "c"}], "==", "0"}], ",", "x"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x", "/.", 
   RowBox[{"%", "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"same", " ", "as", " ", "x"}], "/.", 
    RowBox[{"sol", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"x", "/.", 
     RowBox[{
      RowBox[{"Flatten", "@", "%%"}], "\[IndentingNewLine]", "x"}]}], "/.", 
    "%%%"}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.910067935370137*^9, 3.910067948110468*^9}, {
   3.9100680329761686`*^9, 3.9100680553300433`*^9}, {3.9104112845555496`*^9, 
   3.9104112871668224`*^9}, {3.9104113391957874`*^9, 
   3.9104113520493507`*^9}, {3.91041143807609*^9, 3.9104114389862814`*^9}, 
   3.9107602249424133`*^9, {3.9416914320591784`*^9, 3.941691433188868*^9}, {
   3.942206219979587*^9, 3.942206237317771*^9}, {3.942206270394856*^9, 
   3.9422062733260937`*^9}, {3.94220630881956*^9, 
   3.942206368395288*^9}},ExpressionUUID->"ee8439e4-2196-41bf-b8e1-\
82f4068b0ffe"],

Cell[BoxData[
 RowBox[{"x", "/.", 
  RowBox[{"sol", "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.941691435090055*^9, 3.941691451388298*^9}},
 CellLabel->
  "In[144]:=",ExpressionUUID->"c9421cc4-2bf9-40a4-bfff-9556fa156b7e"],

Cell["\<\
\[OpenCurlyDoubleQuote]Solve\[CloseCurlyDoubleQuote] also works with \
numerical coefficients, and can find complex solutions.\
\>", "Text",
 CellChangeTimes->{{3.9100680805917883`*^9, 
  3.9100681396952868`*^9}},ExpressionUUID->"83396421-b766-411c-9c47-\
7e6ee10f37a6"],

Cell[BoxData[{
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"4", " ", 
      SuperscriptBox["x", "2"]}], "+", 
     RowBox[{"2", "x"}], "+", "1"}], "==", "0"}], ",", "x"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["x", "5"], "==", "1"}], ",", "x"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"%", "//", "ComplexExpand"}]}], "Input",
 CellChangeTimes->{{3.910068112714758*^9, 3.910068125064269*^9}, {
  3.910068217591397*^9, 3.9100682457555914`*^9}},
 CellLabel->
  "In[145]:=",ExpressionUUID->"1bb25dda-9c94-4106-b0a8-c859fd4dae63"],

Cell["\[OpenCurlyDoubleQuote]Solve\[CloseCurlyDoubleQuote] can also take \
inequalities and systems of equations.", "Text",
 CellChangeTimes->{{3.910068291179914*^9, 3.9100683051491156`*^9}, {
  3.910068376509937*^9, 
  3.910068382598153*^9}},ExpressionUUID->"1a402208-9da8-4338-a539-\
dd582795ed74"],

Cell[BoxData[{
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"4", " ", 
       SuperscriptBox["x", "2"]}], "+", 
      RowBox[{"2", "x"}], "-", "1"}], "==", "0"}], " ", "&&", 
    RowBox[{"x", ">", "0"}]}], ",", "x"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"4", 
        SuperscriptBox["x", "2"]}], "+", 
       RowBox[{"2", "x"}], "-", "1"}], "==", "0"}], ",", 
     RowBox[{"x", ">", "0"}]}], "}"}], ",", "x"}], "]"}]}], "Input",
 CellChangeTimes->{{3.9100682710390534`*^9, 3.910068278893899*^9}, {
  3.91006830918316*^9, 3.910068356220837*^9}},
 CellLabel->
  "In[148]:=",ExpressionUUID->"48753b86-c3b7-45e8-9712-8b6c1f82a5a4"],

Cell["You can even specify the domain of any solutions.", "Text",
 CellChangeTimes->{{3.910068406987615*^9, 
  3.9100684143835335`*^9}},ExpressionUUID->"78be9013-6157-4290-bce5-\
cb69ff2be217"],

Cell[BoxData[{
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["x", "5"], "==", "1"}], ",", "x", ",", "Reals"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["x", "5"], "==", "1"}], ",", "x", ",", "Integers"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["x", "5"], "==", "1"}], ",", "x", ",", "Complexes"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "5"], "==", "1"}], ",", "x"}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "default", " ", "is", " ", "the", " ", "most", " ", "generic", " ", 
    "case"}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.9100684156506743`*^9, 3.910068480759011*^9}, {
  3.910411505233612*^9, 3.9104115135354853`*^9}, {3.941691528890778*^9, 
  3.941691532281506*^9}, {3.942206449219598*^9, 
  3.942206462834598*^9}},ExpressionUUID->"364c7a94-4ab9-4961-b30c-\
bef8bc39593d"],

Cell["\<\
But \[OpenCurlyDoubleQuote]Solve\[CloseCurlyDoubleQuote] is not all powerful! \
It primarily deals with linear and polynomial equations.\
\>", "Text",
 CellChangeTimes->{{3.9100685490218983`*^9, 3.9100685551878195`*^9}, {
  3.9100690019217987`*^9, 
  3.9100690130191383`*^9}},ExpressionUUID->"e9751815-5931-43e2-9a69-\
8520a9d508a9"],

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"1", "/", "10"}], "==", 
    RowBox[{"x", "-", 
     RowBox[{"Sin", "[", "x", "]"}]}]}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.910068531121873*^9, 3.9100685380505714`*^9}, {
  3.9100685701488867`*^9, 3.910068581190503*^9}},
 CellLabel->
  "In[154]:=",ExpressionUUID->"9e26d651-f1bf-4c01-bf58-9faafb265480"],

Cell["\<\
\[OpenCurlyDoubleQuote]Solve\[CloseCurlyDoubleQuote] (and Mathematica in \
general), can also be horribly obtuse!\
\>", "Text",
 CellChangeTimes->{{3.9100687854964857`*^9, 3.910068798578586*^9}, {
  3.9416385721664467`*^9, 
  3.941638573241968*^9}},ExpressionUUID->"01d53876-7705-49bf-ac19-\
7fbf763f9688"],

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["P", "2"], "==", 
    SuperscriptBox["a", "3"]}], ",", "a", ",", "Reals"}], "]"}]], "Input",
 CellChangeTimes->{{3.9100686506332493`*^9, 3.9100686619204044`*^9}, {
  3.910068730647694*^9, 3.910068768243312*^9}, {3.910068806432392*^9, 
  3.9100688084819736`*^9}},
 CellLabel->
  "In[155]:=",ExpressionUUID->"d1ab2ce3-e101-4d6c-8d61-7edffbd80ee9"],

Cell[BoxData[{
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["P", "2"], "==", 
    SuperscriptBox["a", "3"]}], ",", "a"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"%", "[", 
  RowBox[{"[", "1", "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.910760435849278*^9, 3.9107604376349697`*^9}},
 CellLabel->
  "In[156]:=",ExpressionUUID->"a16f0253-12dd-457f-a1d0-f56e514ff836"],

Cell["\<\
There is also a numerical version of \[OpenCurlyDoubleQuote]Solve\
\[CloseCurlyDoubleQuote] called \[OpenCurlyDoubleQuote]NSolve\
\[CloseCurlyDoubleQuote], for cases where you are only looking for \
approximate numerical answers. \[OpenCurlyDoubleQuote]NSolve\
\[CloseCurlyDoubleQuote] has the same limitations as \
\[OpenCurlyDoubleQuote]Solve\[CloseCurlyDoubleQuote].\
\>", "Text",
 CellChangeTimes->{{3.910069127493726*^9, 3.910069166138329*^9}, {
  3.942206587491447*^9, 
  3.9422065887166653`*^9}},ExpressionUUID->"d1cf380b-38f2-4e0f-88b2-\
0dbc00056b87"],

Cell[BoxData[{
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "10"], "-", 
     RowBox[{"8", 
      SuperscriptBox["x", "7"]}], "+", 
     RowBox[{"3", 
      SuperscriptBox["x", "4"]}], "-", "1"}], "==", "0"}], ",", "x"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"NSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "10"], "-", 
     RowBox[{"8", 
      SuperscriptBox["x", "7"]}], "+", 
     RowBox[{"3", 
      SuperscriptBox["x", "4"]}], "-", "1"}], "==", "0"}], ",", "x"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.910069168757382*^9, 3.910069241399877*^9}, {
  3.942207038471678*^9, 
  3.942207042935787*^9}},ExpressionUUID->"6369747d-858b-484d-8060-\
8ab76b01601a"],

Cell[BoxData[
 RowBox[{"NSolve", "[", 
  RowBox[{
   RowBox[{"0.1", "==", 
    RowBox[{"x", "-", 
     RowBox[{"Sin", "[", "x", "]"}]}]}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.9100692566736593`*^9, 3.91006926112224*^9}},
 CellLabel->
  "In[160]:=",ExpressionUUID->"32b7857d-55e1-461c-9b72-6b5cbd9cfb67"],

Cell["\<\
Mathematica is simply not suitable for numerical calculations/approximations, \
it is too slow, it should be used to deal with symbolic and algebraic \
manipulations. Ok if you want a quick numerical solution of an algebraic \
problem. Remember to always analytically try first, then numerically \
integrate things with \[OpenCurlyQuote]scipy\[CloseCurlyQuote].\
\>", "Text",
 CellChangeTimes->{{3.9422066325482388`*^9, 
  3.9422067900302973`*^9}},ExpressionUUID->"2f52dc93-1d3b-40ce-98fc-\
6b8dd6a19d2f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["FindRoot: A more powerful solver", "Subsection",
 CellChangeTimes->{{3.9100692774110327`*^9, 
  3.91006929381054*^9}},ExpressionUUID->"d4e1affd-4f36-4382-ba55-\
f86d92cf1bd6"],

Cell["\<\
\[OpenCurlyDoubleQuote]Solve\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]NSolve\[CloseCurlyDoubleQuote] are limited to special \
classes of algebraic equations where exact or approximate techniques works. \
But there are far more powerful numerical algorithms \
(Newton\[CloseCurlyQuote]s method, secant method, etc.) to solve equations. \
These are implemented in Mathematica using the \
\[OpenCurlyDoubleQuote]FindRoot\[CloseCurlyDoubleQuote] function. The \
downside to these methods is you have to feed \[OpenCurlyDoubleQuote]FindRoot\
\[CloseCurlyDoubleQuote] an estimate of where the answer is (this is a result \
of the numerical methods it uses).\
\>", "Text",
 CellChangeTimes->{{3.91006931899818*^9, 3.9100693954718075`*^9}, {
  3.9100694355142317`*^9, 3.910069463501307*^9}, {3.941691746260969*^9, 
  3.941691747228891*^9}},ExpressionUUID->"f3824446-c8aa-4de8-8b79-\
76559d040677"],

Cell[BoxData[
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "2"], "-", "1"}], "==", "0"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1.1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.910069465574749*^9, 3.9100694758258505`*^9}},
 CellLabel->
  "In[161]:=",ExpressionUUID->"666fbf84-e751-483c-83dd-cb70aa68f1ba"],

Cell["A detour on plotting (for finding a good guess):", "Text",
 CellChangeTimes->{{3.910069608367631*^9, 3.9100696147166195`*^9}, {
  3.910069836955202*^9, 
  3.9100698408455925`*^9}},ExpressionUUID->"a70946ab-5370-4df7-ad8f-\
8792d7efc42d"],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"x", "-", 
    RowBox[{"Sin", "[", "x", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.910069616369367*^9, 3.910069649985913*^9}, {
   3.910069688832041*^9, 3.910069716732069*^9}, 3.910069785452469*^9, {
   3.910411637759742*^9, 3.9104116492953644`*^9}},
 CellLabel->
  "In[162]:=",ExpressionUUID->"fd8bf8a9-3b0d-4b74-a47c-db41a5a58708"],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"x", "-", 
    RowBox[{"Sin", "[", "x", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"GridLines", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0.2", ",", "0.4", ",", "0.6", ",", "0.8"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.05", ",", "0.1", ",", "0.15"}], "}"}]}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.9100697915978966`*^9, 3.91006982866722*^9}, {
  3.910070062482853*^9, 3.910070064147257*^9}, {3.910760688030658*^9, 
  3.910760689048918*^9}},
 CellLabel->
  "In[163]:=",ExpressionUUID->"4aed13bc-d6e7-4325-a945-3ece2bf75f59"],

Cell[BoxData[{
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{"0.1", "==", 
    RowBox[{"x", "-", 
     RowBox[{"Sin", "[", "x", "]"}]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0.8"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"(", 
  RowBox[{
   RowBox[{"x", "-", 
    RowBox[{"Sin", "[", "x", "]"}]}], "/.", "%"}], 
  ")"}], "\[IndentingNewLine]", 
 RowBox[{"%", "-", "0.1"}]}], "Input",
 CellChangeTimes->{{3.9100698495497365`*^9, 3.910069888141514*^9}, {
  3.9104117248340178`*^9, 3.910411725738335*^9}},
 CellLabel->
  "In[164]:=",ExpressionUUID->"fe0184e7-5520-4e09-a1c0-04082dcb3e8a"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{
  3.9107607505403852`*^9},ExpressionUUID->"4b1fd688-f842-4311-84cc-\
10ec09d14b5a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Calculus", "Section",
 CellChangeTimes->{{3.908957640657612*^9, 
  3.908957642102926*^9}},ExpressionUUID->"cc913d2b-3779-4b4c-8a20-\
3338b1570e50"],

Cell[CellGroupData[{

Cell["Differentiation", "Subsection",
 CellChangeTimes->{{3.9101675864327054`*^9, 
  3.910167593281272*^9}},ExpressionUUID->"6a6c74d7-fead-48c6-bb16-\
4b841a63131c"],

Cell["\<\
As mentioned at the beginning of this notebook, \[OpenCurlyDoubleQuote]D\
\[CloseCurlyDoubleQuote] corresponds to the built-in derivative functions \
within Mathematica. Purely symbolic, not numerical.\
\>", "Text",
 CellChangeTimes->{{3.9101676122535763`*^9, 3.9101676434464293`*^9}, {
  3.94220725772149*^9, 
  3.942207274106763*^9}},ExpressionUUID->"6afc0794-115a-41bd-8812-\
15c654936322"],

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   SuperscriptBox["x", "2"], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.910167644714115*^9, 3.9101676496441193`*^9}, {
  3.910760812270439*^9, 3.910760813164936*^9}},
 CellLabel->
  "In[167]:=",ExpressionUUID->"16be811f-60d7-45be-8486-ca27bbb44ef9"],

Cell["\<\
The function takes inputs in the form D[func_, vars_], the first of which is \
the function to differentiate and the second is the variable to differentiate \
with respect to. So this allows a very easy extension to multiple variables:\
\>", "Text",
 CellChangeTimes->{{3.910167667962637*^9, 
  3.9101677234845886`*^9}},ExpressionUUID->"a4ca403a-86f3-47c1-8eeb-\
63a4f8d7cfb9"],

Cell[BoxData[GridBox[{
   {
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"x", " ", "y"}], ",", "y"}], "]"}]},
   {"\[Placeholder]"}
  }]], "Input",
 CellChangeTimes->{{3.9101677249060593`*^9, 3.9101677278174553`*^9}, 
   3.942207277702075*^9},ExpressionUUID->"ef18c180-3b48-4efc-b3fb-\
8698a4055ca8"],

Cell["\<\
What if you want to take the second derivative? You might be tempted to do:\
\>", "Text",
 CellChangeTimes->{{3.910168159715309*^9, 3.9101681710678625`*^9}, {
  3.9103366907225018`*^9, 
  3.9103366913557425`*^9}},ExpressionUUID->"762caea4-4916-48c9-9b9b-\
5c6c3584aeaa"],

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{"D", "[", 
    RowBox[{
     SuperscriptBox["x", "2"], ",", "x"}], "]"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.9101681721630497`*^9, 3.910168176551113*^9}},
 CellLabel->
  "In[168]:=",ExpressionUUID->"79860b8d-3dd8-4d03-9c3a-74bb99e45f67"],

Cell["BUT, you don\[CloseCurlyQuote]t need to do this! The following also \
works:", "Text",
 CellChangeTimes->{{3.9101681855076504`*^9, 
  3.910168202314579*^9}},ExpressionUUID->"a93f302f-2e83-445a-8899-\
d5ad5d855a06"],

Cell[BoxData[{
 RowBox[{"D", "[", 
  RowBox[{
   SuperscriptBox["x", "2"], ",", "x", ",", "x"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"D", "[", 
  RowBox[{
   SuperscriptBox["x", "2"], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "2"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{"x", " ", "y"}], ",", "x", ",", "y"}], "]"}]}], "Input",
 CellChangeTimes->{{3.9101682035198655`*^9, 3.9101682237227483`*^9}},
 CellLabel->
  "In[169]:=",ExpressionUUID->"5becedcb-8e15-45ad-bcc8-554d08e5558e"],

Cell["\<\
\[OpenCurlyDoubleQuote]D\[CloseCurlyDoubleQuote] can also be used to compute \
things like the gradient (vector) or Hessian/Jacobian (matrix):\
\>", "Text",
 CellChangeTimes->{{3.9101684360900154`*^9, 
  3.910168459338787*^9}},ExpressionUUID->"8a7eccfc-a3fe-439f-9966-\
920025e943e8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{"x", " ", "y"}], ",", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y"}], "}"}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", "Gradient", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{"x", " ", "y"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", ",", "y"}], "}"}], ",", "2"}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{"Hessian", "/", "Jacobian"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "@", "%"}]}], "Input",
 CellChangeTimes->{{3.910168323284255*^9, 3.910168419977042*^9}, {
  3.910168461740887*^9, 3.9101684715434313`*^9}},
 CellLabel->
  "In[172]:=",ExpressionUUID->"0253495f-f411-4450-93bb-3a9c6ad2d72a"],

Cell["A few more examples:", "Text",
 CellChangeTimes->{{3.9101684978396673`*^9, 
  3.910168500991028*^9}},ExpressionUUID->"e8b4b386-0585-45b6-90cf-\
93455a36b59f"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "f", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Clear", "[", "g", "]"}], "\[IndentingNewLine]", 
 RowBox[{"D", "[", 
  RowBox[{
   SuperscriptBox["x", "n"], ",", "x"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"D", "[", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"f", "[", "x", "]"}], "n"], ",", "x"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"f", "[", "x", "]"}], 
    RowBox[{"g", "[", "x", "]"}]}], ",", "x"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"f", "[", "x", "]"}], "/", 
    RowBox[{"g", "[", "x", "]"}]}], ",", "x"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"a", " ", 
     RowBox[{"f", "[", "x", "]"}]}], "+", 
    RowBox[{"b", " ", 
     RowBox[{"g", "[", "x", "]"}]}]}], ",", "x"}], "]"}]}], "Input",
 CellChangeTimes->{{3.9101685019603925`*^9, 3.9101685429946012`*^9}, {
  3.9104120545588236`*^9, 3.910412060625326*^9}},
 CellLabel->
  "In[175]:=",ExpressionUUID->"1e49fc10-b782-4f91-9c2d-97b408f97087"],

Cell["\<\
Like many other things, there is a special symbol for the derivative operator \
that can be achieved using \[OpenCurlyQuote]Esc + pd + Esc\[CloseCurlyQuote]. \
To specify the variable to differentiate with respect to, use \
\[OpenCurlyQuote]Ctrl + Underscore\[CloseCurlyQuote]:\
\>", "Text",
 CellChangeTimes->{{3.910168585419645*^9, 3.910168632766646*^9}, {
  3.9106754971559935`*^9, 
  3.9106754992986836`*^9}},ExpressionUUID->"4b79b416-4108-4dc1-a486-\
8bea7e1f0310"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[PartialD]", "x"], 
  RowBox[{"f", "[", "x", "]"}]}]], "Input",
 CellChangeTimes->{{3.9101685665005074`*^9, 3.910168571881915*^9}},
 CellLabel->
  "In[182]:=",ExpressionUUID->"72d08582-0401-4aeb-8c6a-4f54b8d3c4bf"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[PartialD]", "y"], 
  RowBox[{"f", "[", "y", "]"}]}]], "Input",
 CellChangeTimes->{{3.910760956719089*^9, 3.910760967646839*^9}},
 CellLabel->
  "In[183]:=",ExpressionUUID->"b73dcd24-c12f-4d6a-b854-90327dacd706"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Integration", "Subsection",
 CellChangeTimes->{{3.9101686519535494`*^9, 
  3.910168660536748*^9}},ExpressionUUID->"7e23e2c8-17b7-43b6-b452-\
d336e31c3c0e"],

Cell["\<\
The function for performing analytic integration in Mathematica is \
\[OpenCurlyDoubleQuote]Integrate\[CloseCurlyDoubleQuote]:\
\>", "Text",
 CellChangeTimes->{{3.9101686791338673`*^9, 
  3.9101687015728836`*^9}},ExpressionUUID->"ce48e8f2-ee77-4f58-adda-\
cf17423393c5"],

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   SuperscriptBox["x", "2"], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.91016870261304*^9, 3.9101687064002113`*^9}},
 CellLabel->
  "In[184]:=",ExpressionUUID->"a50a86a0-0c5f-4cf8-86b4-d1f527d68052"],

Cell["\<\
The above input/output shows an example of indefinite integration. \
\[OpenCurlyDoubleQuote]Integrate\[CloseCurlyDoubleQuote] has similar input \
structure to \[OpenCurlyDoubleQuote]D\[CloseCurlyDoubleQuote]:
D[func_, {vars_, n}]
Integrate[func_, {vars_, a, b}]
There are two differences though. The first is when specifying repeated \
integration. The following doesn\[CloseCurlyQuote]t work\
\>", "Text",
 CellChangeTimes->{{3.9101687204635515`*^9, 
  3.9101688402013245`*^9}},ExpressionUUID->"67702321-77df-4e90-99fb-\
45b17ce3df73"],

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   SuperscriptBox["x", "2"], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.910168796226053*^9, 3.910168804426577*^9}, {
  3.9107610163370543`*^9, 3.910761017144618*^9}},
 CellLabel->
  "In[185]:=",ExpressionUUID->"a124691f-461b-4c69-8fdb-fd92f9129cea"],

Cell["... but the following does!", "Text",
 CellChangeTimes->{{3.9101688447392874`*^9, 3.910168854424141*^9}, {
  3.941638717228231*^9, 
  3.941638718804551*^9}},ExpressionUUID->"39bef499-726f-4304-a8f8-\
61638b0b2b7c"],

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   SuperscriptBox["x", "2"], ",", "x", ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.910168855596507*^9, 3.9101688583449636`*^9}},
 CellLabel->
  "In[186]:=",ExpressionUUID->"7d03e919-8dca-405b-b45a-37d1595a45b6"],

Cell["\<\
The reason is due to the second difference, which is that integrals can also \
be definite, and you can specify the limits of integration in the following \
way:\
\>", "Text",
 CellChangeTimes->{{3.9101688740029764`*^9, 3.910168890688387*^9}, {
  3.9101689296629286`*^9, 
  3.9101689363648214`*^9}},ExpressionUUID->"a21f867a-cc90-449c-99b0-\
290e9578850c"],

Cell[BoxData[{
 RowBox[{"Integrate", "[", 
  RowBox[{
   SuperscriptBox["x", "2"], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"Exp", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", "1"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.9101689372928143`*^9, 3.910168978210909*^9}},
 CellLabel->
  "In[187]:=",ExpressionUUID->"0a1ae481-00fc-4a89-a2c4-116a6ee7e36e"],

Cell["\<\
You can also perform integration with respect to multiple variables with a \
single command. For example, here is an example of the orthogonality of \
spherical harmonics:\
\>", "Text",
 CellChangeTimes->{{3.910168993757821*^9, 3.9101690431498528`*^9}, {
  3.9101691212160163`*^9, 
  3.9101691244769373`*^9}},ExpressionUUID->"96f98ca5-494f-4436-ad5e-\
ac9599246df2"],

Cell[BoxData[{
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"SphericalHarmonicY", "[", 
     RowBox[{"2", ",", "2", ",", "\[Theta]", ",", "\[Phi]"}], "]"}], 
    RowBox[{"SphericalHarmonicY", "[", 
     RowBox[{"2", ",", 
      RowBox[{"-", "2"}], ",", "\[Theta]", ",", "\[Phi]"}], "]"}], 
    RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", ",", "0", ",", "\[Pi]"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Phi]", ",", "0", ",", 
     RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"SphericalHarmonicY", "[", 
     RowBox[{"2", ",", "2", ",", "\[Theta]", ",", "\[Phi]"}], "]"}], 
    RowBox[{"SphericalHarmonicY", "[", 
     RowBox[{"2", ",", 
      RowBox[{"-", "1"}], ",", "\[Theta]", ",", "\[Phi]"}], "]"}], 
    RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", ",", "0", ",", "\[Pi]"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Phi]", ",", "0", ",", 
     RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.910169044288416*^9, 3.9101691152563653`*^9}},
 CellLabel->
  "In[189]:=",ExpressionUUID->"d0b39b3d-baff-4bbf-86b2-7960af5ac80e"],

Cell[TextData[{
 "\[OpenCurlyDoubleQuote]Integrate\[CloseCurlyDoubleQuote] is powerful and \
knows the results of many integral tables, for example\n",
 Cell[BoxData[
  RowBox[{
   SuperscriptBox[
    SubscriptBox["\[Integral]", "1"], "\[Infinity]"], 
   RowBox[{"dn", " ", 
    SuperscriptBox["n", 
     RowBox[{"-", "2"}]], 
    SubscriptBox["K", 
     RowBox[{"2", "/", "3"}]], 
    RowBox[{"(", 
     RowBox[{"n", " ", "z"}], ")"}], 
    SubscriptBox["K", 
     RowBox[{"1", "/", "3"}]], 
    RowBox[{"(", 
     RowBox[{"n", " ", "z"}], ")"}]}]}]],ExpressionUUID->
  "c7317fae-3eaa-4ab3-8d1e-c09617de3c8b"]
}], "Text",
 CellChangeTimes->{{3.910169182339116*^9, 3.910169195418559*^9}, {
  3.910169400478006*^9, 3.9101694457158546`*^9}, {3.910169495452714*^9, 
  3.910169498604373*^9}},ExpressionUUID->"42492019-f47a-4988-89d9-\
33864427be35"],

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["n", 
     RowBox[{"-", "2"}]], " ", 
    RowBox[{"BesselK", "[", 
     RowBox[{
      RowBox[{"2", "/", "3"}], ",", 
      RowBox[{"n", " ", "z"}]}], "]"}], " ", 
    RowBox[{"BesselK", "[", 
     RowBox[{
      RowBox[{"1", "/", "3"}], ",", 
      RowBox[{"n", " ", "z"}]}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "\[Infinity]"}], "}"}], ",", 
   RowBox[{"Assumptions", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"z", ">", "0"}], "&&", 
      RowBox[{"z", "<", "1"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9101691969156427`*^9, 3.910169255005838*^9}, {
  3.910169315099299*^9, 3.9101693883643*^9}},
 CellLabel->
  "In[191]:=",ExpressionUUID->"2bdcd151-6134-42c9-9e3a-6468b11934bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Series Expansions", "Subsection",
 CellChangeTimes->{{3.9101695224632893`*^9, 
  3.9101695244735184`*^9}},ExpressionUUID->"e6d33fcf-9099-40e0-a413-\
61940c11f04d"],

Cell["\<\
Suppose you have a function and want to study it\[CloseCurlyQuote]s local \
behavior around a point (i.e. you need to compute it\[CloseCurlyQuote]s \
Taylor expansion/series). Mathematica has a function for this called \
\[OpenCurlyDoubleQuote]Series\[CloseCurlyDoubleQuote]:\
\>", "Text",
 CellChangeTimes->{{3.9101695662903123`*^9, 
  3.910169613728095*^9}},ExpressionUUID->"a81298bd-44ab-4b00-b025-\
daa716d0678a"],

Cell[BoxData[
 RowBox[{"Series", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9101696148159122`*^9, 3.9101696190780573`*^9}},
 CellLabel->
  "In[192]:=",ExpressionUUID->"4e6b9b9a-0f12-4c0c-a746-cf95f4bbbea7"],

Cell["\<\
The first input is always the function you desire to series expand, while the \
second is an array {} with structure {var, pt, order}. \[OpenCurlyQuote]var\
\[CloseCurlyQuote] is the variable to series expand in, \[OpenCurlyQuote]pt\
\[CloseCurlyQuote] is the value of the variable to expands around, and \
\[OpenCurlyQuote]order\[CloseCurlyQuote] is the order of the expansion \
(highest power of \[OpenCurlyQuote]var\[CloseCurlyQuote] in the series).\
\>", "Text",
 CellChangeTimes->{{3.910169635638073*^9, 
  3.9101697032009106`*^9}},ExpressionUUID->"9de40430-5091-4b6e-b071-\
2fa8f00ea5d9"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "f", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Series", "[", 
  RowBox[{
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "x0", ",", "2"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.9101697043479156`*^9, 3.910169716335267*^9}, {
  3.910169860144985*^9, 3.9101698634438114`*^9}, {3.9103370596005135`*^9, 
  3.9103370616033587`*^9}},
 CellLabel->
  "In[193]:=",ExpressionUUID->"e8893b5f-ca53-443b-a0fd-1ef3f84a7113"],

Cell[TextData[{
 "The output always has the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"O", "[", 
    SuperscriptBox["x", "n"], "]"}], TraditionalForm]],ExpressionUUID->
  "f011ce05-814d-46a7-b8c9-9647b44a315a"],
 " symbol at the end of it, which indicates the remainder of the series \
expansion. From a formal theory perspective, this is fine, but you may notice \
Mathematica will not want to simplify/manipulate an expressions with this \
symbol. To get rid of it, apply the \[OpenCurlyDoubleQuote]Normal\
\[CloseCurlyDoubleQuote] function."
}], "Text",
 CellChangeTimes->{{3.9101697682395935`*^9, 
  3.9101698473355374`*^9}},ExpressionUUID->"4615679c-fbec-4246-b3de-\
3d51e23694c0"],

Cell[BoxData[{
 RowBox[{"Normal", "@", 
  RowBox[{"Series", "[", 
   RowBox[{
    RowBox[{"f", "[", "x", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "x0", ",", "2"}], "}"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Normal", "[", 
  RowBox[{"Series", "[", 
   RowBox[{
    RowBox[{"f", "[", "x", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "x0", ",", "2"}], "}"}]}], "]"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Series", "[", 
   RowBox[{
    RowBox[{"f", "[", "x", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "x0", ",", "2"}], "}"}]}], "]"}], "//", 
  "Normal"}]}], "Input",
 CellChangeTimes->{{3.9101698492325687`*^9, 3.910169886190234*^9}},
 CellLabel->
  "In[195]:=",ExpressionUUID->"25fe6c36-655d-4334-9ba6-411a8ede8f30"],

Cell["\[OpenCurlyDoubleQuote]Series\[CloseCurlyDoubleQuote] can be useful for \
taking limits:", "Text",
 CellChangeTimes->{{3.910169943901641*^9, 
  3.91016995119853*^9}},ExpressionUUID->"ee65af1f-4012-45a2-9577-\
47e76bb39c28"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], "/", "x"}], "/.", 
  RowBox[{"{", 
   RowBox[{"x", "->", "0"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.910169952823374*^9, 3.9101699678063974`*^9}, {
  3.910170554808398*^9, 3.9101705551552796`*^9}},
 CellLabel->
  "In[198]:=",ExpressionUUID->"768aa403-65cc-49e0-bcdf-cc02af1843a4"],

Cell[BoxData[{
 RowBox[{"Series", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], "/", "x"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "3"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Normal", "@", "%"}], "\[IndentingNewLine]", 
 RowBox[{"%", "/.", 
  RowBox[{"{", 
   RowBox[{"x", "->", "0"}], "}"}]}]}], "Input",
 CellChangeTimes->{{3.910169973331585*^9, 3.9101699949872913`*^9}},
 CellLabel->
  "In[199]:=",ExpressionUUID->"1a3f4205-57fc-4927-b3cb-6236b30cca68"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{
  3.91076128698328*^9},ExpressionUUID->"0726bb33-393c-4967-afeb-f40ab273ed05"],

Cell["Note, that \[OpenCurlyDoubleQuote]Series\[CloseCurlyDoubleQuote] can \
also compute asymptotic series:", "Text",
 CellChangeTimes->{{3.9101702783441925`*^9, 
  3.9101702924091053`*^9}},ExpressionUUID->"b5b4254d-a4dd-48f6-90d4-\
de3aecf84529"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Series", "[", 
   RowBox[{
    RowBox[{"1", "/", 
     RowBox[{"Sqrt", "[", 
      RowBox[{"1", "+", 
       SuperscriptBox["x", "2"]}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "\[Infinity]", ",", "3"}], "}"}]}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "it", " ", "just", " ", "does", " ", "a", " ", "change", " ", "of", " ", 
    "variables", " ", "without", " ", "the", " ", "need", " ", "of", " ", 
    "telling", " ", "it", " ", "to", " ", "do", " ", "it"}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.91017029414445*^9, 3.910170303281002*^9}, {
  3.942207614109729*^9, 
  3.942207635357932*^9}},ExpressionUUID->"1598bc16-f738-4f79-9bd2-\
ee88d407264c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Numerical Integration", "Subsection",
 CellChangeTimes->{{3.9101707417965755`*^9, 
  3.9101707443842697`*^9}},ExpressionUUID->"9c32d2dd-d3d2-4afa-90af-\
3568924dac8e"],

Cell["\<\
We covered \[OpenCurlyDoubleQuote]Integrate\[CloseCurlyDoubleQuote] already, \
but sometimes you may encounter complicated integrals that don\
\[CloseCurlyQuote]t have analytic solutions.\
\>", "Text",
 CellChangeTimes->{{3.9101708832790737`*^9, 3.9101709059199295`*^9}, {
  3.9103372860685225`*^9, 
  3.9103372875945525`*^9}},ExpressionUUID->"344f4fc6-a836-40eb-8bbb-\
31f620d2e886"],

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    FractionBox["1", "x"], 
    RowBox[{"Cos", "[", 
     RowBox[{
      RowBox[{"Log", "[", "x", "]"}], "/", "x"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.91017084596824*^9, 3.910170865448326*^9}, {
  3.941638826691153*^9, 3.9416388272801733`*^9}},
 CellLabel->
  "In[203]:=",ExpressionUUID->"44a9d442-be7c-4862-b176-e672c242a79b"],

Cell["\<\
For these, you can use numerical integration via \
\[OpenCurlyDoubleQuote]NIntegrate\[CloseCurlyDoubleQuote]:\
\>", "Text",
 CellChangeTimes->{{3.9101709207486935`*^9, 
  3.9101709382389803`*^9}},ExpressionUUID->"5ec5af6c-9997-46ba-8333-\
1dea0e3b4840"],

Cell[BoxData[
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   RowBox[{
    FractionBox["1", "x"], 
    RowBox[{"Cos", "[", 
     RowBox[{
      RowBox[{"Log", "[", "x", "]"}], "/", "x"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9101709394698367`*^9, 3.9101709501530533`*^9}},
 CellLabel->
  "In[204]:=",ExpressionUUID->"66d7b073-315c-4b85-9444-0c0210e25933"],

Cell["\<\
\[OpenCurlyDoubleQuote]NIntegrate\[CloseCurlyDoubleQuote] has much of the \
same functionality of \
\[OpenCurlyDoubleQuote]Integrate\[CloseCurlyDoubleQuote], it just gives you \
numerical answers instead of analytic ones (so you can\[CloseCurlyQuote]t use \
it for indefinite integrals, sorry). Here\[CloseCurlyQuote]s a really \
pedantic integral that has an exact answer we can compare to the numerical \
one:\
\>", "Text",
 CellChangeTimes->{{3.910170997152754*^9, 3.9101710485561194`*^9}, {
  3.9101711714765263`*^9, 
  3.910171187540575*^9}},ExpressionUUID->"74318e86-3418-4e1b-951d-\
e5c64824d512"],

Cell[BoxData[{
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"Sqrt", "[", 
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      SuperscriptBox["y", "2"]}], "]"}]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "0", ",", "2"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"exact", "=", 
  RowBox[{"Integrate", "[", 
   RowBox[{
    FractionBox["1", 
     RowBox[{"Sqrt", "[", 
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       SuperscriptBox["y", "2"]}], "]"}]], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"y", ",", "0", ",", "2"}], "}"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"%%", "-", "%"}], "//", "N", " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "N", " ", "needed", " ", "to", " ", "evaluate", " ", "the", " ", 
     "difference", " ", "numerically"}], ",", " ", 
    RowBox[{
     RowBox[{"otherwise", " ", "'"}], 
     RowBox[{"%%", "'"}], " ", "is", " ", "numerical"}], ",", " ", 
    RowBox[{"'", 
     RowBox[{"%", "'"}], " ", "is", " ", "algebraic", " ", "and", " ", "it", 
     " ", 
     RowBox[{"doesn", "'"}], "t", " ", "work"}]}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.910171027941533*^9, 3.910171097655054*^9}, {
  3.9101711376057253`*^9, 3.91017113965481*^9}, {3.942207704856228*^9, 
  3.94220775521589*^9}},ExpressionUUID->"ed2792ad-a203-4622-a3f2-\
b8846fb9b4ce"],

Cell["\<\
Pretty accurate, but we can do better by specify accuracy and precision \
tolerances. These are specified with the \[OpenCurlyDoubleQuote]AccuracyGoal\
\[CloseCurlyDoubleQuote] and \[OpenCurlyDoubleQuote]PrecisionGoal\
\[CloseCurlyDoubleQuote], which have the following syntax:\
\>", "Text",
 CellChangeTimes->{{3.910171218212279*^9, 
  3.910171285689647*^9}},ExpressionUUID->"1d953b62-ac90-4fc1-a1b4-\
8805f8f17ddc"],

Cell[BoxData[{
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"Sqrt", "[", 
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      SuperscriptBox["y", "2"]}], "]"}]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "0", ",", "2"}], "}"}], ",", 
   RowBox[{"AccuracyGoal", "->", "13"}], ",", 
   RowBox[{"PrecisionGoal", "->", "13"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"exact", "-", "%"}], "//", "N"}]}], "Input",
 CellChangeTimes->{{3.910171115628168*^9, 3.91017114646163*^9}, {
  3.910171337811384*^9, 3.9101713646891685`*^9}},
 CellLabel->
  "In[208]:=",ExpressionUUID->"16e9a2ca-54f5-481f-89ce-3ded68108245"],

Cell[TextData[{
 "After each \[OpenCurlyQuote]->\[CloseCurlyQuote] is a number which \
corresponds to desired accuracy/precision tolerance of order ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["10", 
    RowBox[{"-", "number"}]], TraditionalForm]],ExpressionUUID->
  "2c8b149b-32fa-4496-af28-06b944fc1b96"],
 ". This can obviously be seen from the error computed above. The default for \
both of these is half \[OpenCurlyDoubleQuote]WorkingPrecision\
\[CloseCurlyDoubleQuote] (double precision for most applications), so the \
default is 7."
}], "Text",
 CellChangeTimes->{{3.910171287791545*^9, 3.910171327985811*^9}, {
  3.9101713712060375`*^9, 3.9101714585602393`*^9}, {3.910171515634828*^9, 
  3.9101715158950834`*^9}},ExpressionUUID->"7be2b858-061e-448d-8cb7-\
82cad2cf2276"],

Cell["\<\
By default, Mathematica attempts to select the best numerical method to \
perform the integral out of all possible methods implemented (called the \
\[OpenCurlyDoubleQuote]Automatic\[CloseCurlyDoubleQuote] method). But, we can \
explicitly specify this with the \[OpenCurlyDoubleQuote]Method\
\[CloseCurlyDoubleQuote] option. For example, here\[CloseCurlyQuote]s the \
same integral above, but now using Monte Carlo integration:\
\>", "Text",
 CellChangeTimes->{{3.9101715398501368`*^9, 3.9101716237957983`*^9}, {
  3.9103374298237844`*^9, 
  3.9103374368874874`*^9}},ExpressionUUID->"bd5a59fe-546d-4055-b2d8-\
42ce1242bc2c"],

Cell[BoxData[
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"Sqrt", "[", 
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      SuperscriptBox["y", "2"]}], "]"}]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "0", ",", "2"}], "}"}], ",", 
   RowBox[{"Method", "->", "\"\<MonteCarlo\>\""}], ",", 
   RowBox[{"AccuracyGoal", "->", "13"}], ",", 
   RowBox[{"PrecisionGoal", "->", "13"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.910171521926564*^9, 3.9101715260192814`*^9}},
 CellLabel->
  "In[210]:=",ExpressionUUID->"986d74a8-cf8f-48d7-b4de-086f25e2ccc8"],

Cell["\<\
Mathematica complains because the default options of its Monte Carlo routine \
are not sufficient to obtain the desired accuracy and precision tolerances. \
We can fix this by specifying options within the Monte Carlo method:\
\>", "Text",
 CellChangeTimes->{{3.9101716454059362`*^9, 3.9101716866243777`*^9}, {
  3.941692348524671*^9, 
  3.941692349435623*^9}},ExpressionUUID->"1ba3b78e-45a8-4686-ab58-\
5365fc94175e"],

Cell[BoxData[
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"Sqrt", "[", 
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      SuperscriptBox["y", "2"]}], "]"}]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "0", ",", "2"}], "}"}], ",", 
   RowBox[{"Method", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<MonteCarlo\>\"", ",", 
      RowBox[{"MaxPoints", "->", 
       SuperscriptBox["10", "6"]}]}], "}"}]}], ",", 
   RowBox[{"AccuracyGoal", "->", "13"}], ",", 
   RowBox[{"PrecisionGoal", "->", "13"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.910171690781249*^9, 3.9101717504078026`*^9}, {
  3.9101717875479164`*^9, 3.910171787676298*^9}},
 CellLabel->
  "In[211]:=",ExpressionUUID->"f8c6656e-d5e5-4a91-9142-0fe6446f0542"],

Cell["\<\
Obviously, this helps beat down the error in the Monte Carlo estimate, but is \
still not enough to reach the accuracy/precision tolerances. This is a result \
of the chosen method not being an optimal choice. Generally, when performing \
numerical integration (or numerically solving differential equations like we\
\[CloseCurlyQuote]ll see later), it\[CloseCurlyQuote]s best to let \
Mathematica choose the method for you, unless of course you know what you are \
doing.

The Monte Carlo method is also quite a bit slower than the method selected \
automatically by Mathematica. As a general rule, Mathematica is the slowest \
program you can pick for doing anything numerical. It\[CloseCurlyQuote]s much \
better to use numerical methods in something like Python. Mathematica\
\[CloseCurlyQuote]s numerical routines are just as powerful as those in other \
languages, it\[CloseCurlyQuote]s just painfully slow most of the time. The \
upside is that you can seamlessly transition from analytic calculations to \
numerical ones within Mathematica. No need to explicitly recode things! \
(Assuming you can deal with the slow speed). \
\>", "Text",
 CellChangeTimes->{{3.91017181456132*^9, 3.910172138048484*^9}, {
  3.9103375016091948`*^9, 3.91033750492397*^9}, {3.941638908112083*^9, 
  3.941638911484858*^9}},ExpressionUUID->"30429b8f-9c32-4081-88e5-\
aeb2af0fb719"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Differential Equations", "Section",
 CellChangeTimes->{{3.908957678151397*^9, 
  3.9089576816185184`*^9}},ExpressionUUID->"cacac330-59cc-4d52-ad1a-\
0155efb8e1a0"],

Cell[CellGroupData[{

Cell["DSolve", "Subsection",
 CellChangeTimes->{{3.9102373163029947`*^9, 
  3.9102373171048546`*^9}},ExpressionUUID->"2df3f4d9-c01e-4e5c-add2-\
5a096d797763"],

Cell[TextData[{
 "Suppose you have the following differential equations: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SuperscriptBox[
       SubscriptBox["\[PartialD]", "x"], "2"], 
      RowBox[{"y", "(", "x", ")"}]}], " ", "+", " ", 
     RowBox[{
      SuperscriptBox["w", "2"], 
      RowBox[{"y", "(", "x", ")"}]}]}], " ", "=", " ", "0."}], 
   TraditionalForm]],ExpressionUUID->"b482df67-48cb-4d6f-8c99-e96ad352d80c"],
 " You can obtain the solution using the \[OpenCurlyDoubleQuote]DSolve\
\[CloseCurlyDoubleQuote] function:"
}], "Text",
 CellChangeTimes->{{3.9102355320496635`*^9, 
  3.9102356042114587`*^9}},ExpressionUUID->"a19324e2-6db9-4bd9-b4a7-\
f6e89f2f3b9b"],

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"y", "''"}], "[", "x", "]"}], "+", 
      RowBox[{
       SuperscriptBox["w", "2"], 
       RowBox[{"y", "[", "x", "]"}]}]}], "==", "0"}], "}"}], ",", 
   RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.910235605454782*^9, 3.910235616911723*^9}},
 CellLabel->
  "In[212]:=",ExpressionUUID->"17540d7c-2801-4984-ac59-2f281d6b4b97"],

Cell["\<\
The output for \[OpenCurlyDoubleQuote]DSolve\[CloseCurlyDoubleQuote] is \
always in the form of a substitution rule. \[OpenCurlyDoubleQuote]DSolve\
\[CloseCurlyDoubleQuote] will also always give you the most general solution, \
with constants of integration unspecified. These can be fixed by specifying \
initial/boundary conditions:\
\>", "Text",
 CellChangeTimes->{{3.910235733579487*^9, 3.9102358328499565`*^9}, {
  3.941638951249895*^9, 
  3.941638952032091*^9}},ExpressionUUID->"87126868-cc82-4fa0-b833-\
e38cd984239e"],

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"y", "''"}], "[", "x", "]"}], "+", 
       RowBox[{
        SuperscriptBox["w", "2"], 
        RowBox[{"y", "[", "x", "]"}]}]}], "==", "0"}], ",", 
     RowBox[{
      RowBox[{"y", "[", "0", "]"}], "==", "1"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"y", "'"}], "[", "0", "]"}], "==", "0"}]}], "}"}], ",", 
   RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.910235833819053*^9, 3.910235847329011*^9}},
 CellLabel->
  "In[213]:=",ExpressionUUID->"f568583d-a5ec-4e9a-8b65-ffc011957e9d"],

Cell["\<\
The syntax for \[OpenCurlyDoubleQuote]DSolve\[CloseCurlyDoubleQuote]: \
DSolve[{eqn1, eqn2, ..., cond1, cond2, ...}, {funcs}, {vars}]\
\>", "Text",
 CellChangeTimes->{{3.910237081722718*^9, 
  3.910237107302091*^9}},ExpressionUUID->"286cb3e0-86be-46be-8cd4-\
13b586544b5c"],

Cell["A few more examples:", "Text",
 CellChangeTimes->{{3.9102360753329372`*^9, 
  3.9102360784123883`*^9}},ExpressionUUID->"b1e97a05-9329-4a61-b0f3-\
e81a006ecf06"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"1", "st", " ", "Order", " ", "ODE"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"DSolve", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"y", "'"}], "[", "x", "]"}], "-", 
        RowBox[{"y", "[", "x", "]"}]}], "==", "0"}], ",", 
      RowBox[{
       RowBox[{"y", "[", "2", "]"}], "==", "1"}]}], "}"}], ",", 
    RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9102360798711395`*^9, 3.9102360942728786`*^9}, {
  3.9102369098605223`*^9, 3.9102369186707067`*^9}},
 CellLabel->
  "In[214]:=",ExpressionUUID->"e8c7cd00-1651-4e17-a4b5-2fa115eba512"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Bessel", "'"}], "s", " ", "equation"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"DSolve", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"y", "''"}], "[", "x", "]"}], "+", 
       RowBox[{
        FractionBox["1", "x"], " ", 
        RowBox[{
         RowBox[{"y", "'"}], "[", "x", "]"}]}], "+", 
       RowBox[{
        FractionBox[
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["x", "2"], "-", 
           SuperscriptBox["n", "2"]}], ")"}], 
         SuperscriptBox["x", "2"]], 
        RowBox[{"y", "[", "x", "]"}]}]}], "==", "0"}], "}"}], ",", 
    RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9102361007122154`*^9, 3.9102362019979467`*^9}, {
  3.9102362438373847`*^9, 3.910236328553899*^9}, {3.9102369208214636`*^9, 
  3.9102369291851645`*^9}},
 CellLabel->
  "In[215]:=",ExpressionUUID->"468968f6-2031-4af9-bada-af89c70e68ac"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"2", "D", " ", "wave", " ", "equation"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"DSolve", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         FractionBox["1", 
          SuperscriptBox["c", "2"]]}], 
        RowBox[{"D", "[", 
         RowBox[{
          RowBox[{"z", "[", 
           RowBox[{"t", ",", "x"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"t", ",", "2"}], "}"}]}], "]"}]}], "+", 
       RowBox[{"D", "[", 
        RowBox[{
         RowBox[{"z", "[", 
          RowBox[{"t", ",", "x"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", "2"}], "}"}]}], "]"}]}], "==", "0"}], "}"}], ",", 
    RowBox[{"z", "[", 
     RowBox[{"t", ",", "x"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "x"}], "}"}], ",", 
    RowBox[{"Assumptions", "->", 
     RowBox[{"{", 
      RowBox[{"c", ">", "0"}], "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.910236383986694*^9, 3.910236487635944*^9}, {
  3.910236931446558*^9, 3.910236937880701*^9}, {3.910237032515602*^9, 
  3.910237044990132*^9}},
 CellLabel->
  "In[216]:=",ExpressionUUID->"2c3f9ef2-6a8a-4922-b912-2d06d0c65128"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Sturm", "-", 
    RowBox[{"Liouville", " ", "problem"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"DSolve", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"y", "''"}], "[", "x", "]"}], "+", 
        RowBox[{
         SuperscriptBox["w", "2"], 
         RowBox[{"y", "[", "x", "]"}]}]}], "==", "0"}], ",", 
      RowBox[{
       RowBox[{"y", "[", "0", "]"}], "==", "0"}], ",", 
      RowBox[{
       RowBox[{"y", "[", "\[Pi]", "]"}], "==", "0"}]}], "}"}], ",", 
    RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.91023687023919*^9, 3.9102368997779036`*^9}, {
  3.9102369398572254`*^9, 3.910236948160433*^9}, {3.91023698327236*^9, 
  3.9102369879728847`*^9}},
 CellLabel->
  "In[217]:=",ExpressionUUID->"b483e101-11a5-492c-ad78-d8b2f572be94"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Coupled", " ", "DEs"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"DSolve", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"y", "'"}], "[", "t", "]"}], "+", 
        RowBox[{
         RowBox[{"x", "[", "t", "]"}], " ", 
         RowBox[{"y", "[", "t", "]"}]}]}], "==", "0"}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"x", "'"}], "[", "t", "]"}], "-", 
        RowBox[{
         RowBox[{"y", "[", "t", "]"}], 
         RowBox[{"x", "[", "t", "]"}]}]}], "==", "0"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x", "[", "t", "]"}], ",", 
      RowBox[{"y", "[", "t", "]"}]}], "}"}], ",", "t"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.910237123812004*^9, 3.9102372067726483`*^9}},
 CellLabel->
  "In[218]:=",ExpressionUUID->"9e90e32e-8293-47dc-8ebd-b64a2edc470f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["NDSolve", "Subsection",
 CellChangeTimes->{{3.9102374754674134`*^9, 
  3.910237476451706*^9}},ExpressionUUID->"80e3be45-64e0-4219-ad24-\
62e546bc305a"],

Cell[BoxData[
 RowBox[{"Clear", "[", "a", "]"}]], "Input",
 CellChangeTimes->{{3.9103378526425147`*^9, 3.9103378541224813`*^9}},
 CellLabel->
  "In[219]:=",ExpressionUUID->"be84d239-383a-436e-a5f5-ce8e7c00978f"],

Cell[TextData[{
 "Consider the Duffing oscillator: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SuperscriptBox[
       SubscriptBox["\[PartialD]", "t"], "2"], "y"}], "+", 
     RowBox[{"2", "a", " ", 
      RowBox[{
       SubscriptBox["\[PartialD]", "t"], "y"}]}], "+", "y", "+", 
     RowBox[{"\[Epsilon]", " ", 
      SuperscriptBox["y", "3"]}]}], "=", 
    RowBox[{"cos", "(", 
     RowBox[{"w", " ", "t"}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "580aa81a-6461-4d44-8e6b-5e29fc877b27"],
 ". This is a common non-linear oscillator equation and does not have an \
exact (closed-form), analytic solution:"
}], "Text",
 CellChangeTimes->{{3.9102374892216125`*^9, 3.9102375915424366`*^9}, {
  3.9102376610145016`*^9, 3.91023766544837*^9}, {3.9103378361108804`*^9, 
  3.9103378392763376`*^9}},ExpressionUUID->"09ef56cc-20c0-4d72-8f4f-\
f92eb8a8dc33"],

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"y", "''"}], "[", "t", "]"}], "+", 
      RowBox[{"2", "a", " ", 
       RowBox[{
        RowBox[{"y", "'"}], "[", "t", "]"}]}], "+", 
      RowBox[{"y", "[", "t", "]"}], "+", 
      RowBox[{"\[Epsilon]", " ", 
       SuperscriptBox[
        RowBox[{"y", "[", "t", "]"}], "3"]}]}], "==", 
     RowBox[{"Cos", "[", 
      RowBox[{"w", " ", "t"}], "]"}]}], "}"}], ",", 
   RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.9102375925516233`*^9, 3.9102376503639565`*^9}},
 CellLabel->
  "In[220]:=",ExpressionUUID->"af4a74b0-81c1-471f-8634-537898e3e6ef"],

Cell["\<\
But, it can be solved numerically. The numerical differential equation solver \
in Mathematica is called \[OpenCurlyDoubleQuote]NDSolve\
\[CloseCurlyDoubleQuote]. It has similar syntax to \
\[OpenCurlyDoubleQuote]DSolve\[CloseCurlyDoubleQuote], with a few exceptions. \
First, you always have to specify initial/boundary conditions for the problem \
you want to solve numerically. Second, you have to give it a domain to \
integrate over instead of just the dependent variable. This is specified by \
{var, min, max} after the function you want to solve for in the syntax. Also, \
much like \[OpenCurlyDoubleQuote]NIntegrate\[CloseCurlyDoubleQuote], you \
should specify accuracy and precision goals, and any other options you care \
for (if you know what you\[CloseCurlyQuote]re doing).\
\>", "Text",
 CellChangeTimes->{{3.9102380350961485`*^9, 3.910238110232358*^9}, {
   3.910238187776399*^9, 3.9102382479710984`*^9}, 
   3.9103378660059395`*^9},ExpressionUUID->"69cda457-47fc-442c-a7e3-\
6b266c9eae67"],

Cell[BoxData[
 RowBox[{"sol", "=", 
  RowBox[{"NDSolve", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"y", "''"}], "[", "t", "]"}], "-", 
        RowBox[{"0.025", 
         RowBox[{
          RowBox[{"y", "'"}], "[", "t", "]"}]}], "+", 
        RowBox[{"y", "[", "t", "]"}], "+", 
        RowBox[{"0.1", 
         SuperscriptBox[
          RowBox[{"y", "[", "t", "]"}], "3"]}]}], "==", 
       RowBox[{"Cos", "[", 
        RowBox[{"2.1", "t"}], "]"}]}], ",", 
      RowBox[{
       RowBox[{"y", "[", "0", "]"}], "==", "1"}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"y", "'"}], "[", "0", "]"}], "==", "0"}]}], "}"}], ",", "y", 
    ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", "60"}], "}"}], ",", 
    RowBox[{"Method", "->", "\"\<ImplicitRungeKutta\>\""}], ",", 
    RowBox[{"AccuracyGoal", "->", "13"}], ",", 
    RowBox[{"PrecisionGoal", "->", "13"}], ",", 
    RowBox[{"MaxSteps", "->", "Infinity"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.910237782107093*^9, 3.910237867608602*^9}, {
  3.9102379104471636`*^9, 3.910238017703882*^9}, {3.9102382508696256`*^9, 
  3.910238252341827*^9}},
 CellLabel->
  "In[221]:=",ExpressionUUID->"338847a7-559a-4db0-9992-5bc14c8c9047"],

Cell["\<\
Notice that the solution is given as an interpolating function, instead of a \
set of data points like you might find from numerical methods in \
Python/C/C++/etc. It is like doing \[OpenCurlyQuote]dense output\
\[CloseCurlyQuote] in Python.\
\>", "Text",
 CellChangeTimes->{{3.910238264136613*^9, 3.910238335644469*^9}, {
  3.9422080569668617`*^9, 
  3.9422080744088707`*^9}},ExpressionUUID->"d2ff232f-bc5c-40bf-b9b5-\
798ffa90c13d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ynum", " ", "=", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"y", "/.", 
      RowBox[{"Flatten", "@", "sol"}]}], ")"}], "[", "t", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.942208164692998*^9, 3.942208186595065*^9}},
 CellLabel->
  "In[227]:=",ExpressionUUID->"935cddb6-f434-49d8-b5ea-0fbbd094a247"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ynum", "[", 
   RowBox[{"[", "0", "]"}], "]"}], "[", "\"\<ValuesOnGrid\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Flatten", "@", 
  RowBox[{
   RowBox[{"ynum", "[", 
    RowBox[{"[", "0", "]"}], "]"}], "[", "\"\<Coordinates\>\"", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"ydat", "=", 
  RowBox[{"Transpose", "[", 
   RowBox[{"{", 
    RowBox[{"%", ",", "%%"}], "}"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.9102385065365534`*^9, 3.9102385883835893`*^9}},
 CellLabel->
  "In[228]:=",ExpressionUUID->"1f7ccaf9-3ce9-4e37-be26-be5b4b4a996f"],

Cell[BoxData[
 RowBox[{"ListPlot", "[", "ydat", "]"}]], "Input",
 CellChangeTimes->{{3.9102385952253313`*^9, 3.910238598020846*^9}},
 CellLabel->
  "In[231]:=",ExpressionUUID->"15fbd3aa-cfe9-42bd-aa68-95065bcf3efc"],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{"ynum", ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "60"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9102386022834663`*^9, 3.910238612897305*^9}},
 CellLabel->
  "In[232]:=",ExpressionUUID->"0bdbcd66-c174-4919-8d46-6e6e2fc8515f"],

Cell["\<\
Here is another (simpler) example using the \[OpenCurlyDoubleQuote]WhenEvent\
\[CloseCurlyDoubleQuote] event locator function to simulate a bouncing ball. \
The syntax for \[OpenCurlyDoubleQuote]WhenEvent\[CloseCurlyDoubleQuote] is \
WhenEvent[event, action].\
\>", "Text",
 CellChangeTimes->{{3.910239236812088*^9, 3.9102392726880093`*^9}, {
  3.9102393263503733`*^9, 
  3.9102393373869514`*^9}},ExpressionUUID->"635cdaf6-0631-4015-94ee-\
a69af8eca22c"],

Cell[BoxData[{
 RowBox[{"NDSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"y", "''"}], "[", "t", "]"}], "==", 
      RowBox[{"-", "9.8"}]}], ",", 
     RowBox[{
      RowBox[{"y", "[", "0", "]"}], "==", "5"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"y", "'"}], "[", "0", "]"}], "==", "0"}], ",", 
     RowBox[{"WhenEvent", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"y", "[", "t", "]"}], "==", "0"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"y", "'"}], "[", "t", "]"}], "->", 
        RowBox[{
         RowBox[{"-", "0.9"}], 
         RowBox[{
          RowBox[{"y", "'"}], "[", "t", "]"}]}]}]}], "]"}]}], "}"}], ",", "y",
    ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "10"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ynum", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"y", "/.", 
      RowBox[{"Flatten", "@", "%"}]}], ")"}], "[", "t", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"ynum", ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.910238926715001*^9, 3.910239039248451*^9}, {
  3.9102390784275475`*^9, 3.9102391815699883`*^9}},
 CellLabel->
  "In[233]:=",ExpressionUUID->"3c149da2-2d06-4cf0-ae92-92eac3a18ecf"],

Cell["\<\
Much like \[OpenCurlyDoubleQuote]DSolve\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]NDSolve\[CloseCurlyDoubleQuote] is very versatile and \
can even solve PDEs numerically. The downside is that it has the same \
pitfalls as other numerical methods in Mathematica, i.e. they can be \
painfully slow.\
\>", "Text",
 CellChangeTimes->{{3.9102393591363*^9, 3.9102394104703417`*^9}, {
  3.941639117970209*^9, 
  3.9416391186941833`*^9}},ExpressionUUID->"30b532ae-a7b9-4aaf-b4cd-\
7987cdd71f6b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Export to latex", "Section",
 CellChangeTimes->{{3.908958487908535*^9, 3.9089584912693567`*^9}, {
  3.941639132420034*^9, 
  3.941639136600539*^9}},ExpressionUUID->"7e75c602-8c6e-43e7-8419-\
ff70203f207c"],

Cell[BoxData[
 RowBox[{"TeXForm", "@", 
  RowBox[{"Cos", "[", "x", "]"}]}]], "Input",
 CellChangeTimes->{{3.91076239091682*^9, 3.9107624116971188`*^9}},
 CellLabel->
  "In[236]:=",ExpressionUUID->"71e1658a-af31-4586-b770-2bceac76c91a"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     FractionBox["1", "2"], " ", 
     RowBox[{"Log", "[", 
      RowBox[{"577", "+", 
       RowBox[{"408", " ", 
        SqrtBox["2"]}]}], "]"}]}], "//", " ", "TeXForm"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.910762477443974*^9, 3.91076248124701*^9}, {
   3.910762532174885*^9, 3.9107625423476877`*^9}, 3.941639124851309*^9},
 CellLabel->
  "In[237]:=",ExpressionUUID->"dfc1465a-3119-4dcd-9029-d1f1a0532049"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   FractionBox["1", "2"], " ", 
   RowBox[{"Log", "[", 
    RowBox[{"577", "+", 
     RowBox[{"408", " ", 
      SqrtBox["2"]}]}], "]"}]}], "//", " ", "CForm", " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "to", " ", "print", " ", "in", " ", "Python", " ", "or", " ", "even", " ",
      "in", " ", "numpy", " ", "style", " ", "you", " ", "need", " ", "to", 
     " ", "import", " ", "specific", " ", "packages"}], ",", " ", 
    RowBox[{
    "it", " ", "is", " ", "not", " ", "implemented", " ", "in", " ", "core", 
     " ", "Mathematica"}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.9416927226110497`*^9, 3.941692726294676*^9}, {
  3.942208386751597*^9, 
  3.9422084429443274`*^9}},ExpressionUUID->"f8491ec3-b514-4cc1-8808-\
2a201d10c995"],

Cell["To clear everything you' ve done so far ...", "Text",
 CellChangeTimes->{{3.941693078641287*^9, 
  3.94169308945728*^9}},ExpressionUUID->"bee65742-2945-49a0-b459-\
d01f5a72b4c8"],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.941693091208149*^9, 3.9416930912113934`*^9}},
 CellLabel->
  "In[239]:=",ExpressionUUID->"284f1f79-6ec1-474f-b019-98beb735a368"],

Cell[BoxData[
 RowBox[{"MarcumQ", "[", 
  RowBox[{"1", ",", "1", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.941693262935586*^9, 3.941693267583601*^9}},
 CellLabel->
  "In[240]:=",ExpressionUUID->"d073f920-cae0-4fe5-96bf-42baa60bc43b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exercises", "Section",
 CellChangeTimes->{{3.908958487908535*^9, 
  3.9089584912693567`*^9}},ExpressionUUID->"03354471-cd10-46ac-bc3a-\
0d1fde5c27a3"],

Cell["\<\
For the exam complete two of these... 


\
\>", "Text",
 CellChangeTimes->{{3.9102406962113647`*^9, 3.910240752399127*^9}, {
  3.910761975180615*^9, 3.910761983281179*^9}, {3.941639170518961*^9, 
  3.941639188448228*^9}, {3.943355436044697*^9, 
  3.943355437372919*^9}},ExpressionUUID->"613b91ed-b215-4ef0-8871-\
4aeff5b81c67"],

Cell[TextData[{
 "Q1: Find the first three roots of the Bessel function ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["J", "1"], "(", "x", ")"}], "."}], TraditionalForm]],
  ExpressionUUID->"ee48d9e4-b245-4475-a79b-da464959a89a"],
 " \n\n\[RightArrow] I use two methods: `FindRoot` and `NSolve`. Before, I \
plot the function to have an idea of what I should expect:"
}], "Text",
 CellChangeTimes->{{3.910240761546732*^9, 3.9102407682845716`*^9}, {
   3.9102408290866327`*^9, 3.9102408709636297`*^9}, {3.9102409385628495`*^9, 
   3.9102409445377913`*^9}, 3.941639154479372*^9, {3.9416391899698*^9, 
   3.941639190048326*^9}, {3.941692831236506*^9, 3.941692833785077*^9}, {
   3.94335468340495*^9, 3.94335468341282*^9}, {3.943355211545163*^9, 
   3.943355254121202*^9}, {3.9433552879244623`*^9, 3.943355304122796*^9}, 
   3.943355359611848*^9, {3.943356677857779*^9, 
   3.9433566790726347`*^9}},ExpressionUUID->"579a6082-c4a5-4765-a8c1-\
d30676a46ee8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"BesselJ", "[", 
    RowBox[{"1", ",", "x"}], "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", " ", "10"}], "}"}], ",", 
   RowBox[{"AxesLabel", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<x\>\"", ",", "\"\<J_1(x)\>\""}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.943355367020405*^9, 3.943355383708149*^9}, {
  3.94335906004035*^9, 3.943359071453229*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"44fa3686-2650-43fe-846d-d256e36cf2ac"],

Cell[BoxData[
 GraphicsBox[
  InterpretationBox[{
    TagBox[{{{}, {}, 
       TagBox[
        {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[2], 
         Opacity[1.], LineBox[CompressedData["
1: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
          "]]},
        Annotation[#, "Charting`Private`Tag#1"]& ]}, {}},
     {"WolframDynamicHighlight", <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
    StyleBox[
     DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
       Slot["HighlightElements"], 
       Slot["LayoutOptions"], 
       Slot["Meta"], 
       Charting`HighlightActionFunction["DynamicHighlight", {{{{}, {}, 
           Annotation[{
             Directive[
              Opacity[1.], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]], 
             Line[CompressedData["
1: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
              "]]}, "Charting`Private`Tag#1"]}}, {}}, <|
        "HighlightElements" -> <|
          "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
         "LayoutOptions" -> <|
          "PanelPlotLayout" -> <||>, 
           "PlotRange" -> {{0, 10}, {-0.3461261180190739, 0.581865061766651}},
            "Frame" -> {{False, False}, {False, False}}, 
           "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
           "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
           GoldenRatio^(-1), "DefaultStyle" -> {
             Directive[
              Opacity[1.], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]]}, 
           "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& ), 
             "ScalingFunctions" -> {{Identity, Identity}, {
               Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
           False|>, 
         "Meta" -> <|
          "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
           Plot, "GroupHighlight" -> False|>|>]]& )[<|
       "HighlightElements" -> <|
         "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
        "LayoutOptions" -> <|
         "PanelPlotLayout" -> <||>, 
          "PlotRange" -> {{0, 10}, {-0.3461261180190739, 0.581865061766651}}, 
          "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0},
           "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
          "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
          "DefaultStyle" -> {
            Directive[
             Opacity[1.], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2]]}, 
          "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
              Identity[
               Part[#, 1]], 
              Identity[
               Part[#, 2]]}& ), 
            "ScalingFunctions" -> {{Identity, Identity}, {
              Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>,
         "Meta" -> <|
         "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
          Plot, "GroupHighlight" -> False|>|>],
      ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
       4.503599627370496*^15, -4.503599627370496*^15}}],
     Selectable->False]},
   Annotation[{{{{}, {}, 
       Annotation[{
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]], 
         Line[CompressedData["
1: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
          "]]}, "Charting`Private`Tag#1"]}}, {}}, <|
    "HighlightElements" -> <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
     "LayoutOptions" -> <|
      "PanelPlotLayout" -> <||>, 
       "PlotRange" -> {{0, 10}, {-0.3461261180190739, 0.581865061766651}}, 
       "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
       "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
       "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), "DefaultStyle" -> {
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]]}, 
       "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), 
         "ScalingFunctions" -> {{Identity, Identity}, {Identity, Identity}}|>,
        "Primitives" -> {}, "GCFlag" -> False|>, 
     "Meta" -> <|
      "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
       Plot, "GroupHighlight" -> False|>|>, "DynamicHighlight"]],
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox[
     TagBox["\"x\"", HoldForm], TraditionalForm], 
    FormBox[
     TagBox["\"J_1(x)\"", HoldForm], TraditionalForm]},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 10}, {-0.3461261180190739, 0.581865061766651}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.943359187596202*^9, 3.943413509065569*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"7880f5ef-c196-4bbc-a41b-16c5f0ee9c6d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"BesselJ", "[", 
     RowBox[{"1", ",", "x"}], "]"}], " ", "==", " ", "0"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0.0"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"BesselJ", "[", 
     RowBox[{"1", ",", "x"}], "]"}], " ", "==", " ", "0"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "4.0"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"BesselJ", "[", 
     RowBox[{"1", ",", "x"}], "]"}], " ", "==", " ", "0"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "7.0"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.9433542365543003`*^9, 3.943354260906671*^9}, {
  3.943354317275374*^9, 3.943354334475965*^9}, {3.9433544464930277`*^9, 
  3.943354494510784*^9}, {3.943354536015401*^9, 3.9433545571032543`*^9}, {
  3.943354999528104*^9, 3.943355005622295*^9}, {3.9433550800401506`*^9, 
  3.943355092117775*^9}, {3.943355200186338*^9, 3.943355209178647*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"197ad152-d3ab-417e-8789-d10ff3e12ee5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", "\[Rule]", "0.`"}], "}"}]], "Output",
 CellChangeTimes->{3.943359190111649*^9, 3.943413513599761*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"c3167aa6-99e9-4a34-8a06-e7e3b00dc963"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", "\[Rule]", "3.831705970207512`"}], "}"}]], "Output",
 CellChangeTimes->{3.943359190111649*^9, 3.943413513602179*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"83bdba01-91d7-4400-bf7b-df480443ecce"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", "\[Rule]", "7.01558666981561`"}], "}"}]], "Output",
 CellChangeTimes->{3.943359190111649*^9, 3.943413513604454*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"33bbd0ed-cbbc-4665-afd4-de8613370ffb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"BesselJ", "[", 
      RowBox[{"1", ",", "x"}], "]"}], " ", "==", " ", "0"}], " ", "&&", " ", 
    RowBox[{"0", "<=", "x", "<=", "10"}]}], ",", " ", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.943355025429688*^9, 3.943355071990858*^9}, {
  3.943355115496998*^9, 3.9433551941688213`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"3505b214-a302-4a57-943f-d156b65b0134"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "3.8317059702075125`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "7.015586669815619`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.943359193859333*^9, 3.943413517081139*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"622860de-a2fb-4431-bb0f-92a05246e02e"]
}, Open  ]],

Cell[TextData[{
 "\n\n\nQ2: Integrate the expression f(x) = sin(x) ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["e", 
    RowBox[{"-", "x"}]], TraditionalForm]],ExpressionUUID->
  "69649aeb-f6f2-4a33-8f79-252c6877a5c4"],
 ", and then take its derivative."
}], "Text",
 CellChangeTimes->{{3.9102408807548604`*^9, 3.910240905162507*^9}, {
  3.941639191769127*^9, 3.94163919902612*^9}, {3.943355441260681*^9, 
  3.943355461005382*^9}},ExpressionUUID->"cd159cfc-7b9e-4a17-a559-\
a59c737ba501"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], "*", 
    RowBox[{"Exp", "[", 
     RowBox[{"-", "x"}], "]"}]}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.943355510805879*^9, 3.943355595279381*^9}, {
   3.943355680593581*^9, 3.943355690257503*^9}, {3.94335580813136*^9, 
   3.9433558199238567`*^9}, 3.943359203195065*^9},
 CellLabel->"In[6]:=",ExpressionUUID->"4694d300-3f41-4c83-a35f-d185af3abed9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox["1", "2"]}], " ", 
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"-", "x"}]], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Cos", "[", "x", "]"}], "+", 
    RowBox[{"Sin", "[", "x", "]"}]}], ")"}]}]], "Output",
 CellChangeTimes->{{3.943359196671363*^9, 3.943359207694221*^9}, 
   3.943413526270235*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"68886124-34ea-4699-a853-66b84981baa0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{"%", ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{
  3.943355578948296*^9, {3.943355636288392*^9, 3.943355705300268*^9}, {
   3.943355765522889*^9, 3.943355840419427*^9}, 3.943356671507133*^9, {
   3.943356702995659*^9, 3.9433567309936743`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"ddd5cd34-4a0f-4a97-ad5e-02d790169221"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", 
    FractionBox["1", "2"]}], " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", "x"}]], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Cos", "[", "x", "]"}], "-", 
     RowBox[{"Sin", "[", "x", "]"}]}], ")"}]}], "+", 
  RowBox[{
   FractionBox["1", "2"], " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", "x"}]], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Cos", "[", "x", "]"}], "+", 
     RowBox[{"Sin", "[", "x", "]"}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{{3.943359198367415*^9, 3.943359209496188*^9}, 
   3.9434135282034607`*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"31832e5d-d22b-40a8-93c1-d90bcfe7f621"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.9433567341332693`*^9, 3.9433567596023273`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"c5eed8c8-2896-4998-956f-765a25340013"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"-", "x"}]], " ", 
  RowBox[{"Sin", "[", "x", "]"}]}]], "Output",
 CellChangeTimes->{{3.943359199662199*^9, 3.943359210533947*^9}, 
   3.943413530491055*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"be23ff73-e99d-4ebe-8400-271c4cfc9f74"]
}, Open  ]],

Cell["\<\



Q3: Solve the equation  x ln(x) - 3 x + 10 = 6, both symbolically and \
numerically.\
\>", "Text",
 CellChangeTimes->{{3.9102409088829365`*^9, 3.9102409226093073`*^9}, {
  3.9102411352142525`*^9, 3.9102411782187815`*^9}, {3.9416391656130457`*^9, 
  3.941639195387018*^9}, {3.9416392467344837`*^9, 3.9416392686112537`*^9}, {
  3.94163932552276*^9, 3.9416393305942917`*^9}, {3.943355446621169*^9, 
  3.9433554478206463`*^9}},ExpressionUUID->"65382389-77c4-4f1b-8b98-\
1522388586a2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"x", "*", 
       RowBox[{"Log", "[", "x", "]"}]}], "-", 
      RowBox[{"3", "*", "x"}], "+", "10"}], ",", " ", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "20"}], "}"}], ",", 
   RowBox[{"PlotStyle", "->", 
    RowBox[{"{", 
     RowBox[{"Default", ",", 
      RowBox[{"{", 
       RowBox[{"Dashed", ",", "Gray"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"AxesLabel", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<x\>\"", ",", "\"\<f(x)\>\""}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.943356059341427*^9, 3.943356115623345*^9}, {
   3.943357414510694*^9, 3.943357429357746*^9}, {3.9433574599742393`*^9, 
   3.943357482928768*^9}, {3.943359044840673*^9, 3.9433590498792458`*^9}, 
   3.943359213499031*^9},
 CellLabel->"In[9]:=",ExpressionUUID->"b9038a76-94ad-4a1d-8e4a-0e73a1e9b173"],

Cell[BoxData[
 GraphicsBox[
  InterpretationBox[{
    TagBox[{{{}, {}, 
       TagBox[
        {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[2], 
         Opacity[1.], LineBox[CompressedData["
1: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

          "]]},
        Annotation[#, "Charting`Private`Tag#1"]& ], 
       TagBox[
        {GrayLevel[0.5], AbsoluteThickness[2], Opacity[1.], 
         Dashing[{Small, Small}], LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQPbcuic0wZbYdAxhIOLDffqT+Vv6kPYy/8NT8wtfy
N+H8des7b+fovYLz0+0vznxT9BnOz3uq+XjLup9wPpdii/p9CwYHGL9P4LTW
wgRmOD/pdsh+5jNscH7h0ZakfHUuOH9jAU+whCcvnL+wOvuVQbgAnN80/0/g
lzeCcD7D5QcOe6qE4Xy1krSKEC1ROP/J1+lh3HvF4Hyvp1m1kwol4Hy/JxO0
5eSk4PxXh5MaTqyVhvP1BK/JOsfLwvlc9l8T73yWg/Pd30Z9VwpVgPNvHEph
jNJRhPO3dhyJU/iK4Kexlj44d04Jzk8uqt7KM0sZztdP1z7nk6gC558X0uEu
tVSF83eva5qtw6wG51czagWcuYvgc92p8sjbog7nP12mOGV+jQacP0VDkmVn
qCacP2FW2vFEBS04P2pK7Dme5wj+D5elP+fv04bzHz91qjjUrgPnL7I1lD6b
qAvnr20tFUzX1YPz20OTvZm/IvimdxaubD+rD+fP0Jy99qy3AZxff6B3hvdO
BN9XOnTpKRVDON8x73i0YCeCP18mSeXMVwRf5fDyaX7RRgj/6R7SurQPwU/7
zHLxpJYxnJ+08ZNCZz+CP+EST++R4wj+vs9qP///R/ABkrXF8w==
          "]]},
        Annotation[#, "Charting`Private`Tag#2"]& ]}, {}},
     {"WolframDynamicHighlight", <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
    StyleBox[
     DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
       Slot["HighlightElements"], 
       Slot["LayoutOptions"], 
       Slot["Meta"], 
       Charting`HighlightActionFunction["DynamicHighlight", {{{{}, {}, 
           Annotation[{
             Directive[
              Opacity[1.], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]], 
             Line[CompressedData["
1:eJwV13k8Vc8bB3DLPZdQ2Zfrbu5VhIosP2k5nyRESUWpFEkoJYkSKUVRSSpJ
IUuUIm34qiRJhWxJUUjfKLIU2bKU33z/uq/368zcOTNnnueZ0XDbs2a7mIiI
iI6oiMh/v0mH3ZgG7gmLQ313T52cFKL0LX/Fev5B+tMvoWHsNyEmXxaF8fkn
6bakgq1hb4SYdj7/rlTjebrywI8FKkVCJBWf4VH8yzTj6BzLwiwh9H66R096
JtPtwnx/vStCtEy7+neiIY2WXd9wfPFJIXYtCtg9wrtJu4cYaLV5CfGg/nP6
4NJs+kpf+Me1G4QY817R3O95hy5j/5Hj2ghhUXVuxnDDfdp04lRJop4Qb8e9
Yvt4D2nh9HZBwqAA+19x9X/ee0Rvqyn11+gQgHWh/nXv0kJaNK9AteGDAG46
EO/2fEpnbhRTeflUgMBs6Ye/GkpojqXRpcAzAkg0fdHq5ZXTRZf5l1rnCNBY
/CSgp7Octv8tJhYhFODW9fjn3fcqaFc0VliqCmDnZ+fStbSSbnIqSZMREyBu
yqO4Ds8aek/GwafJ7zUgn1gm1t9QRzPkTorsCdNAakXy3m7eBzoy/+Uxue98
DMbn6bRGfaAb6f+lslr5sPR83VY3+oEuPHfJYt47PnrERxwfvf1IS8iGakc9
48N0kZ3ZyYhmWt3WfF77FT5q70yIaf1spU/kpEmMruLjSIWejYFLG73ofW2Y
znEecu6cbNo1p4sus20b2neCgy75riibrV30xPCQ5KFADrT22yzWju2iix8n
bYnZyUHKQunUttEu+uOYjn+LHQfny6M8Nr7opgvOllYyVTnY33a238q5l959
WH9bWDYbydKvw+SW9dFSPbUrE1vU4Um/udzjN0DnfQyaV+bMgkja8KOm0wN0
On2YF7WahXgGu7kifYCeWDRLxMmShbJyD+7N9wP0989z/SX0WdB2mEjbbjZI
swsvyJeKs9DppZX9SXSIrjKTrM/KVsPO8yFFtTHDdGePo+WIuBp8vs5qy80Z
pbnd7yQqXqpASiNcq9VUBNzf9f9c9lBCtOxrnVRXcQzk9s6yP6oAtyaHp+KV
TLx+Njck64kc9r4Id9ujJQWBw6fNu81lcc9XZq3q8qmwTuZlOs6YhtRg7y79
9bJYw+j46DQgjWPJE6sHe+QQdCjty2lTKdjrF+zVHZCDR/GPvHXzpMB9tu+c
26gcCis4DTP0pPDoS1dtLSWPhRoGf2p5Uvg148Oq21x5KN8rztkoIQW37LyV
HvbyiDbe52LWMAVLHvosb3wgjy+FXl38oCkQefsZhUEKYIvecVxUKYnw70Wp
QWQe2ndfqaS8lMQUkSSx+ZEK0NOJC5N4Jgn52RtK8y4qYELq6+r2PEnMiHhj
deeuAtYtPpT4LlkSNgtK7NK+KaDP/sGJi/6SuHDtmnPkGkVEnrWoPaIhiZn+
HoEOOkrwmjSOvRUpgdlmrWuT9ZWgWKCaEhguASMRp7ldJkpol8nxsgmVgHnU
8m9HliohVnhMd/SABLak6zlkOStB9cNPpzBPCcTV/5ordlYJ7NLJzcutJEAZ
H+m4M6CE2puzTsdOkYDM+EjJ2KgSopb9VWikJCD/zPfqMhFlJDZa/Y8nJgH+
SjfHJhlluOupLy8YY2Lh9mXPmTOVIbNZJkSphwn/i9LJm52U0Wiyyjy4hon2
oUvrpJ8oY/D3tyW98UykLTHc1/JcGfybq8I2XWTC5Uz12TsVynB1lmqqOsfE
R02qfG2jMiao82VFp5h4s9ZvQeKAMprLGw++OcRE0b0V/Nk6KsBRRa2HW5m4
tFu0y+6SCkwDalxOzmHC4WEiU+OqCj7PTWAF6jIhT5kKB9JVEGk38GKnNhPR
iT7Ol+6rgH/1yfdNAibCXzdVt1apoGeLnOVuZSZ8Z+U/8GWogp98ap3tJAWb
rztDzu9VhciCa9zetxQsQ4TZFoGqCKxoqdv2hoK5UvPH4cOqqEyiDT5VUzBb
ttJ0UxTp//ZAZ0s5BZ2MuQPCG6pQXFerOaWYgvT2Qa+8ZlVEqcWNTL1NobI9
xKHRSg139/9rVHGSQtkhk7BTdmpI5IdZ5UZQKFX8eW+hoxqscy2+ph6nUGjh
Oj3VTQ19IjuKIo5SyE43r9gRooaeDPWqkIMUzrhLYPy+Gpx+/YiS30nBrj1G
l8slcS1zzbhxJRlPt73eWZPYbA1tt4KC7b7/HU7QYeHu6EuLVzYUrMU+1ar+
j4WCbdoosSLz4+vuV7BnwdWvr71pCQVj5xfFksdYJE83WSeZUMi9prrTKpKF
9s45j8yNKczr9lY4EU2eH5RmdxtSmBMk7yGewEKhUlKOhQEF7XgX6b8PWMis
axpn6VFg1486DnxlwbQ+NWmtgMIV9ZWTBj0kL2XZvtDSoKC2LSXT9xcL9pMX
6/7yKCj/shzv/cuC7KBzQh6HgqxsbEqnijpCN4zXLVOjIL5iTnfLcnVMBOcv
65OlcOzC0Vi2vToq74Yf+DWdgkhT/aJN69RRsGlj+Mg0ChM7gmMa3dRh4RWq
JzWVwnBEmfHbYHXkrjyRvnoKha7nbqFlt9Whr92Z5iVGgXeucWd0rjoU1Y/m
nxCl4LDFztHhsTr6qv5VyxShUPR7vs7nMnVYJxZVDv5l4PxsufqRNnVIim2o
zBtn4NXYiaInXeqwd0ix+jHGwMSricywfnX0dC2R0SH2cOsMmT6pjsEod5+s
3wwsuPRUS4vFxt0X/UfeDTHg624s38tng5FRN1eb+LpB1sR9LTaiZB8KDg8y
IFsZ92axMRts733VhgMMtIv4BK+zZ0Nz/ROtl30MqFW3bWevZ0NRrePDPGK7
hA32XzazEdr+oSztJwMFxstm+HizoeolvjHqBwNRO9k1x0+w0bO70fBEDwPP
/nf+oe0ZNpzmPMqXIR5mSKbLxbKhrQHfuG4GXJMHApNS2ehUnx3+oIuBi7t2
bNuWyUbM8uktlsQV81tXzrrDhtfg6R0t3xkwqq8Q5BWyMfjHjqVIvCMVU4Of
s1G/RWFRbicDV33yR1DBRiV8YtYTS05Jq6xsIO/n1/HiRgcDLYsO7m//xUZ6
xtg6n28MyEv/dL01ykZsTth3LWLrRndbXxEOLHSzr7d/ZeC+nz1/YioHrnHf
kjyJO+iXUiWKHOT2HH4/m5g9deFQhDoHsieem4y0M3DihlaFwiwO9FXcvC8Q
P/ZPyv0wl4Naw2WLPYj7ligkJ5twUNz8zXgh8YzpJ09uX8RBfEjUaiXijc1/
9+lacODeGBzT38bA2Zv+W/ptiKnx/lri0v1d1v+s5qDUzz7gAfHoUlfDECcO
AttL1C4Tz5F7z1nqwgHD//Kno8Tfznw7dnE7B6ZtRqJ7iJOkRjo6vDkIzWhv
2kLsECGx0syPg/BZCj6riWUYqvejyLlClqv7j+V/44Vqq7QeJva7lL+YOPiP
6SGD4xxYOzz3nk88L2j5v2GnOYAh670JcdfwBsv35zhgP5EY+s9p+3Zmacdz
4Nw68uq/9hv6gmSDr3JQ/3KdHU0su/t0QFU6B16tMRFWxGXfEz7ysjjoeSu/
bw3xEY9s2u8eB5LRy2VdiU3aCtNL/+Fg0Dhtiy/xD5eqKSpFHPjOO7U5jDij
ucVnRykHkdp7ZP5bD+cNP94+riAeL9p5j1jx/V/TaW/Ield2HKgkfr1m+lXX
Bg6ax9YbdhEfq+GJP2jhQEZ4OFGKfA+zFfpeVDsHsbzy+7OJ+8tQtb6LAz3J
zIC1xK4lWy9NDJP1nNP69zqxKu03YfeHA6cq5dJ64prHx7aminOhzUo1pMh+
WZx3TddSlotG9T3TfYiHDXJj4pW5EFGJDbpOfDundKiLzYX+iuoz//63vzK/
Pj07iwvJCKtbLmR/1msOa36ZS54/2HE/jfh0KvOUkQkXuzw8XTuJx65oOXww
J+MtLsoKJvu98cyOToEzF5G33PuekXiIkQpaGeDGher2HhUWiR+riFP3X3lx
4bC547M/cX5o1qFdAVxkL5BwnEfi78K+Xtn8aC6c67PzK0m82vT9CZC8yIWp
xOmP80k8i+2e1rQxgQvNkmMJN4l9PeZmTN7gInR+3K+YXpIvNuydv/wZF33H
Fn07TPKFFD20tXmAi8q95d4NJN8ELtGWzB8j7R1MG4JIPvq2dFPOWVEeYhQM
bDRIviqxfjZmPp2HCSUFiwPDDAStOXPhpg4P+vN/+FuNMtC9fcaL/Vt5KGi7
ahI4SeLHy8nb3osHr7q/FbYkv5btPC2ns4e0N17nLCD5N31P/+aWQzxI1trv
ayT52fngk+Gl8TzcPWrr6sUk9S7KUVuuhgf7vIEMZZLvzc5GVne9I/0VLArV
SD3IPPfYv7SZ9Lc2f8Ej9SI8TuPZgS4erIOfZhvJU+DWDuv9FOMjhTe9+Kgy
hfcfSl44cvnw2rPfO5PUI6vejSMCRz6KHboPC40oXFUMe3vEiQ9XOnxZCKmH
gwuy7jRvIveE+vDaD6Reppwa94xz40P1yX6DhPkUxrQSG6f48qH9afF0mib1
3K3lYd8pPmTNZxdK2ZL61uhyqKiYj0iFf4duu1PwmIxwUi/lI/55kaGLBzkP
zLxrFPiKjL93iaaCF4UdASK9BtV8dDrJqId5UyiRT92c0UTe1zXNPsyPgv/K
L4ujhvlA69ttDHJ+aCxxF92opwGviycDqBSK5LOPrJC5GjA9qMz/nkpB4tkq
o5R5GtBOk1KquUbB5KmZ5zdTDYhIhzSn3qAQ+1i2ym+ZBmTvf37ndofCqtzC
+NNbSPu+d0prnlJ4maGo/yRGA6HJrd1fPlPIiyzdwh/SQMyMqwH/6DCRafNa
NeK3BpDF2uMym4krMnV1veMayBwoH5+iz0RoTKvlY3KPS7GtrvQwZmJF/Nic
dbICaH94T9Ng4ssN/cnTugKYZrz8s3MdE9NeJSaPbCX3xBdRR2+FM+FBBXyu
rhagwET3yJ1OJli88obxNwI4xSzLKe5motqUU6P9jjxPVBSr/8GEya4XT441
CdBZt0VZdIgJ5lulBJNOAWozozr8RSWQkZLveFVUCC+58aYSlgTaF/yu2G0k
hGpcTcyQnQS2+QXnyZB7taxows20JxKY66lbvWKrJj5v/Am3HEnUyOtJB8yf
gbL509QG303B45xjCXriM+HKP6fRICmNYFEd+8qWmfh8aebklP0ykGoOsvbJ
1UKM76pFmyam4ut1jdjkQ9rga7ocqAmbjlhtNcZDx1kw5XBDr6TLIuaKx6ut
fB1k/vz5e8NxOWyM3Vwt06GDlDIr4eXd8vhtkTGaXKSL+JxO3XP7FdD21Tyw
JEIP1rLJ/fEHFZG2yEC9autsYJ30vM6rSrh9PEDOc/YcRPpZ3DUpVEaE4zZb
8aE5aJwqNN/wSQXGzak3I6rm4rNXS7i3phriZyXcrrLVR0F0jpWmCwtHis/E
2z7Uh/brENtFT9WxUt0xo0LTAJHRgXlvhBws8Xm1Se6kAfoS2pUGDnKRzHbT
rBwi1iqKkBrhQfP5jTi7TfNQH21QM+0+HzGzS3Tqiuah735F3tIdGvAYYLwp
1zGEA6OX/cBIALd7v/gnzxrCItzu6JthAXYdWzthc84Qn7XqziwaEyBgbW6D
zAVDBOoKum/+ESByKCA6Js4Q/vZS8WEMIXLmj45fSjKEvo3+IzN5IUafTb6/
nkX6ix9VK5gtREydzJnSV6S9+3e5n+5CXLm22+tEOfFahs52LyGu+VcvtX5t
iEIG83yTtxD5yjFjr6sNUbwqdXW5nxDNGxW83r4zROz8vdGZoUJotakt/dJm
iHoJ698BiULo5wZx078agp1xWLo/WQiz402j2zsMEcXW9dl1TYgVWkl3v3eR
+Z0u13C/JYSfN5/b30/+z9ppyfoCIQ4tPDp6f4CsR/TBmvrHQhyf+qXef8gQ
u+41Zq95KkT8nWunf/82RGmmkeOql0KkhTI8H42R/lFCfnW5EFmrt5sfmjDE
4C4js5VVQuQKXnIW/zVEtoPrtcpaIYoGZo5OThqieVXKphX1QvwfakYBYQ==

              "]]}, "Charting`Private`Tag#1"], 
           Annotation[{
             Directive[
              Opacity[1.], 
              AbsoluteThickness[2], 
              Dashing[{Small, Small}], 
              GrayLevel[0.5]], 
             Line[CompressedData["
1:eJxTTMoPSmViYGAwAWIQPbcuic0wZbYdAxhIOLDffqT+Vv6kPYy/8NT8wtfy
N+H8des7b+fovYLz0+0vznxT9BnOz3uq+XjLup9wPpdii/p9CwYHGL9P4LTW
wgRmOD/pdsh+5jNscH7h0ZakfHUuOH9jAU+whCcvnL+wOvuVQbgAnN80/0/g
lzeCcD7D5QcOe6qE4Xy1krSKEC1ROP/J1+lh3HvF4Hyvp1m1kwol4Hy/JxO0
5eSk4PxXh5MaTqyVhvP1BK/JOsfLwvlc9l8T73yWg/Pd30Z9VwpVgPNvHEph
jNJRhPO3dhyJU/iK4Kexlj44d04Jzk8uqt7KM0sZztdP1z7nk6gC558X0uEu
tVSF83eva5qtw6wG51czagWcuYvgc92p8sjbog7nP12mOGV+jQacP0VDkmVn
qCacP2FW2vFEBS04P2pK7Dme5wj+D5elP+fv04bzHz91qjjUrgPnL7I1lD6b
qAvnr20tFUzX1YPz20OTvZm/IvimdxaubD+rD+fP0Jy99qy3AZxff6B3hvdO
BN9XOnTpKRVDON8x73i0YCeCP18mSeXMVwRf5fDyaX7RRgj/6R7SurQPwU/7
zHLxpJYxnJ+08ZNCZz+CP+EST++R4wj+vs9qP///R/ABkrXF8w==
              "]]}, "Charting`Private`Tag#2"]}}, {}}, <|
        "HighlightElements" -> <|
          "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
         "LayoutOptions" -> <|
          "PanelPlotLayout" -> <||>, 
           "PlotRange" -> {{0, 20}, {2.6109444357629457`, 9.999992770776089}},
            "Frame" -> {{False, False}, {False, False}}, 
           "AxesOrigin" -> {0, 2.6109444357629514`}, 
           "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
           "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
           "DefaultStyle" -> {
             Directive[
              Opacity[1.], 
              AbsoluteThickness[2], 
              Dashing[{Small, Small}], 
              GrayLevel[0.5]], 
             Directive[
              Opacity[1.], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]]}, 
           "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& ), 
             "ScalingFunctions" -> {{Identity, Identity}, {
               Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
           False|>, 
         "Meta" -> <|
          "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
           Plot, "GroupHighlight" -> False|>|>]]& )[<|
       "HighlightElements" -> <|
         "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
        "LayoutOptions" -> <|
         "PanelPlotLayout" -> <||>, 
          "PlotRange" -> {{0, 20}, {2.6109444357629457`, 9.999992770776089}}, 
          "Frame" -> {{False, False}, {False, False}}, 
          "AxesOrigin" -> {0, 2.6109444357629514`}, 
          "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
          "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
          "DefaultStyle" -> {
            Directive[
             Opacity[1.], 
             AbsoluteThickness[2], 
             Dashing[{Small, Small}], 
             GrayLevel[0.5]], 
            Directive[
             Opacity[1.], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2]]}, 
          "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
              Identity[
               Part[#, 1]], 
              Identity[
               Part[#, 2]]}& ), 
            "ScalingFunctions" -> {{Identity, Identity}, {
              Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>,
         "Meta" -> <|
         "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
          Plot, "GroupHighlight" -> False|>|>],
      ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
       4.503599627370496*^15, -4.503599627370496*^15}}],
     Selectable->False]},
   Annotation[{{{{}, {}, 
       Annotation[{
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]], 
         Line[CompressedData["
1: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

          "]]}, "Charting`Private`Tag#1"], 
       Annotation[{
         Directive[
          Opacity[1.], 
          AbsoluteThickness[2], 
          Dashing[{Small, Small}], 
          GrayLevel[0.5]], 
         Line[CompressedData["
1:eJxTTMoPSmViYGAwAWIQPbcuic0wZbYdAxhIOLDffqT+Vv6kPYy/8NT8wtfy
N+H8des7b+fovYLz0+0vznxT9BnOz3uq+XjLup9wPpdii/p9CwYHGL9P4LTW
wgRmOD/pdsh+5jNscH7h0ZakfHUuOH9jAU+whCcvnL+wOvuVQbgAnN80/0/g
lzeCcD7D5QcOe6qE4Xy1krSKEC1ROP/J1+lh3HvF4Hyvp1m1kwol4Hy/JxO0
5eSk4PxXh5MaTqyVhvP1BK/JOsfLwvlc9l8T73yWg/Pd30Z9VwpVgPNvHEph
jNJRhPO3dhyJU/iK4Kexlj44d04Jzk8uqt7KM0sZztdP1z7nk6gC558X0uEu
tVSF83eva5qtw6wG51czagWcuYvgc92p8sjbog7nP12mOGV+jQacP0VDkmVn
qCacP2FW2vFEBS04P2pK7Dme5wj+D5elP+fv04bzHz91qjjUrgPnL7I1lD6b
qAvnr20tFUzX1YPz20OTvZm/IvimdxaubD+rD+fP0Jy99qy3AZxff6B3hvdO
BN9XOnTpKRVDON8x73i0YCeCP18mSeXMVwRf5fDyaX7RRgj/6R7SurQPwU/7
zHLxpJYxnJ+08ZNCZz+CP+EST++R4wj+vs9qP///R/ABkrXF8w==
          "]]}, "Charting`Private`Tag#2"]}}, {}}, <|
    "HighlightElements" -> <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
     "LayoutOptions" -> <|
      "PanelPlotLayout" -> <||>, 
       "PlotRange" -> {{0, 20}, {2.6109444357629457`, 9.999992770776089}}, 
       "Frame" -> {{False, False}, {False, False}}, 
       "AxesOrigin" -> {0, 2.6109444357629514`}, 
       "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
       "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), "DefaultStyle" -> {
         Directive[
          Opacity[1.], 
          AbsoluteThickness[2], 
          Dashing[{Small, Small}], 
          GrayLevel[0.5]], 
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]]}, 
       "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), 
         "ScalingFunctions" -> {{Identity, Identity}, {Identity, Identity}}|>,
        "Primitives" -> {}, "GCFlag" -> False|>, 
     "Meta" -> <|
      "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
       Plot, "GroupHighlight" -> False|>|>, "DynamicHighlight"]],
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox[
     TagBox["\"x\"", HoldForm], TraditionalForm], 
    FormBox[
     TagBox["\"f(x)\"", HoldForm], TraditionalForm]},
  AxesOrigin->{0, 2.6109444357629514`},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 20}, {2.6109444357629457`, 9.999992770776089}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.943359214420385*^9, 3.943413534841587*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"c888f266-ccf0-41c5-b6c0-a518587c3315"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"x", "*", 
      RowBox[{"Log", "[", "x", "]"}]}], "-", 
     RowBox[{"3", "*", "x"}], "+", "10"}], " ", "==", "6"}], ",", "x"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.943357125094967*^9, 3.9433571403608932`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"07a2e4e7-eb9a-4d8c-ad04-e6b54d585347"],

Cell[BoxData[
 TemplateBox[{
  "Solve", "ifun", 
   "\"Inverse functions are being used by \
\\!\\(\\*RowBox[{\\\"Solve\\\"}]\\), so some solutions may not be found; use \
Reduce for complete solution information.\"", 2, 10, 1, 29891958743596022377, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.943359215833331*^9, 3.943413541705698*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"a271d735-24f0-406a-8d53-d294874f13ed"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"-", 
      FractionBox["4", 
       RowBox[{"ProductLog", "[", 
        RowBox[{"-", 
         FractionBox["4", 
          SuperscriptBox["\[ExponentialE]", "3"]]}], "]"}]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"-", 
      FractionBox["4", 
       RowBox[{"ProductLog", "[", 
        RowBox[{
         RowBox[{"-", "1"}], ",", 
         RowBox[{"-", 
          FractionBox["4", 
           SuperscriptBox["\[ExponentialE]", "3"]]}]}], "]"}]]}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.943359215846471*^9, 3.943413541719005*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"558beb06-e92a-4e0c-8dc9-a7e2c3482019"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"x", "*", 
      RowBox[{"Log", "[", "x", "]"}]}], "-", 
     RowBox[{"3", "*", "x"}], "+", "10"}], " ", "==", "6"}], ",", "x"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.9433558935628767`*^9, 3.94335600914268*^9}, {
  3.943356043399646*^9, 3.943356053399489*^9}, {3.943356589041357*^9, 
  3.943356603503963*^9}, {3.94335677177849*^9, 3.943356781010795*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"6b13aa7b-a620-45ab-8162-efe448d79f83"],

Cell[BoxData[
 RowBox[{
  RowBox[{"x", "\[Equal]", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"3", "+", 
     RowBox[{"ProductLog", "[", 
      RowBox[{"-", 
       FractionBox["4", 
        SuperscriptBox["\[ExponentialE]", "3"]]}], "]"}]}]]}], "||", 
  RowBox[{"x", "\[Equal]", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"3", "+", 
     RowBox[{"ProductLog", "[", 
      RowBox[{
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", 
        FractionBox["4", 
         SuperscriptBox["\[ExponentialE]", "3"]]}]}], "]"}]}]]}]}]], "Output",
 CellChangeTimes->{3.9433592173987293`*^9, 3.943413545034433*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"49900841-162b-4cff-9039-84ae129a09e7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullSimplify", "[", "%", "]"}]], "Input",
 CellChangeTimes->{
  3.943356788164755*^9, {3.9433572364904747`*^9, 3.943357237033389*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"4e419ec5-b168-4c58-b31f-110a5ec3a719"],

Cell[BoxData[
 RowBox[{
  RowBox[{"x", "\[Equal]", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"3", "+", 
     RowBox[{"ProductLog", "[", 
      RowBox[{"-", 
       FractionBox["4", 
        SuperscriptBox["\[ExponentialE]", "3"]]}], "]"}]}]]}], "||", 
  RowBox[{"x", "\[Equal]", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"3", "+", 
     RowBox[{"ProductLog", "[", 
      RowBox[{
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", 
        FractionBox["4", 
         SuperscriptBox["\[ExponentialE]", "3"]]}]}], "]"}]}]]}]}]], "Output",
 CellChangeTimes->{3.943359219279175*^9, 3.9434135491742496`*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"65cc9f1a-2f54-4da4-ad71-636c0e13b1d6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"NSolve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"x", "*", 
       RowBox[{"Log", "[", "x", "]"}]}], "-", 
      RowBox[{"3", "*", "x"}], "+", "10"}], " ", "==", "6"}], ",", "x"}], 
   "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"or", " ", "FindRoot"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.9433561571355343`*^9, 3.9433561655628633`*^9}, 
   3.943356209786598*^9, 3.9433568180197906`*^9, {3.943356856116465*^9, 
   3.943356882801594*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"ba3767f1-1552-4ed3-911c-c7e787dce2dc"],

Cell[BoxData[
 TemplateBox[{
  "NSolve", "ifun", 
   "\"Inverse functions are being used by \
\\!\\(\\*RowBox[{\\\"NSolve\\\"}]\\), so some solutions may not be found; use \
Reduce for complete solution information.\"", 2, 13, 2, 29891958743596022377, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.943359220940423*^9, 3.943413551889228*^9},
 CellLabel->
  "During evaluation of \
In[13]:=",ExpressionUUID->"f828ae8f-7c42-4f44-8c6d-079194ba247b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "1.5688309034084709`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "15.522896611261862`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9433592209471188`*^9, 3.9434135518987513`*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"5bc640d6-5ed9-42a9-96c5-e80e6dce670e"]
}, Open  ]],

Cell[TextData[{
 "\n\n\nQ4: Solve the following initial-value problem using both DSolve and \
NDSolve. Compare your answers by plotting them.\ny\[CloseCurlyQuote]\
\[CloseCurlyQuote](x) - x y(x) = 0\ny(0) = 1\ny\[CloseCurlyQuote](0) = - ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["3", 
     RowBox[{"1", "/", "3"}]], 
    RowBox[{
     RowBox[{"Gamma", "(", 
      RowBox[{"2", "/", "3"}], ")"}], "/", 
     RowBox[{"Gamma", "(", 
      RowBox[{"1", "/", "3"}], ")"}]}]}], TraditionalForm]],ExpressionUUID->
  "b077cf25-cc3b-4959-a2f0-ecce9fce1d09"],
 "\n(bonus: solve it with scipy and check result and speed). "
}], "Text",
 CellChangeTimes->{{3.9102411793016596`*^9, 3.910241185774762*^9}, {
  3.910241301318345*^9, 3.9102413035294285`*^9}, {3.91024161719923*^9, 
  3.910241693178672*^9}, {3.910412612824978*^9, 3.910412630912512*^9}, {
  3.94163919666024*^9, 3.9416391968016644`*^9}, {3.941639364102357*^9, 
  3.941639379796598*^9}, {3.941639457034779*^9, 3.9416394592195044`*^9}, {
  3.941639524019068*^9, 3.941639565103354*^9}, {3.9433554503655577`*^9, 
  3.943355451693606*^9}, {3.9433575726712112`*^9, 3.943357622367977*^9}, {
  3.9433577540661097`*^9, 3.943357804802855*^9}, {3.9433578372032967`*^9, 
  3.9433578375236797`*^9}},ExpressionUUID->"cc4ff9e4-d5b2-4277-8617-\
d71c9c4492ed"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SymSol", "=", 
  RowBox[{"DSolve", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"y", "''"}], "[", "x", "]"}], "-", 
        RowBox[{"x", "*", 
         RowBox[{"y", "[", "x", "]"}]}]}], "==", "0"}], ",", 
      RowBox[{
       RowBox[{"y", "[", "0", "]"}], "==", "1"}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"y", "'"}], "[", "0", "]"}], "==", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"3", "^", 
            RowBox[{"(", 
             RowBox[{"1", "/", "3"}], ")"}]}], "*", 
           RowBox[{"Gamma", "[", 
            RowBox[{"2", "/", "3"}], "]"}]}], ")"}]}], "/", 
        RowBox[{"Gamma", "[", 
         RowBox[{"1", "/", "3"}], "]"}]}]}]}], "}"}], ",", 
    RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.941639361647766*^9, 3.941639362296693*^9}, {
   3.9433576497124977`*^9, 3.943357664342115*^9}, {3.943357705970293*^9, 
   3.9433577504508867`*^9}, {3.943357927173009*^9, 3.943357946597582*^9}, {
   3.943358009879675*^9, 3.943358101048745*^9}, {3.943358586784944*^9, 
   3.943358607039974*^9}, {3.9433587239211493`*^9, 3.943358741730795*^9}, {
   3.9433588041499166`*^9, 3.943358805075061*^9}, 3.943359106137204*^9},
 CellLabel->"In[14]:=",ExpressionUUID->"f56fc17a-162e-44cf-9c4b-e8a8d0637690"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "x", "]"}], "\[Rule]", 
    RowBox[{
     SuperscriptBox["3", 
      RowBox[{"2", "/", "3"}]], " ", 
     RowBox[{"AiryAi", "[", "x", "]"}], " ", 
     RowBox[{"Gamma", "[", 
      FractionBox["2", "3"], "]"}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.943359225684037*^9, 3.943413562632577*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"96127447-78d4-4266-800e-7424f7b44e8a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NumSol", "=", 
  RowBox[{"NDSolve", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"y", "''"}], "[", "x", "]"}], "-", 
        RowBox[{"x", "*", 
         RowBox[{"y", "[", "x", "]"}]}]}], "==", "0"}], ",", 
      RowBox[{
       RowBox[{"y", "[", "0", "]"}], "==", "1"}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"y", "'"}], "[", "0", "]"}], "==", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"3", "^", 
            RowBox[{"(", 
             RowBox[{"1", "/", "3"}], ")"}]}], "*", 
           RowBox[{"Gamma", "[", 
            RowBox[{"2", "/", "3"}], "]"}]}], ")"}]}], "/", 
        RowBox[{"Gamma", "[", 
         RowBox[{"1", "/", "3"}], "]"}]}]}]}], "}"}], ",", 
    RowBox[{"y", "[", "x", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{"-", "12"}], ",", "12"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9433581532794523`*^9, 3.943358189561574*^9}, {
   3.943358293806026*^9, 3.943358299020965*^9}, 3.943358674200439*^9, {
   3.943359124013338*^9, 3.943359125800622*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"ce2c1b5a-6a90-44a9-8bc0-9c3ab7b30572"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "x", "]"}], "\[Rule]", 
    RowBox[{
     InterpretationBox[
      RowBox[{
       TagBox["InterpolatingFunction",
        "SummaryHead"], "[", 
       DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
        "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwBcQOO/CFib1JlAgAAADYAAAACAAAAEcpZ8v//J8Dm5r5ay/7HvwvyOxGv
NyfA7XVzTN7U6D+9xr+3hF4mwI0lhkScyN4/boH3gr6TJcB404K2vaHivwYP
3ZPyzCTA6Q9FVITc6b9WSWQsTfUjwNJNvwwM+sU/pWmf6QssI8C8R8oVBZXs
P6w2fC7xUSLAz2wYzKGI1z+b1ga50HshwAvRDtRw9uW/iFxFaBS0IMBDcGKx
NHfrv10eSz79th/ACQtbvfoTpT+nT3P1mSIewCwzzR2y6Os/wCb3NyuWHMBT
vgzpNU3pP0pXvokJ6BrATu/2hsWow7/RU+0ksFYZwAwVR+XCW+2/yalfz6Oj
F8A0TJ4U7ijqv4+lLQWM+BXAQKEk/+pasT9TbWOEPGoUwE8t/WQQu+s/iI7c
Ejq6EsAu56etHF7wP7p7ver/JhHA+pN8lN4r3D+6hMOjJeQOwC0LJP7gsd+/
nV3DiDSKC8BXtc8rH7fxv3nOkgDUaQjAo/swdx+88b838uiWDQYFwJwdHZxb
sOG/8K0OwNfbAcAOoKYBxZ/KP41q1/8Vg/2/fhyov0qd7D/93p68sMf2v4Q4
+8DW5PU/Y4MFn2x/8L/XeMsmdCP4Pxkb83y5YOO/N9cffHRY9j+Bd+Fa+AjI
v1tUmrLeK/I/tf0PEezXyT9/y3qepFTrPzSRJaXL++M/PyPnvZ5x4j+IYWT9
rE3wPzJS0bBh2dc/PGPH+qF99j8BjhoWOlvNPyz/HLtiNP0/KoRSBtZXwD+T
tekqAbwBQOJL0K9p+7E/rzi+2TYhBUAXndULnd2hP9Ajw/XbTAhAlfctDefC
kT9TwxD7l2gLQKF/TJksMYE/9q/X4bnHDkASU8kzPf5tP06C55ql9hBAvHGK
+sCrWj8x0581IasSQO/5OSluokU/RX78RKhXFEDQA6CX/+oyP1xd8Qpn5xVA
DrgLbNAbKT8C46LB2JgXQATz/sS3azI/qpzsLoItGUAI9hwNhGNFP4Sw2hA3
uhpAWogQAKS/Wz/taoXjnmgcQIy4ZS60h3Q/WVnIbD76HUCIw62frTKNP1Tu
x+aQrR9AvfRpkSNspz/B7rVqd6wgQCx8sHzy/cI/WQBUPcJzIUDPW3YgVkHd
PzhlUIjmSyJA6pG+9WOG+T/fLqtYP8ciQFy+F7OOtA5A6NC5Jw==
                    "]]}, Annotation[#, "Charting`Private`Tag#1"]& ]}}, {}}, {
                 DisplayFunction -> Identity, Ticks -> {Automatic, Automatic},
                   AxesOrigin -> {0, 0}, FrameTicks -> {{{}, {}}, {{}, {}}}, 
                  GridLines -> {None, None}, DisplayFunction -> Identity, 
                  PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, PlotRangeClipping -> True, ImagePadding -> 
                  All, DisplayFunction -> Identity, AspectRatio -> 1, 
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                  Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                  FrameTicks -> {{None, None}, {None, None}}, 
                  GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                  Method -> {
                   "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultMeshStyle" -> AbsolutePointSize[6], 
                    "ScalingFunctions" -> None, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, 
                  PlotRange -> {{-12., 12.}, {-1.10842844542615, 
                   3.8381628028508157`}}, PlotRangeClipping -> True, 
                  PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "12.`"}], ",", "12.`"}], "}"}], "}"}], 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwBcQOO/CFib1JlAgAAADYAAAACAAAAEcpZ8v//J8Dm5r5ay/7HvwvyOxGv
NyfA7XVzTN7U6D+9xr+3hF4mwI0lhkScyN4/boH3gr6TJcB404K2vaHivwYP
3ZPyzCTA6Q9FVITc6b9WSWQsTfUjwNJNvwwM+sU/pWmf6QssI8C8R8oVBZXs
P6w2fC7xUSLAz2wYzKGI1z+b1ga50HshwAvRDtRw9uW/iFxFaBS0IMBDcGKx
NHfrv10eSz79th/ACQtbvfoTpT+nT3P1mSIewCwzzR2y6Os/wCb3NyuWHMBT
vgzpNU3pP0pXvokJ6BrATu/2hsWow7/RU+0ksFYZwAwVR+XCW+2/yalfz6Oj
F8A0TJ4U7ijqv4+lLQWM+BXAQKEk/+pasT9TbWOEPGoUwE8t/WQQu+s/iI7c
Ejq6EsAu56etHF7wP7p7ver/JhHA+pN8lN4r3D+6hMOjJeQOwC0LJP7gsd+/
nV3DiDSKC8BXtc8rH7fxv3nOkgDUaQjAo/swdx+88b838uiWDQYFwJwdHZxb
sOG/8K0OwNfbAcAOoKYBxZ/KP41q1/8Vg/2/fhyov0qd7D/93p68sMf2v4Q4
+8DW5PU/Y4MFn2x/8L/XeMsmdCP4Pxkb83y5YOO/N9cffHRY9j+Bd+Fa+AjI
v1tUmrLeK/I/tf0PEezXyT9/y3qepFTrPzSRJaXL++M/PyPnvZ5x4j+IYWT9
rE3wPzJS0bBh2dc/PGPH+qF99j8BjhoWOlvNPyz/HLtiNP0/KoRSBtZXwD+T
tekqAbwBQOJL0K9p+7E/rzi+2TYhBUAXndULnd2hP9Ajw/XbTAhAlfctDefC
kT9TwxD7l2gLQKF/TJksMYE/9q/X4bnHDkASU8kzPf5tP06C55ql9hBAvHGK
+sCrWj8x0581IasSQO/5OSluokU/RX78RKhXFEDQA6CX/+oyP1xd8Qpn5xVA
DrgLbNAbKT8C46LB2JgXQATz/sS3azI/qpzsLoItGUAI9hwNhGNFP4Sw2hA3
uhpAWogQAKS/Wz/taoXjnmgcQIy4ZS60h3Q/WVnIbD76HUCIw62frTKNP1Tu
x+aQrR9AvfRpkSNspz/B7rVqd6wgQCx8sHzy/cI/WQBUPcJzIUDPW3YgVkHd
PzhlUIjmSyJA6pG+9WOG+T/fLqtYP8ciQFy+F7OOtA5A6NC5Jw==
                    "]]}, Annotation[#, "Charting`Private`Tag#1"]& ]}}, {}}, {
                 DisplayFunction -> Identity, Ticks -> {Automatic, Automatic},
                   AxesOrigin -> {0, 0}, FrameTicks -> {{{}, {}}, {{}, {}}}, 
                  GridLines -> {None, None}, DisplayFunction -> Identity, 
                  PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, PlotRangeClipping -> True, ImagePadding -> 
                  All, DisplayFunction -> Identity, AspectRatio -> 1, 
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                  Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                  FrameTicks -> {{None, None}, {None, None}}, 
                  GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                  Method -> {
                   "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultMeshStyle" -> AbsolutePointSize[6], 
                    "ScalingFunctions" -> None, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, 
                  PlotRange -> {{-12., 12.}, {-1.10842844542615, 
                   3.8381628028508157`}}, PlotRangeClipping -> True, 
                  PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "12.`"}], ",", "12.`"}], "}"}], "}"}], 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Hermite\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Periodic: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["False", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]},
         "SummaryPanel"],
        DynamicModuleValues:>{}], "]"}],
      InterpolatingFunction[{{-12., 12.}}, {
       5, 7, 2, {427}, {4}, 0, 0, 0, 0, Automatic, {}, {}, 
        False}, CompressedData["
1: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
cPOLAP78U/A/5I0rFg==
       "], {Developer`PackedArrayForm, CompressedData["
1:eJwl04W3DwYYBuDfvXq6Tc3VzZg2Nd3deY0xcXUOV4wxpru7u9t0jTHGmO7u
GsPjeM953j/g+84bEhpWvX1QIBBY9qkkApGJRgxiE4+EJCEZKQkhLRnITDZy
kpu8FKAwRSlBKcpSgcpUoyZ1qE8jmtKclrSmLWF0ois96E1f+jOIIQxjBKMY
ywQmM42ZzGE+i1jKClazjo1sYTu72MN+DnGU45zkNGc5z0WucJ1b3OUBj3nG
S97wjg8Eu20kohKdWMQlAYlJSgpSkYb0ZCIrOchFHvJTiCIUpyRlKE8lqlKD
2tSjIU0IpQWtaMOnh3ekC93pRR/CGchghjKckYxhPJOYygxmM4+FLGE5q1jL
BjazjZ3sZh8HOcIxTnCKM5zjApe5xk3ucJ9HPOUFr3nLe4KCA4GIROELYhKH
+CTiS5LzFalJR0aykJ2v+YZ8FORbivEdpSlHRapQnVrUpQGNacb3/MCPtKMD
nelGT36iHwP4mV/4ld8YzTgmMoXpzGIuC1jMMlayhvVsYis7+J29HOAwf/An
f/E3//Avl7jKDW5zj4c84Tmv+I//gz+PPwKRiUYMYhOPhCQhGSkJIS0ZyEw2
cpKbvBSgMEUpQSnKUoHKVKMmdahPI5rSnJa0pi1hdKIrPehNX/oziCEMYwSj
GMsEJjONmcxhPotYygpWs46NbGE7u9jDfg5xlOOc5DRnOc9FrnCdW9zlAY95
xkve8I4PBEe0f6ISnVjEJQGJSUoKUpGG9GQiKznIRR7yU4giFKckZShPJapS
g9rUoyFNCKUFrWhDezrShe70og/hDGQwQxnOSMYwnklMZQazmcdClrCcVaxl
A5vZxk52s4+DHOEYJzjFGc5xgctc4yZ3uM8jnvKC17zlPUGRAoGPHjjakQ==

        "], CompressedData["
1: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
Vzwkjf9BtUCkTfyVCbz/ePHwJMMAXHu+0u1Pvg01BNfB768XcMeMRDYDyyhQ
itY48Z7dhAtbRr6yP5ZxYPnpSZXvk6DHeaz8iNg6GJCfkCwVX8fjTk4S38jn
IIlNS1m7bgW6LV7F5zZs4utLUZyG1gtwKWX//NqpJfDOq3DyzNnGLlOxvj+5
/8Lfa18pFvwWoHTGQ5G09x/OyEj+XeG/BGM3XUukX8wAjeGiZ5TRDk486TCn
WbQMTJ93go8ujYHF4dOMHko7+Pj5oq6UDyvgqCPFfdxuEHyFjV8vv/6Hs4+7
MrGbrkL+hyrq1uO/4TTFRKvXw21MSysZmFe1CkExiwsxzk0woOsV9lZ0C4+U
hO3Q0a5BJBVFfYruD+i4PRWznLSB6zWcnugKr8F52rdZ1N/DwRy95jwzvYZf
qR4N4eDc5S0saYcTvuI259rhH/tWcTM5Synd1CpIaCbeEpaswvsJTtljLMs4
nmSilfPdKvjwjdg8TW/G16/p3Amg+os/nec9BnKr8OCm+T8Pnk68dL80gWZh
Hn9i19B6+WUFXlaXHfky1YNZbElJSL7M4OXU+Dh6gRX4fCjgZUBgP573ktnz
8c0EFtIsd6p2Woaoq7cvGusO4tOqSd70YSOYvbskxHNlCZ4cZWMbtBzCXh9C
JX27BrGg7Gj8/d1/lxpDD6O6w3jmjsTHdul+zLDnuIvn7hwVp3HgfC84gnPe
beyP1ezGrP11DOlX/8L38lg9j+oRLEcafjHVth0vb0fHlBUuwjFmdudlrVF8
e8qyv/xnE8Yx4QNpgotQZ9rJHVk8ihv+BHRrFFbjlj69tyl4AbbCy2ml5kcx
e1/52jmLChxxTZiv9/oCSP2y2AnjHMNvX/tmMF0kcKUyVdjT9XmgN2HZJy07
htNqbxvNFn7BEofmlb6Gz4P7uZ40d9UxvEZRF739LgPrQ59zjtQ8+B9eVprU
GsPFZKH3hFEIli9nPGNxcB6g5mCAqfYYFvwbKWUQ4Y8D8M0OHp552FM6q1Kw
y62bpUSNvnriY45vLzUyzIOifEbkwi4XC6oUeFvpiLW2tdOfU8zDxkn/rL3X
xvBo9t5x5yZ97EK51/0m+Twsb3ws3LfLixLo3ldHa2G9wYJrZ8nmIdlg8DH9
LmfKyWxeq7uI3a/cEBMknYeeIxKz/3HB4rGfJ2tP4sbYo+HBu/PO8WokK8Mu
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
C8uf
        "]}, {Automatic}],
      Editable->False,
      SelectWithContents->True,
      Selectable->False], "[", "x", "]"}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.943359227966917*^9, 3.9434135660464373`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"65155138-67b6-42fe-a515-10a6abd49ed1"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.943358207729105*^9, 3.9433582109223213`*^9}, 
   3.943358304540743*^9, {3.943358382717187*^9, 3.9433583869083233`*^9}, 
   3.943358641221627*^9, {3.943358734003381*^9, 3.943358737810705*^9}, {
   3.943358796740775*^9, 3.943358800132*^9}, {3.943359096265346*^9, 
   3.9433591170979223`*^9}},ExpressionUUID->"0d842fd6-47a1-4b3a-872f-\
dfe102e1cc55"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9433583121551857`*^9, 3.943358313371846*^9}, 
   3.943358395917955*^9},ExpressionUUID->"8efe7ed3-fc4d-4be2-93b6-\
588ec671e4c6"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.943358409621729*^9, 
  3.9433584113082943`*^9}},ExpressionUUID->"544dd8f5-f5ee-4fa4-b1a7-\
1d9d78eca22c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"y", "[", "x", "]"}], "/.", 
      RowBox[{"SymSol", "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ",", " ", 
     RowBox[{"Evaluate", "[", 
      RowBox[{
       RowBox[{"y", "[", "x", "]"}], "/.", "NumSol"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "12"}], ",", "12"}], "}"}], ",", 
   RowBox[{"PlotStyle", "->", 
    RowBox[{"{", 
     RowBox[{"Default", ",", 
      RowBox[{"{", 
       RowBox[{"Red", ",", " ", "Dashed"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"PlotLegends", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<DSolve\>\"", ",", "\"\<NDSolve\>\""}], "}"}]}], ",", 
   RowBox[{"AxesLabel", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<x\>\"", ",", "\"\<y(x)\>\""}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.943358315521744*^9, 3.943358357900248*^9}, {
  3.9433584322217827`*^9, 3.943358442444881*^9}, {3.943358786436798*^9, 
  3.943358935718*^9}, {3.943358968247485*^9, 3.943359028551352*^9}, {
  3.943359099816854*^9, 3.943359101607963*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"f3e3eb07-2531-48d2-b9a8-37d0bc3fc733"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[
    InterpretationBox[{
      TagBox[{{{}, {}, 
         TagBox[{
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2], 
           Opacity[1.], 
           LineBox[CompressedData["
1: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
            "]]}, Annotation[#, "Charting`Private`Tag#1"]& ], 
         TagBox[{
           RGBColor[1, 0, 0], 
           AbsoluteThickness[2], 
           Opacity[1.], 
           Dashing[{Small, Small}], 
           LineBox[CompressedData["
1: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
            "]]}, Annotation[#, "Charting`Private`Tag#2"]& ]}, {}}, {
       "WolframDynamicHighlight", <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
      StyleBox[
       DynamicBox[
        (Charting`HighlightActionBox["DynamicHighlight", {}, 
         Slot["HighlightElements"], 
         Slot["LayoutOptions"], 
         Slot["Meta"], 
         Charting`HighlightActionFunction["DynamicHighlight", {{{{}, {}, 
             Annotation[{
               Directive[
                Opacity[1.], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[2]], 
               Line[CompressedData["
1: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
                "]]}, "Charting`Private`Tag#1"], 
             Annotation[{
               Directive[
                Opacity[1.], 
                AbsoluteThickness[2], 
                RGBColor[1, 0, 0], 
                Dashing[{Small, Small}]], 
               Line[CompressedData["
1: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
                "]]}, "Charting`Private`Tag#2"]}}, {}}, <|
          "HighlightElements" -> <|
            "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
           "LayoutOptions" -> <|
            "PanelPlotLayout" -> <||>, 
             "PlotRange" -> {{-12, 12}, {-1.1802062663575574`, 
               2.698290535079884}}, 
             "Frame" -> {{False, False}, {False, False}}, 
             "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
             "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
             GoldenRatio^(-1), "DefaultStyle" -> {
               Directive[
                Opacity[1.], 
                AbsoluteThickness[2], 
                RGBColor[1, 0, 0], 
                Dashing[{Small, Small}]], 
               Directive[
                Opacity[1.], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[2]]}, 
             "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                 Identity[
                  Part[#, 1]], 
                 Identity[
                  Part[#, 2]]}& ), 
               "ScalingFunctions" -> {{Identity, Identity}, {
                 Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
             False|>, 
           "Meta" -> <|
            "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
             "Function" -> Plot, "GroupHighlight" -> False|>|>]]& )[<|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, 
            "PlotRange" -> {{-12, 12}, {-1.1802062663575574`, 
              2.698290535079884}}, 
            "Frame" -> {{False, False}, {False, False}}, 
            "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
            "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
            GoldenRatio^(-1), "DefaultStyle" -> {
              Directive[
               Opacity[1.], 
               AbsoluteThickness[2], 
               RGBColor[1, 0, 0], 
               Dashing[{Small, Small}]], 
              Directive[
               Opacity[1.], 
               RGBColor[0.368417, 0.506779, 0.709798], 
               AbsoluteThickness[2]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                Identity[
                 Part[#, 1]], 
                Identity[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            Plot, "GroupHighlight" -> False|>|>], 
        ImageSizeCache -> {{4.503599627370496*^15, -4.503599627370496*^15}, {
         4.503599627370496*^15, -4.503599627370496*^15}}], Selectable -> 
       False]}, 
     Annotation[{{{{}, {}, 
         Annotation[{
           Directive[
            Opacity[1.], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[2]], 
           Line[CompressedData["
1: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
            "]]}, "Charting`Private`Tag#1"], 
         Annotation[{
           Directive[
            Opacity[1.], 
            AbsoluteThickness[2], 
            RGBColor[1, 0, 0], 
            Dashing[{Small, Small}]], 
           Line[CompressedData["
1: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
            "]]}, "Charting`Private`Tag#2"]}}, {}}, <|
      "HighlightElements" -> <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
       "LayoutOptions" -> <|
        "PanelPlotLayout" -> <||>, 
         "PlotRange" -> {{-12, 12}, {-1.1802062663575574`, 
           2.698290535079884}}, "Frame" -> {{False, False}, {False, False}}, 
         "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
         "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
         GoldenRatio^(-1), "DefaultStyle" -> {
           Directive[
            Opacity[1.], 
            AbsoluteThickness[2], 
            RGBColor[1, 0, 0], 
            Dashing[{Small, Small}]], 
           Directive[
            Opacity[1.], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[2]]}, 
         "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
             Identity[
              Part[#, 1]], 
             Identity[
              Part[#, 2]]}& ), 
           "ScalingFunctions" -> {{Identity, Identity}, {
             Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
       "Meta" -> <|
        "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
         Plot, "GroupHighlight" -> False|>|>, "DynamicHighlight"]], 
    AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
    Axes -> {True, True}, AxesLabel -> {
      FormBox[
       TagBox["\"x\"", HoldForm], TraditionalForm], 
      FormBox[
       TagBox["\"y(x)\"", HoldForm], TraditionalForm]}, AxesOrigin -> {0, 0}, 
    DisplayFunction -> Identity, Frame -> {{False, False}, {False, False}}, 
    FrameLabel -> {{None, None}, {None, None}}, 
    FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
    GridLines -> {None, None}, GridLinesStyle -> Directive[
      GrayLevel[0.5, 0.4]], ImagePadding -> All, 
    Method -> {
     "DefaultBoundaryStyle" -> Automatic, 
      "DefaultGraphicsInteraction" -> {
       "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
        "Effects" -> {
         "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
          "Droplines" -> {
           "freeformCursorMode" -> True, 
            "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
      "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> None, 
      "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}}, 
    PlotRange -> {{-12, 12}, {-1.1802062663575574`, 2.698290535079884}}, 
    PlotRangeClipping -> True, PlotRangePadding -> {{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}}, Ticks -> {Automatic, Automatic}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"DSolve\"", "\"NDSolve\""}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {40, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[2], 
                    RGBColor[1, 0, 0], 
                    Dashing[{Small, Small}]], {
                    LineBox[{{0, 12.5}, {40, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[2], 
                    RGBColor[1, 0, 0], 
                    Dashing[{Small, Small}]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "2", "]"}], ",", 
                   
                   TemplateBox[<|"color" -> RGBColor[1, 0, 0]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"Dashing", "[", 
                    RowBox[{"{", 
                    RowBox[{"Small", ",", "Small"}], "}"}], "]"}]}], "]"}]}], 
             "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.943359236871496*^9, 3.943413576629081*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"3669dd0c-94b6-468a-9509-7ba60969133c"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{
  3.9433576860890427`*^9, {3.9433577355949183`*^9, 
   3.9433577658120203`*^9}},ExpressionUUID->"8fa906fd-0c02-4be4-8e3d-\
6c28cf079edc"],

Cell["\<\
... if you want more, here are some nice exercises : \
https://www.uv.es/calocla/BasicsAnswerKeyComments.pdf
https://www.programmingmathematica.com/uploads/2/4/7/6/24766996/\
epmexercisesandsolutions.pdf\
\>", "Text",
 CellChangeTimes->{
  3.943357833909116*^9},ExpressionUUID->"fcc747df-b92c-45b3-92b6-\
f4c50e21f8ee"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.941639357222761*^9, 3.94163936032409*^9}, {
  3.94335763075235*^9, 
  3.943357633856517*^9}},ExpressionUUID->"2ec36836-a068-4cf7-a1cf-\
a4da8034f58e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sol", " ", "=", " ", 
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"x", "+", 
      RowBox[{"x", "^", 
       RowBox[{"(", "2", ")"}]}]}], "==", "1"}], ",", "x"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.941695668672596*^9, 3.9416957024213333`*^9}},
 CellLabel->
  "In[109]:=",ExpressionUUID->"31f1152e-8ac4-4476-9fc9-1be1f8a46870"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "-", 
        SqrtBox["5"]}], ")"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SqrtBox["5"]}], ")"}]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.943359242550973*^9},
 CellLabel->
  "Out[109]=",ExpressionUUID->"886399b2-6496-44a7-970a-3d66c9799318"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["sol"], "Input",
 CellChangeTimes->{{3.94169570362294*^9, 3.941695704131176*^9}},
 CellLabel->
  "In[110]:=",ExpressionUUID->"2cafc586-0184-4222-8ca4-b082cc4c7a9d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "-", 
        SqrtBox["5"]}], ")"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SqrtBox["5"]}], ")"}]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.943359243753953*^9},
 CellLabel->
  "Out[110]=",ExpressionUUID->"8daffe6d-4585-4936-bcdf-c89cdea0d049"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sol", "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.941695709506957*^9, 3.9416957133856688`*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"f4b5cb6e-c60c-4341-bed7-49ff94ef9fea"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", "\[Rule]", 
   RowBox[{
    FractionBox["1", "2"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "-", 
      SqrtBox["5"]}], ")"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.943359244843361*^9},
 CellLabel->
  "Out[111]=",ExpressionUUID->"1e8f9207-c8fd-4d1c-ba5e-2b53a4470852"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "/.", 
  RowBox[{"sol", "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.941695723006008*^9, 3.9416957271707067`*^9}},
 CellLabel->
  "In[112]:=",ExpressionUUID->"8c2a1bf1-6e1d-4417-9dea-e13999665c5b"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "2"], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "1"}], "-", 
    SqrtBox["5"]}], ")"}]}]], "Output",
 CellChangeTimes->{3.943359245830825*^9},
 CellLabel->
  "Out[112]=",ExpressionUUID->"a1bee1e9-d55a-467b-9db2-31e867def71b"]
}, Open  ]],

Cell[BoxData["\[AliasDelimiter]"], "Input",
 CellChangeTimes->{
  3.941695843039899*^9},ExpressionUUID->"39e26266-1b36-46ef-a836-\
25343b4941fe"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1920, 990},
WindowMargins->{{0, Automatic}, {Automatic, 20.25}},
Magnification:>1.5 Inherited,
FrontEndVersion->"14.1 for Linux x86 (64-bit) (July 16, 2024)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"16fc429a-3248-4672-9f5d-40972901af92"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[576, 22, 223, 4, 144, "Title",ExpressionUUID->"4df0f69a-bb07-418d-b7a2-7b448b460603"],
Cell[802, 28, 523, 7, 50, "Text",ExpressionUUID->"1c384217-8de4-4d52-ae54-d026f4d5f7d6"],
Cell[CellGroupData[{
Cell[1350, 39, 227, 4, 99, "Section",ExpressionUUID->"9b641a4d-b2b8-475c-898e-9427d1bc9b05"],
Cell[CellGroupData[{
Cell[1602, 47, 162, 3, 79, "Subsection",ExpressionUUID->"79169727-fdbc-42bb-bc33-d7f14f45c379"],
Cell[1767, 52, 549, 10, 83, "Text",ExpressionUUID->"1f5c2906-dead-4d76-89bb-985238dace06"],
Cell[2319, 64, 197, 3, 44, "Input",ExpressionUUID->"812fd77f-4c93-496f-8da2-90df881ce095"],
Cell[2519, 69, 362, 8, 50, "Text",ExpressionUUID->"b6120320-0e7f-4830-a6ad-ab3a9b6a8b1c"],
Cell[2884, 79, 317, 7, 50, "Text",ExpressionUUID->"a684da5e-6aec-4815-bda6-b1127e6f0539"],
Cell[3204, 88, 347, 6, 105, "Input",ExpressionUUID->"a5997d6c-e74f-42f3-aaba-8e5e188427fa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3588, 99, 177, 3, 79, "Subsection",ExpressionUUID->"a93df578-dd6a-48eb-a2ba-ef80cf78957c"],
Cell[3768, 104, 489, 9, 83, "Text",ExpressionUUID->"3085f63c-b2c0-4bc0-b7f3-3ecc53a9ea75"],
Cell[4260, 115, 196, 3, 44, "Input",ExpressionUUID->"0bd07bb0-2cd3-4cce-85e0-708c83df5a83"],
Cell[4459, 120, 196, 3, 44, "Input",ExpressionUUID->"584c44a7-34ad-4d6f-8c14-6ea111f661bf"],
Cell[4658, 125, 241, 4, 44, "Input",ExpressionUUID->"1a848af6-1e9d-4ec3-8839-ba2afec09129"],
Cell[4902, 131, 193, 3, 44, "Input",ExpressionUUID->"231551db-8fed-4131-9e7f-6fbb909e3282"],
Cell[5098, 136, 197, 3, 44, "Input",ExpressionUUID->"71717cb5-8105-4766-99a1-c865482ed272"],
Cell[5298, 141, 229, 5, 50, "Text",ExpressionUUID->"bce95e9e-c14b-4a9e-a213-47e6065e708f"],
Cell[5530, 148, 374, 5, 44, "Input",ExpressionUUID->"caf5e7f4-bf73-47e5-a5eb-04c1850b854a"],
Cell[5907, 155, 263, 5, 44, "Input",ExpressionUUID->"d978372c-d02d-4996-bf73-f759954ac6d1"],
Cell[6173, 162, 178, 3, 50, "Text",ExpressionUUID->"29178a4b-9237-4829-b768-ac03abda70c7"],
Cell[6354, 167, 238, 5, 44, "Input",ExpressionUUID->"3952e0a2-7ecc-4bb6-b429-52cff6101597"],
Cell[6595, 174, 268, 5, 44, "Input",ExpressionUUID->"eb4ac1c6-3065-47fa-8211-b50c3077c27a"],
Cell[6866, 181, 578, 10, 50, "Text",ExpressionUUID->"e5bc84b1-0fab-41a5-834f-8496e7d4521b"],
Cell[7447, 193, 235, 3, 44, "Input",ExpressionUUID->"a3ea4fd3-a796-4952-8277-a5c6045b8164"],
Cell[7685, 198, 180, 2, 44, "Input",ExpressionUUID->"206c9145-07fe-4e0d-aa35-d90683877a7f"],
Cell[7868, 202, 374, 7, 50, "Text",ExpressionUUID->"eb199e99-5eb9-4cf6-aecf-2b85ce2afa0d"],
Cell[8245, 211, 303, 5, 44, "Input",ExpressionUUID->"3e429f77-5d43-4e28-bd7b-9dc1805abfc8"],
Cell[8551, 218, 450, 9, 50, "Text",ExpressionUUID->"1ce0cf4c-049a-48b8-9621-7740d31cc65d"],
Cell[9004, 229, 298, 5, 44, "Input",ExpressionUUID->"9155b059-cda9-46c9-a677-923e9452dc93"],
Cell[9305, 236, 245, 4, 63, "Input",ExpressionUUID->"b09c959b-5d09-432e-98e0-f42633802e71"],
Cell[9553, 242, 299, 5, 44, "Input",ExpressionUUID->"3ab23438-39de-40c3-b909-704220413dd6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9889, 252, 161, 3, 79, "Subsection",ExpressionUUID->"eb213427-0291-4436-90c3-1b26448e4d07"],
Cell[10053, 257, 259, 6, 50, "Text",ExpressionUUID->"db86e516-65b1-4c80-88ad-1b253e7f5c1b"],
Cell[10315, 265, 150, 2, 44, "Input",ExpressionUUID->"c9737420-779e-44fc-b6f4-e0046fe74e7b"],
Cell[10468, 269, 283, 6, 50, "Text",ExpressionUUID->"0036b76a-0be9-4123-b5fb-8e8b67703410"],
Cell[10754, 277, 448, 8, 50, "Text",ExpressionUUID->"ac06df02-a3d4-4fa8-bbbd-15404470a954"],
Cell[11205, 287, 358, 8, 44, "Input",ExpressionUUID->"e61862ca-88bf-4b45-b2fc-f73ddb51b57d"],
Cell[11566, 297, 362, 7, 50, "Text",ExpressionUUID->"cea15938-442a-4a05-a923-4ae838bd7745"],
Cell[11931, 306, 362, 6, 44, "Input",ExpressionUUID->"0a266df8-b26b-422f-b560-dd5b830c3e13"],
Cell[12296, 314, 480, 9, 83, "Text",ExpressionUUID->"0b1a71a3-51bc-41e6-bab3-6b036c95167d"],
Cell[12779, 325, 150, 2, 44, "Input",ExpressionUUID->"b5c19b92-efc1-4002-91bd-612e4962879c"],
Cell[12932, 329, 220, 5, 50, "Text",ExpressionUUID->"9fdf3878-7232-4ab6-94c8-b4d6e2288cec"],
Cell[13155, 336, 232, 3, 44, "Input",ExpressionUUID->"5b047ebf-24e7-445b-b95d-286f941f769a"],
Cell[13390, 341, 256, 6, 50, "Text",ExpressionUUID->"4c52ef49-5282-45a0-a086-b318ac2a34c7"],
Cell[13649, 349, 281, 4, 44, "Input",ExpressionUUID->"23982c31-2b1d-490d-b18d-4651d7e56995"],
Cell[13933, 355, 297, 6, 50, "Text",ExpressionUUID->"a52cee15-694a-47b4-a8e4-f4c50e6d56b4"],
Cell[14233, 363, 200, 3, 44, "Input",ExpressionUUID->"62eddf7b-240b-448f-804d-a7a5eab15eb6"],
Cell[14436, 368, 191, 3, 44, "Input",ExpressionUUID->"c72a2b4f-f147-423b-a45e-325230207df2"],
Cell[14630, 373, 198, 3, 50, "Text",ExpressionUUID->"d76d2199-788f-4132-8796-0e4cf8e94419"],
Cell[14831, 378, 325, 7, 50, "Text",ExpressionUUID->"84e33e2c-54d4-44a7-a347-c0cccf3c9823"],
Cell[15159, 387, 197, 3, 44, "Input",ExpressionUUID->"29293275-190e-48db-9033-0da4b2255d18"],
Cell[15359, 392, 306, 6, 50, "Text",ExpressionUUID->"0fe39a1a-e4ec-40aa-ad1c-20fc1125bfdf"],
Cell[15668, 400, 267, 5, 74, "Input",ExpressionUUID->"863321a8-f02a-4765-a68b-da49f4fcb211"],
Cell[15938, 407, 219, 4, 50, "Text",ExpressionUUID->"91a24694-4232-46d5-877c-955a82bdc1ee"],
Cell[16160, 413, 205, 3, 44, "Input",ExpressionUUID->"20444649-7c08-496e-8579-a12f2fa85d4d"],
Cell[16368, 418, 311, 7, 50, "Text",ExpressionUUID->"2a578dbc-6b06-4894-b184-96a7acc6a8f2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16716, 430, 164, 3, 79, "Subsection",ExpressionUUID->"86c7b47f-071c-4555-be75-bbe6b732c106"],
Cell[16883, 435, 191, 3, 50, "Text",ExpressionUUID->"08e8d264-e21f-4e19-aef3-e531df8fa243"],
Cell[17077, 440, 250, 5, 44, "Input",ExpressionUUID->"58787938-e45a-4ed1-a37a-eb64937f144b"],
Cell[17330, 447, 468, 9, 50, "Text",ExpressionUUID->"86e36c74-52a0-403b-84f3-5f5871813c6a"],
Cell[17801, 458, 514, 11, 44, "Input",ExpressionUUID->"e6bdea66-9062-4c20-a17a-902224f0df3c"],
Cell[18318, 471, 148, 2, 44, "Input",ExpressionUUID->"dadd5910-11a0-4fca-b1e1-f3362d9c2b82"],
Cell[18469, 475, 442, 8, 50, "Text",ExpressionUUID->"53e86c31-0f5c-47de-8b19-bafa1373edbb"],
Cell[18914, 485, 583, 18, 80, "Input",ExpressionUUID->"c1461939-8ef5-4cb3-bed7-d960a074a27a"],
Cell[19500, 505, 256, 6, 50, "Text",ExpressionUUID->"083a026c-716d-433c-a529-e1490e44a8cf"],
Cell[19759, 513, 386, 11, 46, "Input",ExpressionUUID->"a2f917f3-7ab5-44ca-9046-ce02412aac5e"],
Cell[20148, 526, 183, 3, 50, "Text",ExpressionUUID->"b4e2b7c7-c0c4-46d7-b1e9-1be0ddb444f7"],
Cell[20334, 531, 422, 12, 46, "Input",ExpressionUUID->"d760d45f-8ec5-41c5-a840-5f30d721d280"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20793, 548, 161, 3, 79, "Subsection",ExpressionUUID->"e6c51e56-2456-4e5e-a944-73ba6bf58d91"],
Cell[20957, 553, 471, 9, 83, "Text",ExpressionUUID->"b6bd3b60-d850-4eb6-925d-9ee3d394a653"],
Cell[21431, 564, 354, 8, 44, "Input",ExpressionUUID->"573a8d84-124e-4220-a5fe-1637101ea907"],
Cell[21788, 574, 199, 3, 44, "Input",ExpressionUUID->"8daaae77-0184-417b-87d7-f003e91ad05c"],
Cell[21990, 579, 729, 12, 83, "Text",ExpressionUUID->"fb8480b4-c953-4f24-8bfe-2fde8093a275"],
Cell[22722, 593, 267, 5, 74, "Input",ExpressionUUID->"c44770d7-33f9-404e-9153-29ba079fa776"],
Cell[22992, 600, 415, 9, 74, "Input",ExpressionUUID->"c81b9f19-6f08-4642-b3e1-c6a5c5a3a043"],
Cell[23410, 611, 188, 3, 50, "Text",ExpressionUUID->"822a310c-d288-404f-af28-b5c577b3ac65"],
Cell[23601, 616, 260, 4, 74, "Input",ExpressionUUID->"13b49dd2-89f3-4ace-9bca-b8628eb8817f"],
Cell[23864, 622, 205, 3, 50, "Text",ExpressionUUID->"596b2ec9-dc3b-458c-a73b-cf304befc1fb"],
Cell[24072, 627, 378, 9, 74, "Input",ExpressionUUID->"ef596b67-b361-4d66-a585-88791fc4b745"],
Cell[24453, 638, 255, 4, 74, "Input",ExpressionUUID->"955df9cc-4243-4c86-aed3-5fbb2a98c0cb"],
Cell[24711, 644, 219, 5, 50, "Text",ExpressionUUID->"7ec4ac17-b3fa-4d05-b310-4534d58077ea"],
Cell[24933, 651, 417, 10, 44, "Input",ExpressionUUID->"b668389a-4b84-4f0a-96a3-32c41385dd44"],
Cell[25353, 663, 232, 4, 44, "Input",ExpressionUUID->"fc2ba99a-5c43-4f2e-b354-89fac8809eaa"],
Cell[25588, 669, 357, 6, 83, "Text",ExpressionUUID->"9476bb18-0975-4808-81ce-8133a4f69d13"],
Cell[25948, 677, 199, 3, 44, "Input",ExpressionUUID->"9d6727d1-9d2d-446d-8da8-f044d5461bf0"],
Cell[26150, 682, 198, 3, 44, "Input",ExpressionUUID->"99e2d7dc-b375-418d-84d2-3ec798b43b75"],
Cell[26351, 687, 195, 3, 44, "Input",ExpressionUUID->"093cbf7e-3588-4469-97ed-83bb3c381b48"],
Cell[26549, 692, 219, 4, 44, "Input",ExpressionUUID->"8bc03bca-103f-4205-95e3-b8cc244a8295"],
Cell[26771, 698, 165, 3, 50, "Text",ExpressionUUID->"4557025f-348b-4c52-a628-1a620df863af"],
Cell[26939, 703, 575, 10, 197, "Input",ExpressionUUID->"4468af63-6e0c-4077-8bb4-ea11d3c570d4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27551, 718, 180, 3, 79, "Subsection",ExpressionUUID->"6f2a06b0-92b9-4bd9-88a5-f141529804dd"],
Cell[27734, 723, 219, 4, 50, "Text",ExpressionUUID->"bc165eda-6c0e-4515-bae7-70c137ca770c"],
Cell[27956, 729, 194, 3, 44, "Input",ExpressionUUID->"8a4d9a0d-8cdc-4587-a692-81958b3e2875"],
Cell[28153, 734, 486, 9, 83, "Text",ExpressionUUID->"048b1c99-6062-45c0-895e-7069950eafe9"],
Cell[28642, 745, 393, 9, 105, "Input",ExpressionUUID->"87c2d059-16af-48a3-8d5e-de0a414e49f6"],
Cell[29038, 756, 313, 7, 50, "Text",ExpressionUUID->"f74afdd8-f342-48b9-b6c7-268916ad2019"],
Cell[29354, 765, 251, 5, 44, "Input",ExpressionUUID->"a2ca0475-7db2-4a1d-aa8e-37cc212fce30"],
Cell[29608, 772, 252, 5, 44, "Input",ExpressionUUID->"397acd58-3be0-4cae-98c0-b969db7691d4"],
Cell[29863, 779, 533, 9, 83, "Text",ExpressionUUID->"2dbed78d-40e7-4931-99bf-844d6118c6b2"],
Cell[30399, 790, 243, 4, 44, "Input",ExpressionUUID->"da751be3-f8b3-46c9-bfd1-c297165645b9"],
Cell[30645, 796, 253, 5, 44, "Input",ExpressionUUID->"e137845e-07f2-4a76-891e-1d0e73191ee8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30935, 806, 156, 3, 79, "Subsection",ExpressionUUID->"7507d254-893a-4300-8836-a63915148ea1"],
Cell[31094, 811, 257, 6, 50, "Text",ExpressionUUID->"265263fa-4082-4809-b92c-ff4be179fdce"],
Cell[31354, 819, 191, 3, 44, "Input",ExpressionUUID->"80a349bc-322b-4a02-ab94-62590403715f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[31594, 828, 161, 3, 99, "Section",ExpressionUUID->"3abd5666-09be-4917-8dee-610ebfa56e36"],
Cell[CellGroupData[{
Cell[31780, 835, 173, 3, 79, "Subsection",ExpressionUUID->"8969233f-46e3-47d7-af4b-d3b3bdd9bf1c"],
Cell[31956, 840, 250, 6, 50, "Text",ExpressionUUID->"94234519-b697-430f-8057-7b513ee5439a"],
Cell[32209, 848, 285, 6, 46, "Input",ExpressionUUID->"77f07113-586d-4228-a853-e38e419dc533"],
Cell[32497, 856, 566, 10, 83, "Text",ExpressionUUID->"c0404461-5a6b-403b-bdc9-3c5cffd20df3"],
Cell[33066, 868, 422, 9, 74, "Input",ExpressionUUID->"cf0943c9-7a29-4c78-acd6-53618672829f"],
Cell[33491, 879, 374, 7, 50, "Text",ExpressionUUID->"9ebe5992-15fc-4683-b883-a41b7c57b2b5"],
Cell[33868, 888, 465, 11, 77, "Input",ExpressionUUID->"489effb0-f54e-4c1d-8cee-cefb5b124ade"],
Cell[34336, 901, 398, 8, 83, "Text",ExpressionUUID->"27062b9b-b356-449e-86aa-816e8df9f031"],
Cell[34737, 911, 724, 19, 108, "Input",ExpressionUUID->"84c0d321-61cf-47eb-bccc-3bbf03680c25"],
Cell[35464, 932, 693, 19, 108, "Input",ExpressionUUID->"197bb01c-143d-4aee-896d-1447372cfe4c"],
Cell[36160, 953, 876, 24, 142, "Input",ExpressionUUID->"32c029e9-00ce-4022-8dd8-a25471a3b1fb"],
Cell[37039, 979, 607, 11, 83, "Text",ExpressionUUID->"94f7fe6f-2704-4239-9790-12317a754d27"],
Cell[37649, 992, 598, 17, 108, "Input",ExpressionUUID->"790a6cb8-19a9-4dc3-97a1-a230c98bd1ac"],
Cell[38250, 1011, 276, 4, 50, "Text",ExpressionUUID->"455ecec4-aec7-4d20-9788-5e3ecaa9c1dc"],
Cell[38529, 1017, 609, 16, 74, "Input",ExpressionUUID->"37ecc329-2622-48d8-a87a-c2a426bed2fe"],
Cell[39141, 1035, 783, 13, 83, "Text",ExpressionUUID->"d30b26be-e350-4054-a11e-59b748a7ba2f"],
Cell[39927, 1050, 299, 6, 74, "Input",ExpressionUUID->"e759f9c4-e5f5-4511-8f4c-a918356c58e5"],
Cell[40229, 1058, 277, 5, 74, "Input",ExpressionUUID->"67edd1fd-1df0-49cd-b673-bcf273460754"],
Cell[40509, 1065, 316, 6, 74, "Input",ExpressionUUID->"0ed9ccc8-037d-459a-9cd9-d236052ae7ba"],
Cell[40828, 1073, 323, 7, 46, "Input",ExpressionUUID->"a72f5e08-e3bd-495e-abb4-f1ae16109395"],
Cell[41154, 1082, 272, 5, 50, "Text",ExpressionUUID->"4f76b2c2-67a8-4013-a197-80d7034430d7"],
Cell[41429, 1089, 272, 6, 46, "Input",ExpressionUUID->"57a93117-d00a-4aa0-8485-97bca6b2fbee"],
Cell[41704, 1097, 735, 12, 83, "Text",ExpressionUUID->"d2dedd88-bb52-4b57-989c-b45cbce2922c"],
Cell[42442, 1111, 221, 4, 50, "Text",ExpressionUUID->"ffe05af6-b5b5-420d-a526-242fa45f16fd"],
Cell[42666, 1117, 505, 12, 74, "Input",ExpressionUUID->"80e37a62-abe0-4fd4-8fc4-ee09b89f586d"],
Cell[43174, 1131, 645, 24, 56, "Text",ExpressionUUID->"0f51fe76-5155-4845-99ac-e5cd05646d6e"],
Cell[43822, 1157, 705, 20, 80, "Input",ExpressionUUID->"dd6de4d8-3b90-472b-9fcc-8cb00bd1e587"],
Cell[44530, 1179, 277, 5, 50, "Text",ExpressionUUID->"cf84b529-ca6f-4208-8a1f-566921d1354a"],
Cell[44810, 1186, 606, 15, 80, "Input",ExpressionUUID->"7045b7d4-6760-4ae0-a2b7-b88a72518323"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45453, 1206, 271, 4, 79, "Subsection",ExpressionUUID->"edca5354-df93-4c02-9887-6a6d64f61c21"],
Cell[45727, 1212, 269, 6, 50, "Text",ExpressionUUID->"ba43ce36-874c-43c7-9999-830dd8dbb7b2"],
Cell[45999, 1220, 617, 19, 80, "Input",ExpressionUUID->"f0abb20a-19dd-4f12-b818-4213604d28ed"],
Cell[46619, 1241, 315, 7, 50, "Text",ExpressionUUID->"feabfb5c-9d8a-4657-9b3c-bb9a554eff8b"],
Cell[46937, 1250, 315, 8, 46, "Input",ExpressionUUID->"3f036a93-c02e-4644-acab-6b4c80e29fdb"],
Cell[47255, 1260, 253, 6, 50, "Text",ExpressionUUID->"6e43ffc4-5c1f-4bc1-a669-61491d872de0"],
Cell[47511, 1268, 322, 8, 46, "Input",ExpressionUUID->"9d9676ea-f9e8-45c1-8fc4-68992a287999"],
Cell[47836, 1278, 251, 6, 50, "Text",ExpressionUUID->"d6f027af-1b4e-46fc-9073-731301e8de2f"],
Cell[48090, 1286, 439, 13, 76, "Input",ExpressionUUID->"e2557c0d-5f38-4eba-b7d4-4d6979bcb5af"],
Cell[48532, 1301, 238, 4, 50, "Text",ExpressionUUID->"a5c24658-b6c5-4a94-b4e5-77f119b955c6"],
Cell[48773, 1307, 442, 13, 76, "Input",ExpressionUUID->"1f0ce453-07a3-4d12-86e0-2f02cb99950c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49252, 1325, 226, 4, 79, "Subsection",ExpressionUUID->"aab2af35-082f-4679-9c73-2e6c084948bf"],
Cell[49481, 1331, 230, 4, 50, "Text",ExpressionUUID->"75451511-e677-442d-bb0e-6422206f19a8"],
Cell[49714, 1337, 776, 21, 149, "Input",ExpressionUUID->"5f71f1e7-770a-4e4f-b241-5f7ef9da679f"],
Cell[50493, 1360, 376, 8, 50, "Text",ExpressionUUID->"bb457d7c-aa68-4369-b6e2-4af0de194554"],
Cell[50872, 1370, 497, 13, 80, "Input",ExpressionUUID->"e8b82fb7-9039-4538-8eb4-17f9f3e37eb5"],
Cell[51372, 1385, 333, 7, 50, "Text",ExpressionUUID->"021e5498-7608-4760-8154-fdc9285b8218"],
Cell[51708, 1394, 311, 8, 46, "Input",ExpressionUUID->"e7295f4f-0475-4f29-84ec-06177cfc5310"],
Cell[52022, 1404, 311, 7, 50, "Text",ExpressionUUID->"5897f7f8-72c9-4bc4-aa5d-ecd06b3a3005"],
Cell[52336, 1413, 229, 4, 44, "Input",ExpressionUUID->"fd3834b1-9435-4684-b427-e1e0be1fe658"],
Cell[52568, 1419, 290, 5, 44, "Input",ExpressionUUID->"c65b2a5b-5266-4650-a62e-a61ef25679f0"],
Cell[52861, 1426, 555, 13, 80, "Input",ExpressionUUID->"dd1e42a7-98a2-4679-9ff6-ce5d8435fcaf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[53453, 1444, 171, 3, 79, "Subsection",ExpressionUUID->"04123cf1-1517-42cc-aa82-8be6b42c62bd"],
Cell[53627, 1449, 237, 4, 50, "Text",ExpressionUUID->"51b0acce-eb47-45ec-8128-cdb62e673b55"],
Cell[53867, 1455, 531, 14, 115, "Input",ExpressionUUID->"5a70e785-aa18-47a6-8d5f-73341513e889"]
}, Open  ]],
Cell[CellGroupData[{
Cell[54435, 1474, 179, 3, 79, "Subsection",ExpressionUUID->"126de646-a208-4912-9e34-435dcce9297b"],
Cell[54617, 1479, 304, 7, 50, "Text",ExpressionUUID->"d06d458f-63d8-43e0-a95c-bd416ea64ead"],
Cell[54924, 1488, 571, 14, 115, "Input",ExpressionUUID->"29b7ee02-9cb8-4b2b-89e6-4be75cfb1670"],
Cell[55498, 1504, 259, 4, 50, "Text",ExpressionUUID->"e9b7d17d-1dfe-4eae-b75f-ecc8e11e075e"],
Cell[55760, 1510, 530, 13, 115, "Input",ExpressionUUID->"e2facdbf-0a8f-4838-8822-4849d235ad50"],
Cell[56293, 1525, 402, 8, 50, "Text",ExpressionUUID->"7fb7eb30-7ffc-4dc5-94d4-eff5c606e2fa"],
Cell[56698, 1535, 329, 7, 77, "Input",ExpressionUUID->"d5fa33c8-5ee3-4d02-86a1-b3c16ec146be"],
Cell[57030, 1544, 332, 7, 50, "Text",ExpressionUUID->"1a4d9d0a-b35c-4f76-861a-86786de752d8"],
Cell[57365, 1553, 393, 9, 80, "Input",ExpressionUUID->"89d597e7-63b5-4bfb-905f-a375f41e31cb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[57795, 1567, 157, 3, 79, "Subsection",ExpressionUUID->"26708798-b5f2-40df-b6c9-d0f3dabd8499"],
Cell[57955, 1572, 383, 11, 46, "Input",ExpressionUUID->"7bc23852-43d5-4602-a5c3-143bfe720be5"],
Cell[58341, 1585, 458, 13, 46, "Input",ExpressionUUID->"d51161a5-4b7e-4f23-b059-4ac06c28cff5"],
Cell[58802, 1600, 188, 3, 50, "Text",ExpressionUUID->"a0ea21b8-eb3d-4132-ae46-771724ac50c9"],
Cell[58993, 1605, 230, 5, 44, "Input",ExpressionUUID->"1681b414-8268-430a-91ef-a23cb748f171"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[59272, 1616, 236, 4, 99, "Section",ExpressionUUID->"21c794cb-959a-4760-acf6-995218c67552"],
Cell[CellGroupData[{
Cell[59533, 1624, 228, 4, 79, "Subsection",ExpressionUUID->"aeb41a66-f299-4fba-8492-3e726696ee46"],
Cell[59764, 1630, 554, 10, 83, "Text",ExpressionUUID->"42e9be22-e115-4efc-8eb1-39d4bb018035"],
Cell[60321, 1642, 1362, 35, 170, "Input",ExpressionUUID->"ee8439e4-2196-41bf-b8e1-82f4068b0ffe"],
Cell[61686, 1679, 253, 6, 44, "Input",ExpressionUUID->"c9421cc4-2bf9-40a4-bfff-9556fa156b7e"],
Cell[61942, 1687, 280, 6, 50, "Text",ExpressionUUID->"83396421-b766-411c-9c47-7e6ee10f37a6"],
Cell[62225, 1695, 620, 18, 111, "Input",ExpressionUUID->"1bb25dda-9c94-4106-b0a8-c859fd4dae63"],
Cell[62848, 1715, 300, 5, 50, "Text",ExpressionUUID->"1a402208-9da8-4338-a539-dd582795ed74"],
Cell[63151, 1722, 774, 23, 80, "Input",ExpressionUUID->"48753b86-c3b7-45e8-9712-8b6c1f82a5a4"],
Cell[63928, 1747, 193, 3, 50, "Text",ExpressionUUID->"78be9013-6157-4290-bce5-cb69ff2be217"],
Cell[64124, 1752, 1010, 29, 149, "Input",ExpressionUUID->"364c7a94-4ab9-4961-b30c-bef8bc39593d"],
Cell[65137, 1783, 343, 7, 50, "Text",ExpressionUUID->"e9751815-5931-43e2-9a69-8520a9d508a9"],
Cell[65483, 1792, 392, 10, 44, "Input",ExpressionUUID->"9e26d651-f1bf-4c01-bf58-9faafb265480"],
Cell[65878, 1804, 316, 7, 50, "Text",ExpressionUUID->"01d53876-7705-49bf-ac19-7fbf763f9688"],
Cell[66197, 1813, 425, 10, 46, "Input",ExpressionUUID->"d1ab2ce3-e101-4d6c-8d61-7edffbd80ee9"],
Cell[66625, 1825, 389, 10, 77, "Input",ExpressionUUID->"a16f0253-12dd-457f-a1d0-f56e514ff836"],
Cell[67017, 1837, 570, 11, 50, "Text",ExpressionUUID->"d1cf380b-38f2-4e0f-88b2-0dbc00056b87"],
Cell[67590, 1850, 739, 24, 80, "Input",ExpressionUUID->"6369747d-858b-484d-8060-8ab76b01601a"],
Cell[68332, 1876, 317, 8, 44, "Input",ExpressionUUID->"32b7857d-55e1-461c-9b72-6b5cbd9cfb67"],
Cell[68652, 1886, 515, 9, 83, "Text",ExpressionUUID->"2f52dc93-1d3b-40ce-98fc-6b8dd6a19d2f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[69204, 1900, 181, 3, 79, "Subsection",ExpressionUUID->"d4e1affd-4f36-4382-ba55-f86d92cf1bd6"],
Cell[69388, 1905, 911, 15, 116, "Text",ExpressionUUID->"f3824446-c8aa-4de8-8b79-76559d040677"],
Cell[70302, 1922, 363, 10, 46, "Input",ExpressionUUID->"666fbf84-e751-483c-83dd-cb70aa68f1ba"],
Cell[70668, 1934, 243, 4, 50, "Text",ExpressionUUID->"a70946ab-5370-4df7-ad8f-8792d7efc42d"],
Cell[70914, 1940, 468, 11, 44, "Input",ExpressionUUID->"fd8bf8a9-3b0d-4b74-a47c-db41a5a58708"],
Cell[71385, 1953, 696, 19, 44, "Input",ExpressionUUID->"4aed13bc-d6e7-4325-a945-3ece2bf75f59"],
Cell[72084, 1974, 609, 17, 105, "Input",ExpressionUUID->"fe0184e7-5520-4e09-a1c0-04082dcb3e8a"],
Cell[72696, 1993, 130, 3, 44, "Input",ExpressionUUID->"4b1fd688-f842-4311-84cc-10ec09d14b5a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[72875, 2002, 153, 3, 99, "Section",ExpressionUUID->"cc913d2b-3779-4b4c-8a20-3338b1570e50"],
Cell[CellGroupData[{
Cell[73053, 2009, 165, 3, 79, "Subsection",ExpressionUUID->"6a6c74d7-fead-48c6-bb16-4b841a63131c"],
Cell[73221, 2014, 403, 8, 50, "Text",ExpressionUUID->"6afc0794-115a-41bd-8812-15c654936322"],
Cell[73627, 2024, 302, 7, 46, "Input",ExpressionUUID->"16be811f-60d7-45be-8486-ca27bbb44ef9"],
Cell[73932, 2033, 387, 7, 83, "Text",ExpressionUUID->"a4ca403a-86f3-47c1-8eeb-63a4f8d7cfb9"],
Cell[74322, 2042, 306, 9, 72, "Input",ExpressionUUID->"ef18c180-3b48-4efc-b3fb-8698a4055ca8"],
Cell[74631, 2053, 280, 6, 50, "Text",ExpressionUUID->"762caea4-4916-48c9-9b9b-5c6c3584aeaa"],
Cell[74914, 2061, 309, 8, 46, "Input",ExpressionUUID->"79860b8d-3dd8-4d03-9c3a-74bb99e45f67"],
Cell[75226, 2071, 220, 4, 50, "Text",ExpressionUUID->"a93f302f-2e83-445a-8899-d5ad5d855a06"],
Cell[75449, 2077, 534, 15, 115, "Input",ExpressionUUID->"5becedcb-8e15-45ad-bcc8-554d08e5558e"],
Cell[75986, 2094, 294, 6, 50, "Text",ExpressionUUID->"8a7eccfc-a3fe-439f-9966-920025e943e8"],
Cell[76283, 2102, 792, 23, 111, "Input",ExpressionUUID->"0253495f-f411-4450-93bb-3a9c6ad2d72a"],
Cell[77078, 2127, 164, 3, 50, "Text",ExpressionUUID->"e8b4b386-0585-45b6-90cf-93455a36b59f"],
Cell[77245, 2132, 1095, 31, 230, "Input",ExpressionUUID->"1e49fc10-b782-4f91-9c2d-97b408f97087"],
Cell[78343, 2165, 480, 9, 83, "Text",ExpressionUUID->"4b79b416-4108-4dc1-a486-8bea7e1f0310"],
Cell[78826, 2176, 255, 6, 44, "Input",ExpressionUUID->"72d08582-0401-4aeb-8c6a-4f54b8d3c4bf"],
Cell[79084, 2184, 253, 6, 44, "Input",ExpressionUUID->"b73dcd24-c12f-4d6a-b854-90327dacd706"]
}, Open  ]],
Cell[CellGroupData[{
Cell[79374, 2195, 161, 3, 79, "Subsection",ExpressionUUID->"7e23e2c8-17b7-43b6-b452-d336e31c3c0e"],
Cell[79538, 2200, 280, 6, 50, "Text",ExpressionUUID->"ce48e8f2-ee77-4f58-adda-cf17423393c5"],
Cell[79821, 2208, 260, 6, 46, "Input",ExpressionUUID->"a50a86a0-0c5f-4cf8-86b4-d1f527d68052"],
Cell[80084, 2216, 546, 11, 149, "Text",ExpressionUUID->"67702321-77df-4e90-99fb-45b17ce3df73"],
Cell[80633, 2229, 359, 9, 46, "Input",ExpressionUUID->"a124691f-461b-4c69-8fdb-fd92f9129cea"],
Cell[80995, 2240, 220, 4, 50, "Text",ExpressionUUID->"39bef499-726f-4304-a8f8-61638b0b2b7c"],
Cell[81218, 2246, 271, 6, 46, "Input",ExpressionUUID->"7d03e919-8dca-405b-b45a-37d1595a45b6"],
Cell[81492, 2254, 366, 8, 50, "Text",ExpressionUUID->"a21f867a-cc90-449c-99b0-290e9578850c"],
Cell[81861, 2264, 498, 13, 77, "Input",ExpressionUUID->"0a1ae481-00fc-4a89-a2c4-116a6ee7e36e"],
Cell[82362, 2279, 376, 8, 50, "Text",ExpressionUUID->"96f98ca5-494f-4436-ad5e-ac9599246df2"],
Cell[82741, 2289, 1252, 31, 80, "Input",ExpressionUUID->"d0b39b3d-baff-4bbf-86b2-7960af5ac80e"],
Cell[83996, 2322, 845, 23, 82, "Text",ExpressionUUID->"42492019-f47a-4988-89d9-33864427be35"],
Cell[84844, 2347, 816, 24, 46, "Input",ExpressionUUID->"2bdcd151-6134-42c9-9e3a-6468b11934bc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[85697, 2376, 169, 3, 79, "Subsection",ExpressionUUID->"e6d33fcf-9099-40e0-a413-61940c11f04d"],
Cell[85869, 2381, 427, 8, 50, "Text",ExpressionUUID->"a81298bd-44ab-4b00-b025-daa716d0678a"],
Cell[86299, 2391, 325, 8, 44, "Input",ExpressionUUID->"4e6b9b9a-0f12-4c0c-a746-cf95f4bbbea7"],
Cell[86627, 2401, 604, 10, 83, "Text",ExpressionUUID->"9de40430-5091-4b6e-b071-2fa8f00ea5d9"],
Cell[87234, 2413, 487, 11, 74, "Input",ExpressionUUID->"e8893b5f-ca53-443b-a0fd-1ef3f84a7113"],
Cell[87724, 2426, 684, 15, 83, "Text",ExpressionUUID->"4615679c-fbec-4246-b3de-3d51e23694c0"],
Cell[88411, 2443, 780, 24, 105, "Input",ExpressionUUID->"25fe6c36-655d-4334-9ba6-411a8ede8f30"],
Cell[89194, 2469, 229, 4, 50, "Text",ExpressionUUID->"ee65af1f-4012-45a2-9577-47e76bb39c28"],
Cell[89426, 2475, 354, 9, 44, "Input",ExpressionUUID->"768aa403-65cc-49e0-bcdf-cc02af1843a4"],
Cell[89783, 2486, 504, 13, 105, "Input",ExpressionUUID->"1a3f4205-57fc-4927-b3cb-6236b30cca68"],
Cell[90290, 2501, 125, 2, 44, "Input",ExpressionUUID->"0726bb33-393c-4967-afeb-f40ab273ed05"],
Cell[90418, 2505, 248, 4, 50, "Text",ExpressionUUID->"b5b4254d-a4dd-48f6-90d4-de3aecf84529"],
Cell[90669, 2511, 716, 19, 46, "Input",ExpressionUUID->"1598bc16-f738-4f79-9bd2-ee88d407264c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[91422, 2535, 173, 3, 79, "Subsection",ExpressionUUID->"9c32d2dd-d3d2-4afa-90af-3568924dac8e"],
Cell[91598, 2540, 394, 8, 50, "Text",ExpressionUUID->"344f4fc6-a836-40eb-8bbb-31f620d2e886"],
Cell[91995, 2550, 477, 13, 63, "Input",ExpressionUUID->"44a9d442-be7c-4862-b176-e672c242a79b"],
Cell[92475, 2565, 263, 6, 50, "Text",ExpressionUUID->"5ec5af6c-9997-46ba-8333-1dea0e3b4840"],
Cell[92741, 2573, 432, 12, 63, "Input",ExpressionUUID->"66d7b073-315c-4b85-9444-0c0210e25933"],
Cell[93176, 2587, 614, 12, 83, "Text",ExpressionUUID->"74318e86-3418-4e1b-951d-e5c64824d512"],
Cell[93793, 2601, 1497, 42, 175, "Input",ExpressionUUID->"ed2792ad-a203-4622-a3f2-b8846fb9b4ce"],
Cell[95293, 2645, 427, 8, 50, "Text",ExpressionUUID->"1d953b62-ac90-4fc1-a1b4-8805f8f17ddc"],
Cell[95723, 2655, 725, 19, 107, "Input",ExpressionUUID->"16e9a2ca-54f5-481f-89ce-3ded68108245"],
Cell[96451, 2676, 782, 16, 83, "Text",ExpressionUUID->"7be2b858-061e-448d-8cb7-82cad2cf2276"],
Cell[97236, 2694, 635, 11, 83, "Text",ExpressionUUID->"bd5a59fe-546d-4055-b2d8-42ce1242bc2c"],
Cell[97874, 2707, 654, 17, 73, "Input",ExpressionUUID->"986d74a8-cf8f-48d7-b4de-086f25e2ccc8"],
Cell[98531, 2726, 428, 8, 83, "Text",ExpressionUUID->"1ba3b78e-45a8-4686-ab58-5365fc94175e"],
Cell[98962, 2736, 822, 22, 73, "Input",ExpressionUUID->"f8c6656e-d5e5-4a91-9142-0fe6446f0542"],
Cell[99787, 2760, 1378, 22, 280, "Text",ExpressionUUID->"30429b8f-9c32-4081-88e5-aeb2af0fb719"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[101214, 2788, 169, 3, 99, "Section",ExpressionUUID->"cacac330-59cc-4d52-ad1a-0155efb8e1a0"],
Cell[CellGroupData[{
Cell[101408, 2795, 158, 3, 79, "Subsection",ExpressionUUID->"2df3f4d9-c01e-4e5c-add2-5a096d797763"],
Cell[101569, 2800, 703, 19, 50, "Text",ExpressionUUID->"a19324e2-6db9-4bd9-b4a7-f6e89f2f3b9b"],
Cell[102275, 2821, 486, 14, 46, "Input",ExpressionUUID->"17540d7c-2801-4984-ac59-2f281d6b4b97"],
Cell[102764, 2837, 535, 10, 83, "Text",ExpressionUUID->"87126868-cc82-4fa0-b833-e38cd984239e"],
Cell[103302, 2849, 669, 20, 46, "Input",ExpressionUUID->"f568583d-a5ec-4e9a-8b65-ffc011957e9d"],
Cell[103974, 2871, 283, 6, 50, "Text",ExpressionUUID->"286cb3e0-86be-46be-8cd4-13b586544b5c"],
Cell[104260, 2879, 166, 3, 50, "Text",ExpressionUUID->"b1e97a05-9329-4a61-b0f3-e81a006ecf06"],
Cell[104429, 2884, 705, 20, 74, "Input",ExpressionUUID->"e8c7cd00-1651-4e17-a4b5-2fa115eba512"],
Cell[105137, 2906, 1013, 30, 106, "Input",ExpressionUUID->"468968f6-2031-4af9-bada-af89c70e68ac"],
Cell[106153, 2938, 1234, 37, 98, "Input",ExpressionUUID->"2c3f9ef2-6a8a-4922-b912-2d06d0c65128"],
Cell[107390, 2977, 900, 25, 77, "Input",ExpressionUUID->"b483e101-11a5-492c-ad78-d8b2f572be94"],
Cell[108293, 3004, 931, 28, 74, "Input",ExpressionUUID->"9e90e32e-8293-47dc-8ebd-b64a2edc470f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[109261, 3037, 157, 3, 79, "Subsection",ExpressionUUID->"80e3be45-64e0-4219-ad24-62e546bc305a"],
Cell[109421, 3042, 211, 4, 44, "Input",ExpressionUUID->"be84d239-383a-436e-a5f5-ce8e7c00978f"],
Cell[109635, 3048, 885, 23, 56, "Text",ExpressionUUID->"09ef56cc-20c0-4d72-8f4f-f92eb8a8dc33"],
Cell[110523, 3073, 706, 20, 46, "Input",ExpressionUUID->"af4a74b0-81c1-471f-8634-537898e3e6ef"],
Cell[111232, 3095, 1016, 16, 149, "Text",ExpressionUUID->"69cda457-47fc-442c-a7e3-6b266c9eae67"],
Cell[112251, 3113, 1270, 35, 80, "Input",ExpressionUUID->"338847a7-559a-4db0-9992-5bc14c8c9047"],
Cell[113524, 3150, 444, 9, 83, "Text",ExpressionUUID->"d2ff232f-bc5c-40bf-b9b5-798ffa90c13d"],
Cell[113971, 3161, 348, 10, 44, "Input",ExpressionUUID->"935cddb6-f434-49d8-b5ea-0fbbd094a247"],
Cell[114322, 3173, 588, 16, 105, "Input",ExpressionUUID->"1f7ccaf9-3ce9-4e37-be26-be5b4b4a996f"],
Cell[114913, 3191, 215, 4, 44, "Input",ExpressionUUID->"15fbd3aa-cfe9-42bd-aa68-95065bcf3efc"],
Cell[115131, 3197, 294, 7, 44, "Input",ExpressionUUID->"0bdbcd66-c174-4919-8d46-6e6e2fc8515f"],
Cell[115428, 3206, 464, 9, 50, "Text",ExpressionUUID->"635cdaf6-0631-4015-94ee-a69af8eca22c"],
Cell[115895, 3217, 1339, 42, 108, "Input",ExpressionUUID->"3c149da2-2d06-4cf0-ae92-92eac3a18ecf"],
Cell[117237, 3261, 505, 10, 83, "Text",ExpressionUUID->"30b532ae-a7b9-4aaf-b4cd-7987cdd71f6b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[117791, 3277, 211, 4, 99, "Section",ExpressionUUID->"7e75c602-8c6e-43e7-8419-ff70203f207c"],
Cell[118005, 3283, 235, 5, 44, "Input",ExpressionUUID->"71e1658a-af31-4586-b770-2bceac76c91a"],
Cell[118243, 3290, 519, 14, 129, "Input",ExpressionUUID->"dfc1465a-3119-4dcd-9029-d1f1a0532049"],
Cell[118765, 3306, 784, 20, 96, "Input",ExpressionUUID->"f8491ec3-b514-4cc1-8808-2a201d10c995"],
Cell[119552, 3328, 184, 3, 50, "Text",ExpressionUUID->"bee65742-2945-49a0-b459-d01f5a72b4c8"],
Cell[119739, 3333, 227, 4, 44, "Input",ExpressionUUID->"284f1f79-6ec1-474f-b019-98beb735a368"],
Cell[119969, 3339, 242, 5, 44, "Input",ExpressionUUID->"d073f920-cae0-4fe5-96bf-42baa60bc43b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[120248, 3349, 156, 3, 99, "Section",ExpressionUUID->"03354471-cd10-46ac-bc3a-0d1fde5c27a3"],
Cell[120407, 3354, 337, 10, 149, "Text",ExpressionUUID->"613b91ed-b215-4ef0-8871-4aeff5b81c67"],
Cell[120747, 3366, 978, 19, 116, "Text",ExpressionUUID->"579a6082-c4a5-4765-a8c1-d30676a46ee8"],
Cell[CellGroupData[{
Cell[121750, 3389, 517, 12, 46, "Input",ExpressionUUID->"44fa3686-2650-43fe-846d-d256e36cf2ac"],
Cell[122270, 3403, 41763, 730, 362, "Output",ExpressionUUID->"7880f5ef-c196-4bbc-a41b-16c5f0ee9c6d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[164070, 4138, 1140, 27, 115, "Input",ExpressionUUID->"197ad152-d3ab-417e-8789-d10ff3e12ee5"],
Cell[165213, 4167, 223, 4, 50, "Output",ExpressionUUID->"c3167aa6-99e9-4a34-8a06-e7e3b00dc963"],
Cell[165439, 4173, 238, 4, 50, "Output",ExpressionUUID->"83bdba01-91d7-4400-bf7b-df480443ecce"],
Cell[165680, 4179, 237, 4, 50, "Output",ExpressionUUID->"33bbd0ed-cbbc-4665-afd4-de8613370ffb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[165954, 4188, 455, 10, 46, "Input",ExpressionUUID->"3505b214-a302-4a57-943f-d156b65b0134"],
Cell[166412, 4200, 427, 10, 50, "Output",ExpressionUUID->"622860de-a2fb-4431-bb0f-92a05246e02e"]
}, Open  ]],
Cell[166854, 4213, 491, 12, 149, "Text",ExpressionUUID->"cd159cfc-7b9e-4a17-a559-a59c737ba501"],
Cell[CellGroupData[{
Cell[167370, 4229, 461, 10, 44, "Input",ExpressionUUID->"4694d300-3f41-4c83-a35f-d185af3abed9"],
Cell[167834, 4241, 438, 12, 64, "Output",ExpressionUUID->"68886124-34ea-4699-a853-66b84981baa0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[168309, 4258, 370, 7, 44, "Input",ExpressionUUID->"ddd5cd34-4a0f-4a97-ad5e-02d790169221"],
Cell[168682, 4267, 700, 21, 64, "Output",ExpressionUUID->"31832e5d-d22b-40a8-93c1-d90bcfe7f621"]
}, Open  ]],
Cell[CellGroupData[{
Cell[169419, 4293, 209, 3, 44, "Input",ExpressionUUID->"c5eed8c8-2896-4998-956f-765a25340013"],
Cell[169631, 4298, 307, 7, 50, "Output",ExpressionUUID->"be23ff73-e99d-4ebe-8400-271c4cfc9f74"]
}, Open  ]],
Cell[169953, 4308, 493, 12, 149, "Text",ExpressionUUID->"65382389-77c4-4f1b-8b98-1522388586a2"],
Cell[CellGroupData[{
Cell[170471, 4324, 916, 23, 46, "Input",ExpressionUUID->"b9038a76-94ad-4a1d-8e4a-0e73a1e9b173"],
Cell[171390, 4349, 27850, 523, 377, "Output",ExpressionUUID->"c888f266-ccf0-41c5-b6c0-a518587c3315"]
}, Open  ]],
Cell[CellGroupData[{
Cell[199277, 4877, 383, 10, 46, "Input",ExpressionUUID->"07a2e4e7-eb9a-4d8c-ad04-e6b54d585347"],
Cell[199663, 4889, 473, 11, 39, "Message",ExpressionUUID->"a271d735-24f0-406a-8d53-d294874f13ed"],
Cell[200139, 4902, 758, 23, 78, "Output",ExpressionUUID->"558beb06-e92a-4e0c-8dc9-a7e2c3482019"]
}, Open  ]],
Cell[CellGroupData[{
Cell[200934, 4930, 526, 12, 46, "Input",ExpressionUUID->"6b13aa7b-a620-45ab-8162-efe448d79f83"],
Cell[201463, 4944, 701, 19, 61, "Output",ExpressionUUID->"49900841-162b-4cff-9039-84ae129a09e7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[202201, 4968, 237, 4, 44, "Input",ExpressionUUID->"4e419ec5-b168-4c58-b31f-110a5ec3a719"],
Cell[202441, 4974, 701, 19, 61, "Output",ExpressionUUID->"65cc9f1a-2f54-4da4-ad71-636c0e13b1d6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[203179, 4998, 583, 15, 46, "Input",ExpressionUUID->"ba3767f1-1552-4ed3-911c-c7e787dce2dc"],
Cell[203765, 5015, 475, 11, 39, "Message",ExpressionUUID->"f828ae8f-7c42-4f44-8c6d-079194ba247b"],
Cell[204243, 5028, 366, 8, 50, "Output",ExpressionUUID->"5bc640d6-5ed9-42a9-96c5-e80e6dce670e"]
}, Open  ]],
Cell[204624, 5039, 1311, 26, 280, "Text",ExpressionUUID->"cc4ff9e4-d5b2-4277-8617-d71c9c4492ed"],
Cell[CellGroupData[{
Cell[205960, 5069, 1409, 35, 44, "Input",ExpressionUUID->"f56fc17a-162e-44cf-9c4b-e8a8d0637690"],
Cell[207372, 5106, 461, 12, 65, "Output",ExpressionUUID->"96127447-78d4-4266-800e-7424f7b44e8a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[207870, 5123, 1247, 35, 44, "Input",ExpressionUUID->"ce2c1b5a-6a90-44a9-8bc0-9c3ab7b30572"],
Cell[209120, 5160, 33079, 591, 91, "Output",ExpressionUUID->"65155138-67b6-42fe-a515-10a6abd49ed1"]
}, Open  ]],
Cell[242214, 5754, 396, 6, 44, "Input",ExpressionUUID->"0d842fd6-47a1-4b3a-872f-dfe102e1cc55"],
Cell[242613, 5762, 177, 3, 44, "Input",ExpressionUUID->"8efe7ed3-fc4d-4be2-93b6-588ec671e4c6"],
Cell[242793, 5767, 154, 3, 44, "Input",ExpressionUUID->"544dd8f5-f5ee-4fa4-b1a7-1d9d78eca22c"],
Cell[CellGroupData[{
Cell[242972, 5774, 1184, 30, 80, "Input",ExpressionUUID->"f3e3eb07-2531-48d2-b9a8-37d0bc3fc733"],
Cell[244159, 5806, 179972, 3042, 389, "Output",ExpressionUUID->"3669dd0c-94b6-468a-9509-7ba60969133c"]
}, Open  ]],
Cell[424146, 8851, 184, 4, 44, "Input",ExpressionUUID->"8fa906fd-0c02-4be4-8e3d-6c28cf079edc"],
Cell[424333, 8857, 329, 8, 83, "Text",ExpressionUUID->"fcc747df-b92c-45b3-92b6-f4c50e21f8ee"],
Cell[424665, 8867, 199, 4, 44, "Input",ExpressionUUID->"2ec36836-a068-4cf7-a1cf-a4da8034f58e"],
Cell[CellGroupData[{
Cell[424889, 8875, 375, 10, 44, "Input",ExpressionUUID->"31f1152e-8ac4-4476-9fc9-1be1f8a46870"],
Cell[425267, 8887, 604, 21, 64, "Output",ExpressionUUID->"886399b2-6496-44a7-970a-3d66c9799318"]
}, Open  ]],
Cell[CellGroupData[{
Cell[425908, 8913, 177, 3, 44, "Input",ExpressionUUID->"2cafc586-0184-4222-8ca4-b082cc4c7a9d"],
Cell[426088, 8918, 604, 21, 64, "Output",ExpressionUUID->"8daffe6d-4585-4936-bcdf-c89cdea0d049"]
}, Open  ]],
Cell[CellGroupData[{
Cell[426729, 8944, 230, 5, 44, "Input",ExpressionUUID->"f4b5cb6e-c60c-4341-bed7-49ff94ef9fea"],
Cell[426962, 8951, 340, 11, 64, "Output",ExpressionUUID->"1e8f9207-c8fd-4d1c-ba5e-2b53a4470852"]
}, Open  ]],
Cell[CellGroupData[{
Cell[427339, 8967, 255, 6, 44, "Input",ExpressionUUID->"8c2a1bf1-6e1d-4417-9dea-e13999665c5b"],
Cell[427597, 8975, 277, 9, 64, "Output",ExpressionUUID->"a1bee1e9-d55a-467b-9db2-31e867def71b"]
}, Open  ]],
Cell[427889, 8987, 145, 3, 44, "Input",ExpressionUUID->"39e26266-1b36-46ef-a836-25343b4941fe"]
}, Open  ]]
}, Open  ]]
}
]
*)

